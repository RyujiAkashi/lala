{"file_contents":{"drawfx/src/main/java/com/gabriel/drawfx/service/DocumentService.java":{"content":"package com.gabriel.drawfx.service;\r\n\r\npublic interface DocumentService {\r\n    void save();\r\n    void open();\r\n}\r\n","size_bytes":114},"prop/src/main/java/com/gabriel/property/validator/Validator.java":{"content":"package com.gabriel.property.validator;\r\n\r\n/**\r\n * Validator interface\r\n * <p>\r\n * A validators job is to check whether a given object can be converted\r\n * to the desired type. Moreover, a validator can check for additional requirements.\r\n */\r\npublic interface Validator {\r\n\r\n    /**\r\n     * Checks whether the object meets the criteria\r\n     *\r\n     * @param object Raw object coming from editor\r\n     * @return True if the object meets the criteria and can be converted, false otherwise\r\n     */\r\n    public boolean validate(Object object);\r\n\r\n}\r\n","size_bytes":549},"prop/src/main/java/com/gabriel/property/validator/integer/IntegerParityValidator.java":{"content":"package com.gabriel.property.validator.integer;\r\n\r\nimport com.gabriel.property.validator.Validator;\r\n\r\npublic class IntegerParityValidator implements Validator {\r\n\r\n    protected boolean even;\r\n\r\n    public IntegerParityValidator() {\r\n        this(true);\r\n    }\r\n\r\n    public IntegerParityValidator(boolean even) {\r\n        this.even = even;\r\n    }\r\n\r\n    public void setEven(boolean even) {\r\n        this.even = even;\r\n    }\r\n\r\n    @Override\r\n    public boolean validate(Object object) {\r\n        int value = Integer.parseInt((String) object);\r\n\r\n        if (even) {\r\n            return value % 2 == 0;\r\n        } else {\r\n            return value % 2 != 0;\r\n        }\r\n    }\r\n}\r\n","size_bytes":680},"drawfx/src/main/java/com/gabriel/drawfx/renderer/Renderer.java":{"content":"package com.gabriel.drawfx.renderer;\r\n\r\nimport com.gabriel.drawfx.model.Shape;\r\n\r\nimport java.awt.*;\r\n\r\npublic interface Renderer {\r\n        void render(Graphics g, Shape shape, boolean xor);\r\n}\r\n","size_bytes":196},"prop/src/main/java/com/gabriel/property/PropertyOptions.java":{"content":"package com.gabriel.property;\r\n\r\nimport java.awt.*;\r\n\r\npublic class PropertyOptions {\r\n    private final String[] headers;\r\n    private final Color backgroundColor;\r\n    private final Color invalidColor;\r\n    private final int rowHeight;\r\n\r\n    public PropertyOptions(\r\n            String[] headers,\r\n            Color backgroundColor,\r\n            Color invalidColor,\r\n            int rowHeight\r\n    ) {\r\n        this.headers = headers;\r\n        this.backgroundColor = backgroundColor;\r\n        this.invalidColor = invalidColor;\r\n        this.rowHeight = rowHeight;\r\n    }\r\n    public PropertyOptions() {\r\n        this.headers = new String[]{\"Property\", \"value\"};\r\n        this.backgroundColor = new Color(255, 255, 255);\r\n        this.invalidColor = new Color(255, 179, 176);\r\n        this.rowHeight = 30;\r\n    }\r\n\r\n    public String[] getHeaders() {\r\n        return headers;\r\n    }\r\n\r\n    public Color getBackgroundColor() {\r\n        return backgroundColor;\r\n    }\r\n\r\n    public Color getInvalidColor() {\r\n        return invalidColor;\r\n    }\r\n\r\n    public int getRowHeight() {\r\n        return rowHeight;\r\n    }\r\n\r\n    public static class Builder {\r\n\r\n        private String[] headers;\r\n        private Color backgroundColor;\r\n        private Color invalidColor;\r\n        private int rowHeight;\r\n\r\n        public Builder() {\r\n            this.headers = new String[]{\"Property\", \"value\"};\r\n            this.backgroundColor = new Color(255, 255, 255);\r\n            this.invalidColor = new Color(255, 179, 176);\r\n            this.rowHeight = 30;\r\n        }\r\n\r\n        public Builder setHeaders(String header1, String header2) {\r\n            this.headers = new String[]{header1, header2};\r\n\r\n            return this;\r\n        }\r\n\r\n        public Builder setBackgroundColor(Color backgroundColor) {\r\n            this.backgroundColor = backgroundColor;\r\n\r\n            return this;\r\n        }\r\n\r\n        public Builder setInvalidColor(Color invalidColor) {\r\n            this.invalidColor = invalidColor;\r\n\r\n            return this;\r\n        }\r\n\r\n        public Builder setRowHeight(int rowHeight) {\r\n            this.rowHeight = rowHeight;\r\n\r\n            return this;\r\n        }\r\n\r\n        public PropertyOptions build() {\r\n            return new PropertyOptions(headers, backgroundColor, invalidColor, rowHeight);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","size_bytes":2336},"draw/src/main/java/com/gabriel/draw/view/DrawingToolBar.java":{"content":"package com.gabriel.draw.view;\r\n\r\nimport com.gabriel.draw.controller.ActionController;\r\nimport com.gabriel.drawfx.ActionCommand;\r\nimport com.gabriel.drawfx.service.AppService;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionListener;\r\nimport java.net.URL;\r\n\r\npublic class DrawingToolBar extends JToolBar {\r\n\r\n    protected JTextArea textArea;\r\n    ActionListener actionListener;\r\n\r\n  public DrawingToolBar( ActionListener actionListener){\r\n        setFloatable(false);\r\n        setRollover(true);\r\n        this.actionListener = actionListener;\r\n        addButtons();\r\n\r\n        textArea = new JTextArea(5, 30);\r\n        textArea.setEditable(false);\r\n        JScrollPane scrollPane = new JScrollPane(textArea);\r\n        add(scrollPane, BorderLayout.CENTER);\r\n\r\n        //Lay out the main panel.\r\n        setPreferredSize(new Dimension(200, 30));\r\n        setBackground(Color.GREEN);\r\n    }\r\n\r\n    protected void addButtons() {\r\n        JButton button = null;\r\n        button = makeNavigationButton(\"rect\", ActionCommand.RECT, \"Draw a rectangle\",ActionCommand.RECT);\r\n        add(button);\r\n\r\n        button = makeNavigationButton(\"line\", ActionCommand.LINE, \"Draw a line\",ActionCommand.LINE);\r\n        add(button);\r\n\r\n        button = makeNavigationButton(\"ellipse\", ActionCommand.ELLIPSE,\"Draw an ellipse\",ActionCommand.ELLIPSE);\r\n        add(button);\r\n\r\n        button = makeNavigationButton(\"text\",ActionCommand.TEXT,\"Add a text\",ActionCommand.TEXT);\r\n        add(button);\r\n\r\n        button = makeNavigationButton(\"image\",ActionCommand.IMAGE,\"Add an  image\",ActionCommand.IMAGE);\r\n        add(button);\r\n\r\n        button = makeNavigationButton(\"select\",ActionCommand.SELECT,\"Switch to select\",ActionCommand.SELECT);\r\n        add(button);\r\n\r\n        button = makeNavigationButton(\"imagefile\",ActionCommand.IMAGEFILE,\"Select another image \",ActionCommand.IMAGEFILE);\r\n        add(button);\r\n\r\n        button = makeNavigationButton(\"font\",ActionCommand.FONT,\"Select another font \",ActionCommand.FONT);\r\n        add(button);\r\n\r\n        //separator\r\n        addSeparator();\r\n\r\n        //fourth button\r\n        button = new JButton(\"Another button\");\r\n        button.setActionCommand(\"SOMETHING_ELSE\");\r\n        button.setToolTipText(\"Something else\");\r\n        button.addActionListener(actionListener);\r\n        add(button);\r\n\r\n        //fifth component is NOT a button!\r\n        JTextField textField = new JTextField(\"\");\r\n        textField.setColumns(10);\r\n        textField.addActionListener(actionListener);\r\n        textField.setActionCommand(\"TEXT_ENTERED\");\r\n        add(textField);\r\n    }\r\n\r\n    protected JButton makeNavigationButton(String imageName,\r\n        String actionCommand,\r\n        String toolTipText,\r\n        String altText) {\r\n        //Look for the image.\r\n        String imgLocation = \"images/\"\r\n                + imageName\r\n                + \".png\";\r\n        URL imageURL = DrawingToolBar.class.getResource(imgLocation);\r\n\r\n        //Create and initialize the button.\r\n        JButton button = new JButton();\r\n        button.setActionCommand(actionCommand);\r\n        button.setToolTipText(toolTipText);\r\n        button.addActionListener(actionListener);\r\n\r\n        if (imageURL != null) {                      //image found\r\n            button.setIcon(new ImageIcon(imageURL, altText));\r\n        } else {                                     //no image found\r\n            button.setText(altText);\r\n            System.err.println(\"Resource not found: \"\r\n                    + imgLocation);\r\n        }\r\n        return button;\r\n    }\r\n\r\n}\r\n","size_bytes":3581},"prop/src/main/java/com/gabriel/property/validator/doubleNumber/DoubleValidatorFactory.java":{"content":"package com.gabriel.property.validator.doubleNumber;\r\n\r\nimport com.gabriel.property.validator.CompoundValidator;\r\nimport com.gabriel.property.validator.Validator;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class DoubleValidatorFactory {\r\n\r\n    private DoubleValidator doubleValidator;\r\n    private DoubleRangeValidator rangeValidator;\r\n    private DoubleZeroPolicyValidator zeroPolicyValidator;\r\n\r\n    public DoubleValidatorFactory() {\r\n        this.doubleValidator = new DoubleValidator();\r\n        this.rangeValidator = null;\r\n        this.zeroPolicyValidator = null;\r\n    }\r\n\r\n    public DoubleValidatorFactory setRange(double lowerBound, double upperBound) {\r\n        rangeValidator = new DoubleRangeValidator(lowerBound, upperBound);\r\n\r\n        return this;\r\n    }\r\n\r\n    public DoubleValidatorFactory setRange(\r\n            double lowerBound,\r\n            double upperBound,\r\n            boolean includeLowerBound,\r\n            boolean includeUpperBound\r\n    ) {\r\n        rangeValidator = new DoubleRangeValidator(\r\n                lowerBound,\r\n                upperBound,\r\n                includeLowerBound,\r\n                includeUpperBound\r\n        );\r\n\r\n        return this;\r\n    }\r\n\r\n    public DoubleValidatorFactory includeBounds(boolean includeLowerBound, boolean includeUpperBound) {\r\n        if (rangeValidator == null) {\r\n            rangeValidator = new DoubleRangeValidator();\r\n        }\r\n        rangeValidator.setIncludeBounds(includeLowerBound, includeUpperBound);\r\n\r\n        return this;\r\n    }\r\n\r\n    public DoubleValidatorFactory setLowerBound(double lowerBound) {\r\n        if (rangeValidator == null) {\r\n            rangeValidator = new DoubleRangeValidator();\r\n        }\r\n        rangeValidator.setLowerBound(lowerBound);\r\n\r\n        return this;\r\n    }\r\n\r\n    public DoubleValidatorFactory setUpperBound(double upperBound) {\r\n        if (rangeValidator == null) {\r\n            rangeValidator = new DoubleRangeValidator();\r\n        }\r\n        rangeValidator.setUpperBound(upperBound);\r\n\r\n        return this;\r\n    }\r\n\r\n    public DoubleValidatorFactory allowZero(boolean allowZero) {\r\n        zeroPolicyValidator = new DoubleZeroPolicyValidator(allowZero);\r\n\r\n        return this;\r\n    }\r\n\r\n    public Validator build() {\r\n        ArrayList<Validator> validators = new ArrayList<>();\r\n        validators.add(doubleValidator);\r\n\r\n        if (rangeValidator != null) {\r\n            validators.add(rangeValidator);\r\n        }\r\n        if (zeroPolicyValidator != null) {\r\n            validators.add(zeroPolicyValidator);\r\n        }\r\n\r\n        Validator[] _validators = new Validator[validators.size()];\r\n        validators.toArray(_validators);\r\n\r\n        return new CompoundValidator(_validators);\r\n    }\r\n}\r\n","size_bytes":2731},"prop/src/main/java/com/gabriel/property/cell/AbstractCellComponent.java":{"content":"package com.gabriel.property.cell;\r\n\r\nimport com.gabriel.property.PropertyOptions;\r\nimport com.gabriel.property.event.EventDispatcher;\r\n\r\nimport javax.swing.AbstractCellEditor;\r\nimport javax.swing.JTable;\r\nimport javax.swing.table.TableCellEditor;\r\nimport javax.swing.table.TableCellRenderer;\r\nimport java.awt.Component;\r\n\r\npublic abstract class AbstractCellComponent extends AbstractCellEditor implements TableCellEditor, TableCellRenderer {\r\n\r\n    protected PropertyOptions options;\r\n    protected EventDispatcher eventDispatcher;\r\n\r\n    @Override\r\n    public abstract Component getTableCellEditorComponent(JTable jTable, Object o, boolean b, int i, int i1);\r\n\r\n    @Override\r\n    public abstract Object getCellEditorValue();\r\n\r\n        @Override\r\n    public abstract Component getTableCellRendererComponent(JTable jTable, Object o, boolean b, boolean b1, int i, int i1);\r\n\r\n    public void init(PropertyOptions options, EventDispatcher eventDispatcher) {\r\n        this.options = options;\r\n        this.eventDispatcher = eventDispatcher;\r\n    }\r\n}\r\n","size_bytes":1051},"fontchooser/src/main/java/com/gabriel/fontchooser/panes/SearchListener.java":{"content":"package com.gabriel.fontchooser.panes;\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport com.gabriel.fontchooser.model.FamilyListModel;\r\n\r\nimport javax.swing.JTextField;\r\nimport java.awt.event.KeyAdapter;\r\nimport java.awt.event.KeyEvent;\r\nimport java.util.Locale;\r\n\r\n@RequiredArgsConstructor\r\npublic class SearchListener extends KeyAdapter {\r\n\r\n    private final FamilyListModel familyListModel;\r\n\r\n    private final FamilyPane familyPane;\r\n\r\n    @Override\r\n    public void keyTyped(KeyEvent e) {\r\n        JTextField searchField = (JTextField) e.getSource();\r\n        String searchString = searchField.getText().toLowerCase(Locale.ENGLISH);\r\n        familyListModel.findFirst(searchString).ifPresent(familyPane::setSelectedFamily);\r\n    }\r\n\r\n}\r\n","size_bytes":745},"draw/src/main/java/com/gabriel/draw/service/DrawingAppService.java":{"content":"package com.gabriel.draw.service;\r\n\r\nimport com.gabriel.draw.view.DrawingView;\r\nimport com.gabriel.drawfx.DrawMode;\r\nimport com.gabriel.drawfx.SelectionMode;\r\nimport com.gabriel.drawfx.ShapeMode;\r\nimport com.gabriel.drawfx.model.Drawing;\r\nimport com.gabriel.drawfx.model.Shape;\r\nimport com.gabriel.drawfx.service.*;\r\nimport lombok.Setter;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.awt.*;\r\n\r\npublic class DrawingAppService implements AppService {\r\n\r\n    final private Drawing drawing;;\r\n\r\n    @Setter\r\n    DrawingView drawingView;\r\n\r\n    ImageFileService imageFileService;\r\n    MoverService moverService;\r\n    ScalerService scalerService;\r\n    SearchService searchService;\r\n    XmlDocumentService xmlDocumentService;\r\n\r\n    DocumentService documentService;\r\n    public DrawingAppService(){\r\n        drawing = new Drawing();\r\n        moverService = new MoverService();\r\n        scalerService = new ScalerService();\r\n        searchService = new SearchService();\r\n        xmlDocumentService = new XmlDocumentService(drawing);\r\n        imageFileService = new ImageFileService();\r\n        drawing.setDrawMode(DrawMode.Idle);\r\n        drawing.setShapeMode(ShapeMode.Ellipse);\r\n    }\r\n\r\n    @Override\r\n    public void undo() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void redo() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public ShapeMode getShapeMode() {\r\n        return drawing.getShapeMode();\r\n    }\r\n\r\n    @Override\r\n    public void setShapeMode(ShapeMode shapeMode) {\r\n        drawing.setShapeMode(shapeMode);\r\n    }\r\n\r\n    @Override\r\n    public DrawMode getDrawMode() {\r\n        return drawing.getDrawMode();\r\n    }\r\n\r\n    @Override\r\n    public void setDrawMode(DrawMode drawMode) {\r\n        this.drawing.setDrawMode(drawMode);\r\n    }\r\n\r\n    @Override\r\n    public Color getColor() {\r\n        return drawing.getColor();\r\n    }\r\n\r\n    @Override\r\n    public void setColor(Color color) {\r\n        List<Shape> shapes = drawing.getShapes();\r\n        boolean isEmpty = true;\r\n        for (Shape shape : shapes) {\r\n            if (shape.isSelected()) {\r\n                shape.setColor(color);\r\n                shape.getRendererService().render(drawingView.getGraphics(), shape, false);\r\n                isEmpty = false;\r\n            }\r\n        }\r\n        if(isEmpty){\r\n            drawing.setColor(color);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Color getFill(){\r\n        return drawing.getFill();\r\n    }\r\n\r\n    @Override\r\n    public void setFill(Color color) {\r\n        drawing.setFill(color);\r\n    }\r\n\r\n    @Override\r\n    public void move(Shape shape, Point start, Point newLoc) {\r\n        moverService.move(shape, start, newLoc);\r\n    }\r\n\r\n    @Override\r\n    public void move(Point start, Point newLoc) {\r\n        moverService.move(drawing, start, newLoc);\r\n    }\r\n\r\n    @Override\r\n    public void scale(Point start, Point end) {\r\n        scalerService.scale(drawing, start, end);\r\n    }\r\n\r\n    @Override\r\n    public void scale(Shape shape, Point start, Point end) {\r\n        scalerService.scale(shape, start, end);\r\n    }\r\n\r\n    @Override\r\n    public void scale(Shape shape, Point end) {\r\n        scalerService.scale(shape, end);\r\n    }\r\n\r\n    @Override\r\n    public void create(Shape shape) {\r\n        this.drawing.getShapes().add(shape);\r\n        shape.setColor(drawing.getColor());\r\n        shape.setR(drawing.getSearchRadius());\r\n        shape.setFill(drawing.getFill());\r\n        shape.setThickness(drawing.getThickness());\r\n        shape.setId(this.drawing.getShapes().size());\r\n        shape.setFont(drawing.getFont());\r\n    }\r\n\r\n    @Override\r\n    public void delete(Shape shape) {\r\n        drawing.getShapes().remove(shape);\r\n    }\r\n\r\n    @Override\r\n    public void close() {\r\n        System.exit(0);\r\n    }\r\n\r\n    @Override\r\n    public Drawing getDrawing() {\r\n        return drawing;\r\n    }\r\n\r\n    @Override\r\n    public void setDrawing(Drawing drawing) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public int getSearchRadius() {\r\n        return drawing.getSearchRadius();\r\n    }\r\n\r\n    @Override\r\n    public void setSearchRadius(int radius) {\r\n        drawing.setSearchRadius(radius);\r\n    }\r\n\r\n    @Override\r\n    public void search(Point p) {\r\n        searchService.search(this,p);\r\n    }\r\n\r\n    @Override\r\n    public void search(Point p, boolean single) {\r\n        searchService.search(this,p, single);\r\n    }\r\n\r\n    @Override\r\n    public void open(String filename) {\r\n        xmlDocumentService.open();\r\n    }\r\n\r\n    @Override\r\n    public void save() {\r\n        xmlDocumentService.save();\r\n    }\r\n\r\n    @Override\r\n    public String getFileName() {\r\n        return drawing.getFilename();\r\n    }\r\n\r\n    @Override\r\n    public void select(Shape selectedShape) {\r\n        List<Shape> selectedShapes = drawing.getShapes();\r\n        for(Shape shape : selectedShapes){\r\n            if(shape.equals(selectedShape)){\r\n                shape.setSelected(true);\r\n            }\r\n            else {\r\n                shape.setSelected(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void unSelect(Shape selectedShape) {\r\n        List<Shape> shapes = drawing.getShapes();\r\n        for (Shape shape : shapes){\r\n            if(shape.getId() == selectedShape.getId()) {\r\n                shape.setSelected(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Shape getSelectedShape() {\r\n        return drawing.getSelectedShape();\r\n    }\r\n    @Override\r\n    public List<Shape> getSelectedShapes() {\r\n        List<Shape> shapes = drawing.getShapes();\r\n        List<Shape> selectedShapes = new ArrayList<>();\r\n        for (Shape shape : shapes){\r\n            if(shape.isSelected()){\r\n                selectedShapes.add(shape);\r\n            }\r\n        }\r\n        return selectedShapes;\r\n    }\r\n    @Override\r\n    public void clearSelections(){\r\n        List<Shape> shapes = drawing.getShapes();\r\n        for (Shape shape : shapes){\r\n            shape.setSelected(false);\r\n            shape.setSelectionMode(SelectionMode.None);\r\n        }\r\n        drawing.setSelectedShape(null);\r\n        drawingView.repaint();\r\n    }\r\n\r\n    @Override\r\n    public void setThickness(int thickness) {\r\n        Shape seleectedShape = drawing.getSelectedShape();\r\n        if(seleectedShape == null ){\r\n            drawing.setThickness(thickness);\r\n        }\r\n        else {\r\n            seleectedShape.setThickness(thickness);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getThickness() {\r\n        Shape seleectedShape = drawing.getSelectedShape();\r\n        if(seleectedShape == null ){\r\n           return drawing.getThickness();\r\n        }\r\n        else {\r\n            return seleectedShape.getThickness();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void setXLocation(int x) {\r\n        Shape seleectedShape = drawing.getSelectedShape();\r\n        if(seleectedShape == null ){\r\n            drawing.getLocation().x = x;\r\n        }\r\n        else {\r\n            seleectedShape.getLocation().x = x;\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public int getXLocation() {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape == null ){\r\n            return drawing.getLocation().x;\r\n        }\r\n        else {\r\n            return selectedShape.getLocation().x;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void setYLocation(int yLocation) {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape == null ){\r\n            drawing.getLocation().y = yLocation;\r\n        }\r\n        else {\r\n            selectedShape.getLocation().y = yLocation;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getYLocation() {\r\n        Shape seleectedShape = drawing.getSelectedShape();\r\n        if(seleectedShape == null ){\r\n            return drawing.getLocation().y;\r\n        }\r\n        else {\r\n            return seleectedShape.getLocation().y;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void setWidth(int width) {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape == null ){\r\n            drawing.setWidth(width);\r\n        }\r\n        else {\r\n            selectedShape.setWidth(width);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getWidth() {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape == null ){\r\n            return drawing.getWidth();\r\n        }\r\n        else {\r\n            return selectedShape.getWidth();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void setHeight(int height) {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape == null ){\r\n            drawing.setHeight(height);\r\n        }\r\n        else {\r\n            selectedShape.setHeight(height);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getHeight() {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape == null ){\r\n            return drawing.getHeight();\r\n        }\r\n        else {\r\n            return selectedShape.getHeight();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void setImageFilename(String imageFilename) {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape == null ){\r\n            drawing.setImageFilename(imageFilename);\r\n        }\r\n        else {\r\n            selectedShape.setImageFilename(imageFilename);;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public String getImageFilename() {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape == null ){\r\n            return drawing.getImageFilename();\r\n        }\r\n        else {\r\n            return selectedShape.getImageFilename();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void setText(String text) {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape == null ){\r\n            drawing.setText(text);\r\n        }\r\n        else {\r\n            selectedShape.setText(text);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void setFontSize(int fontSize) {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape == null ){\r\n            Font font = new Font(drawing.getFont().getFamily(), drawing.getFont().getStyle(), fontSize);\r\n            drawing.setFont(font);\r\n        }\r\n        else {\r\n            Font font = new Font(selectedShape.getFont().getFamily(), selectedShape.getFont().getStyle(), fontSize);\r\n            selectedShape.setFont(font);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Color getStartColor() {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape==null) {\r\n            return drawing.getStartColor();\r\n        }\r\n        else {\r\n            return selectedShape.getStartColor();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void setStartColor(Color color) {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(drawing.getSelectedShape()==null) {\r\n            drawing.setStartColor(color);\r\n        }\r\n        else {\r\n            getSelectedShape().setStartColor(color);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Color getEndColor() {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape==null) {\r\n            return drawing.getEndColor();\r\n        }\r\n        else {\r\n            return selectedShape.getEndColor();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void setEndColor(Color color) {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape==null) {\r\n            drawing.setEndColor(color);\r\n        }\r\n        else {\r\n            selectedShape.setEndColor(color);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean isGradient() {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape==null) {\r\n            return drawing.isGradient();\r\n        }\r\n        else {\r\n            return selectedShape.isGradient();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void setIsGradient(boolean yes) {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape==null) {\r\n            drawing.setGradient(yes);\r\n        }\r\n        else {\r\n            selectedShape.setGradient(yes);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean isVisible() {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if (selectedShape == null) {\r\n            return drawing.isVisible();\r\n        } else {\r\n            return selectedShape.isVisible();\r\n        }\r\n    }\r\n    @Override\r\n    public void setIsVisible(boolean yes) {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if (selectedShape == null) {\r\n            drawing.setVisible(yes);\r\n        } else {\r\n            selectedShape.setVisible(yes);\r\n        }\r\n    }\r\n\r\n    public void delete() {\r\n        List<Shape> shapes = drawing.getShapes();\r\n        for(Shape shape : shapes) {\r\n            if(shape.isSelected()) {\r\n                delete(shape);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void setStartX(int startx) {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape==null) {\r\n            drawing.getStart().x = startx;\r\n        }\r\n        else {\r\n            selectedShape.getStart().x = startx;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getStartX() {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape==null) {\r\n            return drawing.getStart().x;\r\n        }\r\n        else {\r\n            return selectedShape.getStart().x;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void setStarty(int starty) {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape==null) {\r\n            drawing.getStart().y = starty;\r\n        }\r\n        else {\r\n            selectedShape.getStart().y = starty;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getStarty() {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape==null) {\r\n            return drawing.getStart().x;\r\n        }\r\n        else {\r\n            return selectedShape.getStart().x;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void setEndx(int endx) {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape==null) {\r\n            drawing.getEnd().x = endx;\r\n        }\r\n        else {\r\n            selectedShape.getEnd().x = endx;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getEndx() {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape==null) {\r\n            return drawing.getEnd().x;\r\n        }\r\n        else {\r\n            return selectedShape.getEnd().x;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void setEndy(int endy) {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape==null) {\r\n            drawing.getEnd().y = endy;\r\n        }\r\n        else {\r\n            selectedShape.getEnd().y = endy;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getEndy() {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape==null) {\r\n            return drawing.getEnd().y;\r\n        }\r\n        else {\r\n            return selectedShape.getEnd().y;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public String getText() {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape==null) {\r\n            return drawing.getText();\r\n        }\r\n        else {\r\n            return selectedShape.getText();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Font getFont() {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape==null) {\r\n            return drawing.getFont();\r\n        }\r\n        else {\r\n            return selectedShape.getFont();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void setFont(Font font) {\r\n        Shape selectedShape = drawing.getSelectedShape();\r\n        if(selectedShape==null) {\r\n            drawing.setFont(font);\r\n        }\r\n        else {\r\n            selectedShape.setFont(font);\r\n        }\r\n    }\r\n}\r\n","size_bytes":15899},"prop/src/main/java/com/gabriel/property/validator/longNumber/LongParityValidator.java":{"content":"package com.gabriel.property.validator.longNumber;\r\n\r\nimport com.gabriel.property.validator.Validator;\r\n\r\npublic class LongParityValidator implements Validator {\r\n\r\n    protected boolean even;\r\n\r\n    public LongParityValidator() {\r\n        this(true);\r\n    }\r\n\r\n    public void setEven(boolean even) {\r\n        this.even = even;\r\n    }\r\n\r\n    public LongParityValidator(boolean even) {\r\n        this.even = even;\r\n    }\r\n\r\n    @Override\r\n    public boolean validate(Object object) {\r\n        long value = Long.parseLong((String) object);\r\n\r\n        if (even) {\r\n            return value % 2 == 0;\r\n        } else {\r\n            return value % 2 != 0;\r\n        }\r\n    }\r\n}\r\n","size_bytes":673},"prop/src/main/java/com/gabriel/property/property/selection/Item.java":{"content":"package com.gabriel.property.property.selection;\r\n\r\npublic class Item<T> {\r\n\r\n    protected T value;\r\n    protected String description;\r\n\r\n    public Item(T value, String description) {\r\n        this.value = value;\r\n        this.description = description;\r\n    }\r\n\r\n    public T getValue() {\r\n        return value;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return description;\r\n    }\r\n}\r\n","size_bytes":487},"draw/src/main/java/com/gabriel/draw/view/DrawingFrame.java":{"content":"package com.gabriel.draw.view;\r\n\r\nimport com.gabriel.draw.component.PropertySheet;\r\nimport com.gabriel.draw.controller.ActionController;\r\nimport com.gabriel.draw.controller.DrawingController;\r\nimport com.gabriel.draw.controller.DrawingWindowController;\r\nimport com.gabriel.draw.service.DrawingAppService;\r\nimport com.gabriel.draw.service.DrawingCommandAppService;\r\nimport com.gabriel.drawfx.ShapeMode;\r\nimport com.gabriel.drawfx.model.Drawing;\r\nimport com.gabriel.drawfx.model.Shape;\r\nimport com.gabriel.drawfx.service.AppService;\r\nimport com.gabriel.property.PropertyOptions;\r\nimport com.gabriel.property.event.PropertyEventAdapter;\r\nimport com.gabriel.property.property.Property;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionListener;\r\n\r\npublic class DrawingFrame extends JFrame {\r\n\r\n    Drawing drawing;\r\n    DrawingAppService drawingAppService;\r\n    AppService appService;\r\n    DrawingFrame drawingFrame;\r\n    Container pane;\r\n    private PropertySheet propertySheet;\r\n    ActionController actionListener;\r\n    DrawingMenuBar drawingMenuBar;\r\n    DrawingToolBar drawingToolBar;\r\n    DrawingView drawingView;\r\n    DrawingController drawingController;\r\n    JScrollPane jScrollPane;\r\n    DrawingStatusPanel drawingStatusPanel;\r\n    DrawingWindowController drawingWindowController;\r\n    public DrawingFrame() {\r\n\r\n        drawing = new Drawing();\r\n        drawingAppService = new DrawingAppService();\r\n        appService = DrawingCommandAppService.getInstance(drawingAppService);\r\n\r\n        pane = getContentPane();\r\n        setLayout(new BorderLayout());\r\n\r\n        actionListener = new ActionController(appService);\r\n        actionListener.setFrame(this);\r\n        drawingMenuBar = new DrawingMenuBar( actionListener);\r\n\r\n        setJMenuBar(drawingMenuBar);\r\n\r\n        drawingMenuBar.setVisible(true);\r\n\r\n\r\n        drawingToolBar = new DrawingToolBar(actionListener);\r\n        drawingToolBar.setVisible(true);\r\n\r\n        drawingView = new DrawingView(appService);\r\n        actionListener.setComponent(drawingView);\r\n\r\n\r\n        drawingController = new DrawingController(appService, drawingView);\r\n        drawingController.setDrawingView(drawingView);\r\n\r\n        drawingView.addMouseMotionListener(drawingController);\r\n        drawingView.addMouseListener(drawingController);\r\n        drawingView.setPreferredSize(new Dimension(4095, 8192));\r\n\r\n        jScrollPane = new JScrollPane(drawingView);\r\n        jScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\r\n        jScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);\r\n\r\n        drawingStatusPanel = new DrawingStatusPanel();\r\n        drawingController.setDrawingStatusPanel(drawingStatusPanel);\r\n\r\n        pane.add(drawingToolBar, BorderLayout.PAGE_START);\r\n        pane.add(jScrollPane, BorderLayout.CENTER );\r\n        pane.add(drawingStatusPanel, BorderLayout.PAGE_END);\r\n\r\n        drawingAppService.setDrawingView(drawingView);\r\n\r\n        setVisible(true);\r\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        setSize(500,500);\r\n\r\n        drawingWindowController = new DrawingWindowController(appService);\r\n        this.addWindowListener(drawingWindowController);\r\n        this.addWindowFocusListener(drawingWindowController);\r\n        this.addWindowStateListener(drawingWindowController);\r\n        buildGUI(pane);\r\n        drawingController.setPropertySheet(propertySheet);\r\n    }\r\n\r\n    public void buildGUI(Container pane){\r\n        buildPropertyTable(pane);\r\n        JScrollPane scrollPane = new JScrollPane(propertySheet);\r\n        pane.add(scrollPane, BorderLayout.LINE_END);\r\n        pack();\r\n    }\r\n\r\n\r\n    void buildPropertyTable(Container pane) {\r\n        String[] headers = new String[]{\"Property\", \"value\"};\r\n        Color backgroundColor = new Color(255, 255, 255);\r\n        Color invalidColor = new Color(255, 179, 176);\r\n        int rowHeight = 30;\r\n        PropertyOptions options = new PropertyOptions(headers, backgroundColor, invalidColor, rowHeight);\r\n\r\n        propertySheet = new PropertySheet(new PropertyOptions.Builder().build());\r\n        propertySheet.addEventListener(new EventListener());\r\n        propertySheet.populateTable(appService);\r\n\r\n        repaint();\r\n    }\r\n\r\n    class EventListener extends PropertyEventAdapter {\r\n        @Override\r\n        public void onPropertyUpdated(Property property) {\r\n            Shape shape  = appService.getSelectedShape();\r\n            if(property.getName().equals(\"Current Shape\")){\r\n                if(shape ==null) {\r\n                    appService.setShapeMode((ShapeMode) property.getValue());\r\n                }\r\n            }\r\n            if(property.getName().equals(\"Fore color\")){\r\n                if(shape ==null) {\r\n                    appService.setColor((Color) property.getValue());\r\n                } else {\r\n                    shape.setColor((Color) property.getValue());\r\n                }\r\n            }\r\n            if(property.getName().equals(\"Fill color\")){\r\n                if(shape ==null) {\r\n                    appService.setFill((Color)property.getValue());\r\n                } else {\r\n                    shape.setFill((Color) property.getValue());\r\n                }\r\n            }\r\n            if(property.getName().equals(\"Line Thickness\")){\r\n                if(shape ==null) {\r\n                    appService.setThickness((int)property.getValue());\r\n                } else {\r\n                    shape.setThickness((int) property.getValue());\r\n                }\r\n            }\r\n            if(property.getName().equals(\"X Location\")){\r\n                if(shape ==null) {\r\n                    ;\r\n                } else {\r\n                    Point p = shape.getLocation();\r\n                    p.x = (int) property.getValue();\r\n                    shape.setLocation(p);\r\n                }\r\n            }\r\n            if(property.getName().equals(\"Y Location\")){\r\n                if(shape ==null) {\r\n                    ;\r\n                } else {\r\n                    Point p = shape.getLocation();\r\n                    p.y = (int) property.getValue();\r\n                    shape.setLocation(p);\r\n                }\r\n            }\r\n            if(property.getName().equals(\"Width\")){\r\n                if(shape ==null) {\r\n                    ;\r\n                } else {\r\n                    int width = shape.getWidth();\r\n                    shape.setWidth(width);\r\n                }\r\n            }\r\n            if(property.getName().equals(\"Height\")){\r\n                if(shape ==null) {\r\n                    ;\r\n                } else {\r\n                    int height = (int) property.getValue();\r\n                    shape.setHeight(height);\r\n                }\r\n            }\r\n\r\n            drawingView.repaint();\r\n        }\r\n    }\r\n}\r\n\r\n","size_bytes":6802},"prop/src/main/java/com/gabriel/property/validator/CompoundValidator.java":{"content":"package com.gabriel.property.validator;\r\n\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * Enabled the use for multiple validators on a single object\r\n */\r\npublic class CompoundValidator implements Validator {\r\n\r\n    protected Validator[] validators;\r\n\r\n    public CompoundValidator(Validator... validators) {\r\n        this.validators = validators;\r\n    }\r\n\r\n    @Override\r\n    public boolean validate(Object object) {\r\n        return Arrays.stream(validators).allMatch(v -> v.validate(object));\r\n    }\r\n}\r\n","size_bytes":495},"draw/src/main/java/com/gabriel/draw/view/GPanel.java":{"content":"package com.gabriel.draw.view;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\n\r\npublic class GPanel extends JPanel {\r\n    private BufferedImage image;\r\n\r\n    public GPanel(String imgFile){\r\n            try (InputStream is = getClass().getResourceAsStream(\"/\" + imgFile + \".png\")) {\r\n                if (is == null) {\r\n                    throw new IOException(\"Image not found: \" + imgFile);\r\n                }\r\n                image = ImageIO.read(is);\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n    }\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n\r\n        super.paintComponent(g);\r\n        g.drawImage(image, 0, 0,image.getWidth(),image.getHeight(),  this);\r\n    }\r\n}\r\n","size_bytes":889},"drawfx/src/main/java/com/gabriel/drawfx/renderer/ShapeRenderer.java":{"content":"package com.gabriel.drawfx.renderer;\r\n\r\nimport com.gabriel.drawfx.model.Shape;\r\n\r\nimport java.awt.*;\r\n\r\npublic class ShapeRenderer implements Renderer {\r\n\r\n    @Override\r\n    public void render(Graphics g,  Shape shape, boolean xor) {\r\n        if(shape.isSelected()){\r\n            Point loc = shape.getLocation();\r\n            int width = shape.getWidth();\r\n            int height = shape.getHeight();\r\n            int r = 5;\r\n\r\n            if(xor){\r\n                 g.setXORMode(shape.getColor());\r\n            }\r\n            else {\r\n                g.setColor(shape.getColor());\r\n            }\r\n\r\n            g.drawRect(loc.x-r,loc.y-r, 2*r,2*r);\r\n            g.drawRect(loc.x-r,loc.y+height-r, 2*r, 2*r);\r\n            g.drawRect(loc.x + width -r,loc.y -r, 2*r, 2*r);\r\n            g.drawRect(loc.x + width -r,loc.y+height-r, 2*r, 2*r);\r\n\r\n            g.drawRect(loc.x + width/2 -r,loc.y-r, 2*r, 2*r);\r\n            g.drawRect(loc.x -r,loc.y+height/2-r, 2*r, 2*r);\r\n            g.drawRect(loc.x + width -r,loc.y+height/2-r, 2*r, 2*r);\r\n            g.drawRect(loc.x + width/2 -r,loc.y+height-r, 2*r, 2*r);\r\n            g.drawRect(loc.x + width -r,loc.y+height/2-r, 2*r, 2*r);\r\n        }\r\n    }\r\n}\r\n","size_bytes":1198},"prop/src/main/java/com/gabriel/property/validator/doubleNumber/DoubleValidator.java":{"content":"package com.gabriel.property.validator.doubleNumber;\r\n\r\nimport com.gabriel.property.validator.Validator;\r\n\r\n/**\r\n * Default implementation to validate double objects\r\n */\r\npublic class DoubleValidator implements Validator {\r\n\r\n    @Override\r\n    public boolean validate(Object object) {\r\n        return isDouble(object);\r\n    }\r\n\r\n    protected boolean isDouble(Object object) {\r\n        try {\r\n            Double.parseDouble((String) object);\r\n        } catch (NumberFormatException e) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","size_bytes":562},"prop/src/main/java/com/gabriel/property/cell/SelectionCellComponent.java":{"content":"package com.gabriel.property.cell;\r\n\r\nimport com.gabriel.property.property.selection.Item;\r\nimport com.gabriel.property.property.selection.SelectionProperty;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ItemEvent;\r\n\r\npublic class SelectionCellComponent extends AbstractCellComponent {\r\n\r\n    private SelectionProperty property;\r\n    private JComboBox<Item> comboBox;\r\n\r\n    public SelectionCellComponent(SelectionProperty property) {\r\n        this.property = property;\r\n        this.comboBox = new JComboBox<>();\r\n\r\n        property.getItems().forEach(e -> comboBox.addItem((Item) e));\r\n        comboBox.addItemListener(e -> {\r\n            if (e.getStateChange() == ItemEvent.SELECTED) {\r\n                if (comboBox.getSelectedItem() == null) {\r\n                    return;\r\n                }\r\n\r\n                property.setValue(((Item) comboBox.getSelectedItem()).getValue());\r\n                eventDispatcher.dispatchUpdateEvent(property);\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public Component getTableCellEditorComponent(JTable jTable, Object o, boolean b, int i, int i1) {\r\n        return comboBox;\r\n    }\r\n\r\n    @Override\r\n    public Object getCellEditorValue() {\r\n        return comboBox.getSelectedItem();\r\n    }\r\n\r\n    public void setCellEditorValue(Object object) {\r\n        comboBox.setSelectedItem(object);\r\n    }\r\n\r\n    @Override\r\n    public Component getTableCellRendererComponent(JTable jTable, Object o, boolean b, boolean b1, int i, int i1) {\r\n        JLabel label = new JLabel();\r\n        if (comboBox.getSelectedItem() != null) {\r\n            label.setText(comboBox.getSelectedItem().toString());\r\n        }\r\n\r\n        return label;\r\n    }\r\n}\r\n","size_bytes":1708},"drawfx/src/main/java/com/gabriel/drawfx/model/Shape.java":{"content":"package com.gabriel.drawfx.model;\r\n\r\nimport com.gabriel.drawfx.SelectionMode;\r\nimport com.gabriel.drawfx.renderer.Renderer;\r\nimport lombok.Data;\r\n\r\nimport java.awt.*;\r\n\r\n@Data\r\npublic abstract class Shape {\r\n    boolean selected = false;\r\n    boolean visible = true;\r\n    private SelectionMode selectionMode = SelectionMode.None;\r\n    private int r = 2;\r\n    private int id = 0;\r\n    private Point location;\r\n    private int width = 0;\r\n    private int height = 0;\r\n    private Color color = Color.RED;\r\n    private Color fill;\r\n    private int thickness;\r\n    String text;\r\n    Font font;\r\n    String imageFilename;\r\n\r\n    private Color startColor = Color.WHITE;\r\n    private Color endColor = Color.RED;\r\n    boolean isGradient = false;\r\n    Point start;\r\n    Point end;\r\n\r\n    private Renderer rendererService;\r\n\r\n    public Shape(){\r\n\r\n    }\r\n    public Shape(Point location){\r\n        this.setLocation(location);\r\n        this.start = new Point(0,0);\r\n        this.end = new Point(100,0);\r\n    }\r\n    public Shape(Point location, Point endpoint){\r\n        width = endpoint.x - location.x;\r\n        height = endpoint.y - location.y;\r\n        if(width<0){\r\n            width = -width;\r\n            endpoint.x -= width;\r\n        }\r\n        if(height < 0){\r\n            height = -height;\r\n            endpoint.y -= height;\r\n        }\r\n        this.setLocation(location);\r\n        this.start = new Point(0,0);\r\n        this.end = new Point(100,0);\r\n  }\r\n    public Shape(Point location, int width, int height){\r\n        this.setLocation(location);\r\n        this.width = width;\r\n        this.height = height;\r\n        this.start = new Point(0,0);\r\n        this.end = new Point(100,0);\r\n    }\r\n\r\n    public boolean equals (Shape shape){\r\n        return (this.id == shape.id);\r\n    }\r\n}\r\n","size_bytes":1784},"prop/src/main/java/com/gabriel/property/util/Keys.java":{"content":"package com.gabriel.property.util;\r\n\r\nimport java.awt.event.KeyEvent;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * Keys on which a text field should not validate the input.\r\n */\r\npublic final class Keys {\r\n\r\n    private static ArrayList<Integer> invalidKeys = new ArrayList<>(Arrays.asList(\r\n            // Move keys\r\n            KeyEvent.VK_LEFT,\r\n            KeyEvent.VK_RIGHT,\r\n            KeyEvent.VK_UP,\r\n            KeyEvent.VK_DOWN,\r\n\r\n            // Other keys\r\n            KeyEvent.VK_SHIFT,\r\n            KeyEvent.VK_ALT,\r\n            KeyEvent.VK_CONTROL\r\n    ));\r\n\r\n    public static boolean ignoreKey(int key) {\r\n        return invalidKeys.contains(key);\r\n    }\r\n}\r\n","size_bytes":698},"fontchooser/src/main/java/com/gabriel/fontchooser/panes/StyleCellRenderer.java":{"content":"package com.gabriel.fontchooser.panes;\r\n\r\nimport java.awt.Component;\r\nimport java.awt.Font;\r\nimport java.util.regex.Pattern;\r\nimport javax.swing.JList;\r\n\r\npublic class StyleCellRenderer extends ToolTipCellRenderer {\r\n\r\n    private static final Pattern NON_LETTER_OR_DIGIT = Pattern.compile(\"^\\\\W+\");\r\n\r\n    @Override\r\n    public Component getListCellRendererComponent(\r\n        JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus\r\n    ) {\r\n        String style = null;\r\n        if (value instanceof Font) {\r\n            Font font = (Font) value;\r\n            if (font.getName().trim().equalsIgnoreCase(font.getFamily().trim())) {\r\n                style = \"Default\";\r\n            } else {\r\n                style = NON_LETTER_OR_DIGIT.matcher(font.getName().replaceFirst(font.getFamily(), \"\")).replaceFirst(\"\").trim();\r\n            }\r\n        }\r\n        return super.getListCellRendererComponent(list, style, index, isSelected, cellHasFocus);\r\n    }\r\n}\r\n","size_bytes":981},"drawfx/src/main/java/com/gabriel/drawfx/service/ScalerService.java":{"content":"package com.gabriel.drawfx.service;\r\n\r\nimport com.gabriel.drawfx.SelectionMode;\r\nimport com.gabriel.drawfx.model.Drawing;\r\nimport com.gabriel.drawfx.model.Shape;\r\nimport java.util.List;\r\nimport java.awt.*;\r\n\r\n\r\npublic final class  ScalerService {\r\n\r\n    public void scale(Drawing drawing, Point start, Point end) {\r\n        List<Shape > shapes = drawing.getShapes();\r\n        for (Shape shape : shapes){\r\n            scale(shape,start,end);\r\n        }\r\n    }\r\n\r\n    public void scale(Shape shape, Point newEnd){\r\n        int dx = newEnd.x-shape.getLocation().x;\r\n        int dy = newEnd.y - shape.getLocation().y;\r\n        shape.setWidth(dx);\r\n        shape.setHeight(dy);\r\n    }\r\n    public void scale(Shape shape, Point start, Point end){\r\n        int dx = end.x - start.x;\r\n        int dy = end.y - start.y;\r\n        int height = shape.getHeight();\r\n        int width = shape.getWidth();\r\n        if(shape.getSelectionMode() == SelectionMode.UpperLeft) {\r\n            shape.getLocation().x += dx;\r\n            shape.getLocation().y += dy;\r\n            shape.setWidth(width - dx);\r\n            shape.setHeight(height - dy);\r\n        } if(shape.getSelectionMode() == SelectionMode.LowerLeft) {\r\n            shape.getLocation().x += dx;\r\n            shape.setWidth(width -dx);\r\n            shape.setHeight(height + dy);\r\n        } else if(shape.getSelectionMode() == SelectionMode.UpperRight){\r\n            shape.getLocation().y += dy;\r\n            shape.setWidth(width + dx);\r\n            shape.setHeight(height - dy);\r\n        } if(shape.getSelectionMode() == SelectionMode.LowerRight){\r\n            shape.setWidth(width + dx);\r\n            shape.setHeight(height+ dy);\r\n        } else if(shape.getSelectionMode() == SelectionMode.MiddleRight){\r\n            shape.setWidth(width + dx);\r\n        } else if(shape.getSelectionMode() == SelectionMode.MiddleLeft){\r\n            shape.setWidth(width - dx);\r\n            shape.getLocation().x += dx;\r\n        } else if(shape.getSelectionMode() == SelectionMode.MiddleTop) {\r\n            shape.setHeight(height - dy);\r\n            shape.getLocation().y += dy;\r\n        } else if(shape.getSelectionMode() == SelectionMode.MiddleBottom){\r\n            shape.setHeight(height + dy);\r\n        }\r\n    }\r\n}\r\n","size_bytes":2245},"fontchooser/src/main/java/com/gabriel/fontchooser/model/DefaultFontSelectionModel.java":{"content":"package com.gabriel.fontchooser.model;\r\n\r\nimport java.awt.Font;\r\nimport java.util.Objects;\r\nimport javax.swing.event.ChangeEvent;\r\nimport javax.swing.event.ChangeListener;\r\nimport javax.swing.event.EventListenerList;\r\n\r\n\r\n/**\r\n * A generic implementation of {@code FontSelectionModel}.\r\n *\r\n * @author Christos Bohoris\r\n * @see Font\r\n */\r\npublic class DefaultFontSelectionModel implements FontSelectionModel {\r\n\r\n    private static final int DEFAULT_SIZE = 12;\r\n\r\n    /**\r\n     * A list of registered event listeners.\r\n     */\r\n    private final EventListenerList listenerList = new EventListenerList();\r\n\r\n    /**\r\n     * Only one {@code ChangeEvent} is needed per model instance\r\n     * since the event's only (read-only) state is the source property.\r\n     * The source of events generated here is always \"this\".\r\n     */\r\n    private transient ChangeEvent changeEvent;\r\n\r\n    private Font selectedFont = new Font(Font.SANS_SERIF, Font.PLAIN, DEFAULT_SIZE);\r\n\r\n    /**\r\n     * Creates a {@code DefaultFontSelectionModel} with the\r\n     * current font set to {@code font}, which should be\r\n     * non-{@code null}. Note that setting the font to\r\n     * {@code null} is undefined and may have unpredictable\r\n     * results.\r\n     *\r\n     * @param font the new {@code Font}\r\n     */\r\n    public DefaultFontSelectionModel(Font font) {\r\n        selectedFont = font;\r\n    }\r\n\r\n    /**\r\n     * Returns the selected {@code Font} which should be\r\n     * non-{@code null}.\r\n     *\r\n     * @return the selected {@code Font}\r\n     */\r\n    @Override\r\n    public Font getSelectedFont() {\r\n        return selectedFont;\r\n    }\r\n\r\n    @Override\r\n    public String getSelectedFontName() {\r\n        return selectedFont.getName();\r\n    }\r\n\r\n    @Override\r\n    public String getSelectedFontFamily() {\r\n        return selectedFont.getFamily();\r\n    }\r\n\r\n    @Override\r\n    public int getSelectedFontSize() {\r\n        return selectedFont.getSize();\r\n    }\r\n\r\n    /**\r\n     * Sets the selected font to {@code font}.\r\n     * Note that setting the font to {@code null}\r\n     * is undefined and may have unpredictable results.\r\n     * This method fires a state changed event if it sets the\r\n     * current font to a new non-{@code null} font;\r\n     * if the new font is the same as the current font,\r\n     * no event is fired.\r\n     *\r\n     * @param font the new {@code Font}\r\n     */\r\n    @Override\r\n    public void setSelectedFont(Font font) {\r\n        if (font != null && !selectedFont.equals(font)) {\r\n            selectedFont = font;\r\n            fireStateChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a {@code ChangeListener} to the model.\r\n     *\r\n     * @param listener the {@code ChangeListener} to be added\r\n     */\r\n    @Override\r\n    public void addChangeListener(ChangeListener listener) {\r\n        listenerList.add(ChangeListener.class, listener);\r\n    }\r\n\r\n    /**\r\n     * Removes a {@code ChangeListener} from the model.\r\n     *\r\n     * @param listener the {@code ChangeListener} to be removed\r\n     */\r\n    @Override\r\n    public void removeChangeListener(ChangeListener listener) {\r\n        listenerList.remove(ChangeListener.class, listener);\r\n    }\r\n\r\n    /**\r\n     * Returns an array of all the {@code ChangeListener}s added\r\n     * to this {@code DefaultFontSelectionModel} with\r\n     * {@code addChangeListener}.\r\n     *\r\n     * @return all of the {@code ChangeListener}s added, or an empty\r\n     * array if no listeners have been added\r\n     */\r\n    public ChangeListener[] getChangeListeners() {\r\n        return listenerList.getListeners(ChangeListener.class);\r\n    }\r\n\r\n    /**\r\n     * Runs each {@code ChangeListener}'s\r\n     * {@code stateChanged} method.\r\n     */\r\n    private void fireStateChanged() {\r\n        Object[] listeners = listenerList.getListenerList();\r\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\r\n            if (Objects.equals(listeners[i], ChangeListener.class)) {\r\n                if (changeEvent == null) {\r\n                    changeEvent = new ChangeEvent(this);\r\n                }\r\n                ((ChangeListener) listeners[i + 1]).stateChanged(changeEvent);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","size_bytes":4149},"draw/src/main/java/com/gabriel/draw/Main.java":{"content":"package com.gabriel.draw;\n\nimport com.gabriel.draw.view.Splash;\n\nimport javax.swing.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        JFrame splashFrame = new JFrame();\n        Splash splashPanel = new Splash();\n        splashFrame.add(splashPanel);\n        splashFrame.setExtendedState(splashFrame.getExtendedState() | JFrame.MAXIMIZED_BOTH);\n        splashFrame.setUndecorated(true);\n        splashFrame.setVisible(true);\n        splashFrame.repaint();\n    }\n}\n","size_bytes":490},"fontchooser/src/main/java/com/gabriel/fontchooser/FontFamily.java":{"content":"package com.gabriel.fontchooser;\r\n\r\nimport java.awt.Font;\r\nimport java.util.Collection;\r\nimport java.util.TreeSet;\r\nimport lombok.Getter;\r\nimport lombok.RequiredArgsConstructor;\r\n\r\n@RequiredArgsConstructor\r\n@Getter\r\npublic class FontFamily {\r\n\r\n    private final String name;\r\n\r\n    private final Collection<Font> styles = new TreeSet<>(new FontNameComparator());\r\n\r\n    public boolean add(Font font) {\r\n        return styles.add(font);\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n}\r\n","size_bytes":512},"prop/src/main/java/com/gabriel/property/event/EventDispatcher.java":{"content":"package com.gabriel.property.event;\r\n\r\nimport com.gabriel.property.property.Property;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class EventDispatcher {\r\n\r\n    private ArrayList<PropertyEventListener> listeners;\r\n\r\n    public EventDispatcher() {\r\n        this.listeners = new ArrayList<>();\r\n    }\r\n\r\n    public void addEventListener(PropertyEventListener eventListener) {\r\n        listeners.add(eventListener);\r\n    }\r\n\r\n    public void removeEventListener(PropertyEventListener eventListener) {\r\n        listeners.remove(eventListener);\r\n    }\r\n\r\n    public void dispatchUpdateEvent(Property property) {\r\n        listeners.forEach(l -> l.onPropertyUpdated(property));\r\n    }\r\n\r\n    public void dispatchPropertyAddedEvent(Property property) {\r\n        listeners.forEach(l -> l.onPropertyAdded(property));\r\n    }\r\n}\r\n","size_bytes":815},"draw/src/main/java/com/gabriel/draw/renderer/ImageRenderer.java":{"content":"package com.gabriel.draw.renderer;\r\n\r\nimport com.gabriel.draw.model.Image;\r\nimport com.gabriel.drawfx.model.Shape;\r\nimport com.gabriel.drawfx.renderer.ShapeRenderer;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\n\r\npublic class ImageRenderer extends ShapeRenderer {\r\n\r\n    @Override\r\n    public void render(Graphics g, Shape shape, boolean xor) {\r\n        if(!shape.isVisible()){\r\n            return;\r\n        }\r\n\r\n        Point start = shape.getLocation();\r\n        int x = start.x;\r\n        int y = start.y;\r\n        int width = shape.getWidth();\r\n        int height = shape.getHeight();\r\n\r\n        String imageFilename = ((Image) shape).getImageFilename();\r\n        String imgLocation = \"./images/\"\r\n                + \"google48\"\r\n                + \".png\";\r\n        File input = new File(imageFilename);\r\n        try {\r\n            java.awt.Image bImage = ImageIO.read(input);\r\n            Graphics2D g2 = (Graphics2D) g;\r\n            g2.setStroke(new BasicStroke(shape.getThickness()));\r\n            if(xor) {\r\n                g2.setXORMode(shape.getColor());\r\n                g2.drawRect(shape.getLocation().x, shape.getLocation().y, shape.getWidth(), shape.getHeight());\r\n            }\r\n            else {\r\n                BufferedImage img =  resizeImage((BufferedImage) bImage, width, height);\r\n                g2.drawImage(img, x, y, null);\r\n                g2.setColor(shape.getColor());\r\n                super.render(g, shape, xor);\r\n            }\r\n\r\n        }catch(Exception ex){\r\n            System.out.println(\"Error: \" + ex.getMessage());\r\n        }\r\n    }\r\n\r\n    public BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) throws IOException {\r\n        BufferedImage resizedImage = new BufferedImage(targetWidth, targetHeight, BufferedImage.TYPE_INT_RGB);\r\n        Graphics2D graphics2D = resizedImage.createGraphics();\r\n        graphics2D.drawImage(originalImage, 0, 0, targetWidth, targetHeight, null);\r\n        graphics2D.dispose();\r\n        return resizedImage;\r\n    }\r\n\r\n    public static BufferedImage rotate(BufferedImage image, double angle) {\r\n        double sin = Math.abs(Math.sin(angle)), cos = Math.abs(Math.cos(angle));\r\n        int w = image.getWidth(), h = image.getHeight();\r\n        int neww = (int)Math.floor(w*cos+h*sin), newh = (int) Math.floor(h * cos + w * sin);\r\n        GraphicsConfiguration gc = getDefaultConfiguration();\r\n        BufferedImage result = gc.createCompatibleImage(neww, newh, Transparency.TRANSLUCENT);\r\n        Graphics2D g = result.createGraphics();\r\n        g.translate((neww - w) / 2, (newh - h) / 2);\r\n        g.rotate(angle, w / 2, h / 2);\r\n        g.drawRenderedImage(image, null);\r\n        g.dispose();\r\n        return result;\r\n    }\r\n\r\n\r\n    private static GraphicsConfiguration getDefaultConfiguration() {\r\n        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\r\n        GraphicsDevice gd = ge.getDefaultScreenDevice();\r\n        return gd.getDefaultConfiguration();\r\n    }\r\n}\r\n","size_bytes":3106},"batik/src/main/java/com/gabriel/batik/util/BufferedImageTranscoder.java":{"content":"package com.gabriel.batik.util;\r\n\r\nimport org.apache.batik.transcoder.TranscoderException;\r\nimport org.apache.batik.transcoder.TranscoderOutput;\r\nimport org.apache.batik.transcoder.image.ImageTranscoder;\r\nimport java.awt.image.BufferedImage;\r\n\r\npublic class BufferedImageTranscoder extends ImageTranscoder {\r\n\r\n    private BufferedImage img = null;\r\n\r\n    BufferedImageTranscoder(double width, double height) {\r\n        this.width = (float) width;\r\n        this.height = (float) height;\r\n    }\r\n\r\n    BufferedImageTranscoder(int width, int height) {\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    @Override\r\n    public BufferedImage createImage(int width, int height) {\r\n        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\r\n        return bi;\r\n    }\r\n\r\n    @Override\r\n    public void writeImage(BufferedImage img, TranscoderOutput to) throws TranscoderException {\r\n        this.img = img;\r\n    }\r\n\r\n    public BufferedImage getBufferedImage() {\r\n        return img;\r\n    }\r\n}\r\n","size_bytes":1042},"draw/src/main/java/com/gabriel/draw/view/Splash.java":{"content":"package com.gabriel.draw.view;\r\n\r\nimport com.gabriel.draw.util.ImageLoader;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.MouseEvent;\r\nimport java.awt.event.MouseListener;\r\nimport java.awt.event.WindowEvent;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\n\r\npublic class Splash extends JPanel implements MouseListener {\r\n    private BufferedImage image;\r\n    private GPanel gPanel;\r\n    ImageLoader imageLoader;\r\n    int width;\r\n    int height;\r\n    public Splash() {\r\n        try {\r\n            imageLoader = new ImageLoader();\r\n            image = imageLoader.loadImage(\"/nette1440_800.png\");\r\n//            image = ImageIO.read(new File(\"src\\\\main\\\\resources\\\\nette1440_800.png\"));\r\n            height = image.getHeight();\r\n            width = image.getWidth();\r\n\r\n        } catch (IOException ex) {\r\n            // handle exception...\r\n        }\r\n        setSize(width, height);\r\n        setLayout(null);\r\n\r\n        gPanel = new GPanel(\"GoDraw\");\r\n        gPanel.setBounds(1100,700,150,50);\r\n        gPanel.addMouseListener(this);\r\n        this.add(gPanel);\r\n    }\r\n    @Override\r\n    public void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        g.drawImage(image, 0, 0, this); // see javadoc for more info on the parameters\r\n    }\r\n\r\n    @Override\r\n    public void mouseClicked(MouseEvent e) {\r\n    }\r\n\r\n    @Override\r\n    public void mousePressed(MouseEvent e) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mouseReleased(MouseEvent e) {\r\n        if(e.getSource()==gPanel){\r\n            JFrame topFrame = (JFrame) SwingUtilities.getWindowAncestor(this);\r\n\r\n            DrawingFrame mf = new DrawingFrame();\r\n            mf.setExtendedState(mf.getExtendedState() | JFrame.MAXIMIZED_BOTH);\r\n            mf.setVisible(true);\r\n\r\n            topFrame.setVisible(false);;\r\n            this.dispatchEvent(new WindowEvent(topFrame, WindowEvent.WINDOW_CLOSING));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mouseEntered(MouseEvent e) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mouseExited(MouseEvent e) {\r\n\r\n    }\r\n}\r\n","size_bytes":2141},"fontchooser/src/main/java/com/gabriel/fontchooser/listeners/MonospacedListener.java":{"content":"package com.gabriel.fontchooser.listeners;\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport com.gabriel.fontchooser.model.FamilyListModel;\r\n\r\nimport java.awt.event.ItemEvent;\r\nimport java.awt.event.ItemListener;\r\n\r\n@RequiredArgsConstructor\r\npublic class MonospacedListener implements ItemListener {\r\n\r\n    private final FamilyListModel familyListModel;\r\n\r\n    @Override\r\n    public void itemStateChanged(ItemEvent e) {\r\n        familyListModel.setMonospacedOnly(e.getItemSelectable().getSelectedObjects() != null);\r\n    }\r\n}\r\n","size_bytes":527},"fontchooser/src/main/java/com/gabriel/fontchooser/model/FontSelectionModel.java":{"content":"package com.gabriel.fontchooser.model;\r\n\r\nimport java.awt.Font;\r\nimport javax.swing.event.ChangeListener;\r\n\r\n/**\r\n * A model that supports selecting a {@code Font}.\r\n *\r\n * @author Christos Bohoris\r\n * @see Font\r\n */\r\npublic interface FontSelectionModel {\r\n\r\n    /**\r\n     * Returns the selected {@code Font} which should be\r\n     * non-{@code null}.\r\n     *\r\n     * @return the selected {@code Font}\r\n     * @see #setSelectedFont\r\n     */\r\n    Font getSelectedFont();\r\n\r\n    /**\r\n     * Returns the name of the selected font\r\n     *\r\n     * @return the name of the selected font\r\n     */\r\n    String getSelectedFontName();\r\n\r\n    /**\r\n     * Returns the family name of the selected font\r\n     *\r\n     * @return the name of the selected font's family\r\n     */\r\n    String getSelectedFontFamily();\r\n\r\n    /**\r\n     * Returns the size of the selected font\r\n     *\r\n     * @return the size of the selected font\r\n     */\r\n    int getSelectedFontSize();\r\n\r\n    /**\r\n     * Sets the selected font to {@code font}.\r\n     * Note that setting the font to {@code null}\r\n     * is undefined and may have unpredictable results.\r\n     * This method fires a state changed event if it sets the\r\n     * current font to a new non-{@code null} font.\r\n     *\r\n     * @param font the new {@code Font}\r\n     * @see #getSelectedFont\r\n     * @see #addChangeListener\r\n     */\r\n    void setSelectedFont(Font font);\r\n\r\n    /**\r\n     * Adds {@code listener} as a listener to changes in the model.\r\n     *\r\n     * @param listener the {@code ChangeListener} to be added\r\n     */\r\n    void addChangeListener(ChangeListener listener);\r\n\r\n    /**\r\n     * Removes {@code listener} as a listener to changes in the model.\r\n     *\r\n     * @param listener the {@code ChangeListener} to be removed\r\n     */\r\n    void removeChangeListener(ChangeListener listener);\r\n\r\n}\r\n","size_bytes":1832},"prop/src/main/java/com/gabriel/property/validator/floatNumber/FloatRangeValidator.java":{"content":"package com.gabriel.property.validator.floatNumber;\r\n\r\nimport com.gabriel.property.validator.Validator;\r\n\r\npublic class FloatRangeValidator implements Validator {\r\n\r\n    protected float lowerBound;\r\n    protected float upperBound;\r\n\r\n    protected boolean includeLowerBound;\r\n    protected boolean includeUpperBound;\r\n\r\n    public FloatRangeValidator(\r\n            float lowerBound,\r\n            float upperBound,\r\n            boolean includeLowerBound,\r\n            boolean includeUpperBound\r\n    ) {\r\n        this.lowerBound = lowerBound;\r\n        this.upperBound = upperBound;\r\n        this.includeLowerBound = includeLowerBound;\r\n        this.includeUpperBound = includeUpperBound;\r\n    }\r\n\r\n    public FloatRangeValidator(float lowerBound, float upperBound) {\r\n        this(lowerBound, upperBound, true, true);\r\n    }\r\n\r\n    public FloatRangeValidator() {\r\n        this(-Float.MAX_VALUE, Float.MAX_VALUE, true, true);\r\n    }\r\n\r\n    public void setLowerBound(float lowerBound) {\r\n        this.lowerBound = lowerBound;\r\n    }\r\n\r\n    public void setUpperBound(float upperBound) {\r\n        this.upperBound = upperBound;\r\n    }\r\n\r\n    public void setIncludeLowerBound(boolean includeLowerBound) {\r\n        this.includeLowerBound = includeLowerBound;\r\n    }\r\n\r\n    public void setIncludeUpperBound(boolean includeUpperBound) {\r\n        this.includeUpperBound = includeUpperBound;\r\n    }\r\n\r\n    public void setIncludeBounds(boolean includeLowerBound, boolean includeUpperBound) {\r\n        this.includeLowerBound = includeLowerBound;\r\n        this.includeUpperBound = includeUpperBound;\r\n    }\r\n\r\n    @Override\r\n    public boolean validate(Object object) {\r\n        float value = Float.parseFloat((String) object);\r\n\r\n        if ((value == lowerBound && includeLowerBound) || (value == upperBound && includeUpperBound)) {\r\n            return true;\r\n        }\r\n\r\n        return value > lowerBound && value < upperBound;\r\n    }\r\n}\r\n","size_bytes":1927},"draw/src/main/java/com/gabriel/draw/model/Rectangle.java":{"content":"package com.gabriel.draw.model;\r\n\r\nimport com.gabriel.draw.renderer.RectangleRenderer;\r\nimport com.gabriel.drawfx.model.Shape;\r\n\r\nimport java.awt.*;\r\n\r\npublic class Rectangle extends Shape {\r\n\r\n    public Rectangle(Point start) {\r\n        super(start);\r\n        this.setRendererService(new RectangleRenderer());\r\n    }\r\n\r\n    public Rectangle(Point start, Point end){\r\n        super(start, end);\r\n        this.setRendererService(new RectangleRenderer());\r\n    }\r\n    public Rectangle(Point start, int width, int height){\r\n        super(start, width, height);\r\n        this.setRendererService(new RectangleRenderer());\r\n    }\r\n}\r\n","size_bytes":629},"draw/src/main/java/com/gabriel/draw/model/Ellipse.java":{"content":"package com.gabriel.draw.model;\r\n\r\nimport com.gabriel.draw.renderer.EllipseRenderer;\r\nimport com.gabriel.draw.renderer.RectangleRenderer;\r\nimport com.gabriel.drawfx.model.Shape;\r\n\r\nimport java.awt.*;\r\n\r\npublic class Ellipse extends Shape {\r\n\r\n    public Ellipse(Point start, Point end) {\r\n        super(start, end);\r\n        this.setRendererService(new EllipseRenderer());\r\n    }\r\n\r\n    public Ellipse(Point start) {\r\n        super(start);\r\n        this.setRendererService(new EllipseRenderer());\r\n    }\r\n\r\n    public Ellipse(Point start, int width, int height) {\r\n        super(start, width, height);\r\n        this.setRendererService(new EllipseRenderer());\r\n    }\r\n}","size_bytes":668},"fontchooser/src/main/java/com/gabriel/fontchooser/listeners/FamilyListSelectionListener.java":{"content":"package com.gabriel.fontchooser.listeners;\r\n\r\nimport java.awt.Font;\r\nimport javax.swing.event.ListSelectionEvent;\r\nimport javax.swing.event.ListSelectionListener;\r\nimport lombok.RequiredArgsConstructor;\r\nimport com.gabriel.fontchooser.FontContainer;\r\n\r\n\r\n@RequiredArgsConstructor\r\npublic class FamilyListSelectionListener implements ListSelectionListener {\r\n\r\n    private final FontContainer fontContainer;\r\n\r\n    @Override\r\n    public void valueChanged(ListSelectionEvent e) {\r\n        if (!e.getValueIsAdjusting()) {\r\n            Font oldFont = fontContainer.getSelectedFont();\r\n            Font newFont = new Font(\r\n                fontContainer.getSelectedFamily(),\r\n                oldFont.getStyle(),\r\n                (int) fontContainer.getSelectedSize());\r\n\r\n            fontContainer.setSelectedFont(newFont);\r\n            fontContainer.setPreviewFont(newFont);\r\n        }\r\n    }\r\n}\r\n","size_bytes":893},"prop/src/main/java/com/gabriel/property/validator/floatNumber/FloatZeroPolicyValidator.java":{"content":"package com.gabriel.property.validator.floatNumber;\r\n\r\nimport com.gabriel.property.validator.Validator;\r\n\r\npublic class FloatZeroPolicyValidator implements Validator {\r\n\r\n    protected boolean allowZero;\r\n\r\n    public FloatZeroPolicyValidator(boolean allowZero) {\r\n        this.allowZero = allowZero;\r\n    }\r\n\r\n    public FloatZeroPolicyValidator() {\r\n        this(true);\r\n    }\r\n\r\n    @Override\r\n    public boolean validate(Object object) {\r\n        double value = Float.parseFloat((String) object);\r\n\r\n        return value != 0 || allowZero;\r\n    }\r\n}\r\n","size_bytes":555},"prop/src/main/java/com/gabriel/property/exception/PropertyNotSupportedException.java":{"content":"package com.gabriel.property.exception;\r\n\r\nimport com.gabriel.property.property.Property;\r\n\r\npublic class PropertyNotSupportedException extends RuntimeException {\r\n\r\n    public PropertyNotSupportedException(Property property) {\r\n        super(\"Could not find default editor/renderer for property '\" + property.getName() + \"'\");\r\n    }\r\n}\r\n","size_bytes":339},"fontchooser/src/main/java/com/gabriel/fontchooser/panes/PreviewPane.java":{"content":"package com.gabriel.fontchooser.panes;\r\n\r\nimport java.awt.Dimension;\r\nimport java.awt.Font;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.ResourceBundle;\r\nimport javax.swing.BorderFactory;\r\nimport javax.swing.JScrollPane;\r\nimport javax.swing.JTextArea;\r\n\r\npublic class PreviewPane extends JScrollPane {\r\n\r\n    private static final long serialVersionUID = -854781598723857579L;\r\n\r\n    private final JTextArea previewText = new JTextArea();\r\n\r\n    public PreviewPane() {\r\n        ResourceBundle resourceBundle = ResourceBundle.getBundle(\"FontChooser\");\r\n        previewText.setText(previewText.getText());\r\n        setPreviewTextBorder();\r\n        setPreferredSize(new Dimension(200, 80));\r\n        setViewportView(previewText);\r\n    }\r\n\r\n    @Override\r\n    public void updateUI() {\r\n        super.updateUI();\r\n        setPreviewTextBorder();\r\n    }\r\n\r\n    private void setPreviewTextBorder() {\r\n        if (previewText == null) {\r\n            return;\r\n        }\r\n        previewText.setBorder(BorderFactory.createCompoundBorder(previewText.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 5)));\r\n    }\r\n\r\n    public void setPreviewFont(Font font) {\r\n        previewText.setFont(font);\r\n    }\r\n\r\n    public void setPreviewText(String previewText) {\r\n        this.previewText.setText(previewText);\r\n    }\r\n\r\n    public  String getPreviewText(){\r\n        return this.previewText.getText();\r\n    }\r\n}\r\n","size_bytes":1417},"prop/src/main/java/com/gabriel/property/validator/longNumber/LongZeroPolicyValidator.java":{"content":"package com.gabriel.property.validator.longNumber;\r\n\r\nimport com.gabriel.property.validator.Validator;\r\n\r\npublic class LongZeroPolicyValidator implements Validator {\r\n\r\n    protected boolean allowZero;\r\n\r\n    public LongZeroPolicyValidator() {\r\n        this(true);\r\n    }\r\n\r\n    public LongZeroPolicyValidator(boolean allowZero) {\r\n        this.allowZero = allowZero;\r\n    }\r\n\r\n    @Override\r\n    public boolean validate(Object object) {\r\n        long value = Long.parseLong((String) object);\r\n\r\n        return (value == 0 && allowZero) || value != 0;\r\n    }\r\n}\r\n","size_bytes":563},"fontchooser/src/main/java/com/gabriel/fontchooser/panes/StylePane.java":{"content":"package com.gabriel.fontchooser.panes;\r\n\r\nimport java.awt.Dimension;\r\nimport java.awt.Font;\r\nimport java.util.Objects;\r\nimport javax.swing.DefaultListModel;\r\nimport javax.swing.JList;\r\nimport javax.swing.JScrollPane;\r\nimport javax.swing.ListSelectionModel;\r\nimport javax.swing.event.ChangeEvent;\r\nimport javax.swing.event.ChangeListener;\r\nimport javax.swing.event.ListSelectionListener;\r\nimport com.gabriel.fontchooser.FontFamilies;\r\nimport com.gabriel.fontchooser.FontFamily;\r\nimport com.gabriel.fontchooser.model.FontSelectionModel;\r\n\r\n\r\npublic class StylePane extends JScrollPane implements ChangeListener {\r\n\r\n    private static final long serialVersionUID = -176731082795772255L;\r\n\r\n    private final JList<Font> styleList = new JList<>();\r\n\r\n    private final DefaultListModel<Font> styleListModel;\r\n\r\n    private String family;\r\n\r\n    public StylePane() {\r\n\r\n        styleListModel = new DefaultListModel<>();\r\n        styleList.setModel(styleListModel);\r\n        styleList.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n        styleList.setCellRenderer(new StyleCellRenderer());\r\n\r\n        setMinimumSize(new Dimension(140, 50));\r\n        setPreferredSize(new Dimension(160, 100));\r\n        setViewportView(styleList);\r\n\r\n    }\r\n\r\n    public void addListSelectionListener(ListSelectionListener listener) {\r\n        styleList.addListSelectionListener(listener);\r\n    }\r\n\r\n    public void removeListSelectionListener(ListSelectionListener listener) {\r\n        styleList.removeListSelectionListener(listener);\r\n    }\r\n\r\n    public void setSelectedStyle(Font font) {\r\n        styleList.setSelectedValue(font, true);\r\n    }\r\n\r\n    public Font getSelectedStyle() {\r\n        return styleList.getSelectedValue();\r\n    }\r\n\r\n    @Override\r\n    public void stateChanged(ChangeEvent e) {\r\n        FontSelectionModel fontSelectionModel = (FontSelectionModel) e.getSource();\r\n        Font selectedFont = fontSelectionModel.getSelectedFont();\r\n        loadFamily(selectedFont.getFamily());\r\n    }\r\n\r\n    public void loadFamily(String family) {\r\n        if (Objects.equals(this.family, family)) {\r\n            return;\r\n        }\r\n\r\n        this.family = family;\r\n\r\n        FontFamilies fontFamilies = FontFamilies.getInstance();\r\n        FontFamily fontFamily = fontFamilies.get(family);\r\n\r\n        if (fontFamily != null) {\r\n            ListSelectionListener[] selectionListeners = styleList.getListSelectionListeners();\r\n            removeSelectionListeners(selectionListeners);\r\n            updateListModel(fontFamily.getStyles());\r\n            addSelectionListeners(selectionListeners);\r\n        }\r\n\r\n    }\r\n\r\n    private void updateListModel(Iterable<Font> fonts) {\r\n        styleListModel.clear();\r\n        for (Font font : fonts) {\r\n            styleListModel.addElement(font);\r\n        }\r\n    }\r\n\r\n    private void addSelectionListeners(ListSelectionListener[] selectionListeners) {\r\n        for (ListSelectionListener listener : selectionListeners) {\r\n            styleList.addListSelectionListener(listener);\r\n        }\r\n    }\r\n\r\n    private void removeSelectionListeners(ListSelectionListener[] selectionListeners) {\r\n        for (ListSelectionListener listener : selectionListeners) {\r\n            styleList.removeListSelectionListener(listener);\r\n        }\r\n    }\r\n}\r\n","size_bytes":3303},"prop/src/main/java/com/gabriel/property/validator/longNumber/LongValidator.java":{"content":"package com.gabriel.property.validator.longNumber;\r\n\r\nimport com.gabriel.property.validator.Validator;\r\n\r\n/**\r\n * Default implementation to validate long objects\r\n */\r\npublic class LongValidator implements Validator {\r\n\r\n    @Override\r\n    public boolean validate(Object object) {\r\n        return isLong(object);\r\n    }\r\n\r\n    protected boolean isLong(Object object) {\r\n        try {\r\n            Long.parseLong((String) object);\r\n        } catch (NumberFormatException e) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","size_bytes":548},"prop/src/main/java/com/gabriel/property/property/ColorProperty.java":{"content":"package com.gabriel.property.property;\r\n\r\nimport com.gabriel.property.validator.NullValidator;\r\n\r\nimport java.awt.*;\r\n\r\npublic class ColorProperty extends AbstractProperty<Color> {\r\n\r\n    public ColorProperty(String name, Color value) {\r\n        super(name, value, new NullValidator());\r\n    }\r\n}\r\n","size_bytes":298},"prop/src/main/java/com/gabriel/property/property/DoubleProperty.java":{"content":"package com.gabriel.property.property;\r\n\r\nimport com.gabriel.property.validator.Validator;\r\nimport com.gabriel.property.validator.doubleNumber.DoubleValidator;\r\n\r\npublic class DoubleProperty extends AbstractProperty<Double> {\r\n\r\n    public DoubleProperty(String name, Double value) {\r\n        super(name, value, new DoubleValidator());\r\n    }\r\n\r\n    public DoubleProperty(String name, Double value, Validator validator) {\r\n        super(name, value, validator);\r\n    }\r\n}\r\n","size_bytes":473},"draw/src/main/java/com/gabriel/draw/command/AddShapeCommand.java":{"content":"package com.gabriel.draw.command;\r\n\r\nimport com.gabriel.drawfx.command.Command;\r\nimport com.gabriel.drawfx.model.Shape;\r\nimport com.gabriel.drawfx.service.AppService;\r\n\r\npublic class AddShapeCommand implements Command{\r\n    Shape shape;\r\n    AppService appService;\r\n\r\n    public AddShapeCommand(AppService appService, Shape shape){\r\n        this.shape = shape;\r\n        this.appService = appService;\r\n    }\r\n    @Override\r\n    public void execute() {\r\n        appService.create(shape);\r\n    }\r\n\r\n    @Override\r\n    public void undo() {\r\n        appService.delete(shape);\r\n    }\r\n\r\n    @Override\r\n    public void redo() {\r\n        appService.create(shape);\r\n    }\r\n}","size_bytes":665},"draw/src/main/java/com/gabriel/draw/model/Line.java":{"content":"package com.gabriel.draw.model;\r\n\r\n\r\nimport com.gabriel.draw.renderer.ImageRenderer;\r\nimport com.gabriel.draw.renderer.LineRenderer;\r\nimport lombok.Data;\r\nimport com.gabriel.drawfx.model.Shape;\r\nimport java.awt.*;\r\n\r\n\r\n@Data\r\npublic class Line extends Shape {\r\n\r\n    public Line(Point start, Point end) {\r\n        super(start, end);\r\n        this.setColor(Color.RED);\r\n        this.setRendererService(new LineRenderer());\r\n    }\r\n\r\n    public Line(Point start) {\r\n        super(start);\r\n        this.setColor(Color.RED);\r\n        this.setRendererService(new LineRenderer());\r\n    }\r\n\r\n    public Line(Point start, int width, int height) {\r\n        super(start, width, height);\r\n        this.setRendererService(new LineRenderer());\r\n    }\r\n}\r\n","size_bytes":742},"prop/src/main/java/com/gabriel/property/event/PropertyEventAdapter.java":{"content":"package com.gabriel.property.event;\r\n\r\nimport com.gabriel.property.property.Property;\r\n\r\n/**\r\n * Adapter to make writing event listeners a bit easier. This adapter implements the\r\n * property sheet event listener but does not execute any code. These methods can\r\n * be overwritten to provide the desired functionality.\r\n */\r\npublic class PropertyEventAdapter implements PropertyEventListener {\r\n\r\n    @Override\r\n    public void onPropertyUpdated(Property property) {\r\n    }\r\n\r\n    @Override\r\n    public void onPropertyAdded(Property property) {\r\n    }\r\n}\r\n","size_bytes":556},"draw/src/main/java/com/gabriel/draw/service/ImageFileService.java":{"content":"package com.gabriel.draw.service;\r\n\r\nimport com.gabriel.draw.component.FileTypeFilter;\r\nimport com.gabriel.drawfx.ShapeMode;\r\nimport com.gabriel.drawfx.model.Drawing;\r\n\r\nimport javax.swing.*;\r\nimport javax.swing.filechooser.FileSystemView;\r\nimport java.io.File;\r\n\r\npublic class ImageFileService {\r\n    public void setImage(Drawing drawing) {\r\n        String homeFolder;\r\n        if(drawing.getImageFilename()==null)\r\n\r\n        {\r\n            homeFolder = FileSystemView.getFileSystemView().getHomeDirectory().getPath();\r\n        }\r\n                else\r\n\r\n        {\r\n            File file = new File(drawing.getImageFilename());\r\n            homeFolder = file.getPath();\r\n        }\r\n\r\n        JFileChooser fileChooser = new JFileChooser(homeFolder);\r\n        FileTypeFilter pngTypeFilter = new FileTypeFilter(\"png\", \"PNG Image Documents\");\r\n        FileTypeFilter jpgTypeFilter = new FileTypeFilter(\"jpg\", \"JPEG Image Documents\");\r\n        FileTypeFilter gifTypeFilter = new FileTypeFilter(\"gif\", \"GIF Image Documents\");\r\n                fileChooser.addChoosableFileFilter(pngTypeFilter);\r\n                fileChooser.addChoosableFileFilter(jpgTypeFilter);\r\n                fileChooser.addChoosableFileFilter(gifTypeFilter);\r\n        int result = fileChooser.showOpenDialog(null);\r\n                if(result ==JFileChooser.APPROVE_OPTION)\r\n\r\n        {\r\n            String filename = fileChooser.getSelectedFile().getAbsolutePath();\r\n            drawing.setImageFilename(filename);\r\n            drawing.setShapeMode(ShapeMode.Image);\r\n        }\r\n    }\r\n\r\n}\r\n","size_bytes":1557},"prop/src/main/java/com/gabriel/property/cell/StringCellComponent.java":{"content":"package com.gabriel.property.cell;\r\n\r\nimport com.gabriel.property.property.StringProperty;\r\nimport com.gabriel.property.util.Keys;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.KeyEvent;\r\n\r\npublic class StringCellComponent extends AbstractCellComponent {\r\n\r\n    private StringProperty property;\r\n    private JTextField textField;\r\n\r\n    public StringCellComponent(StringProperty stringProperty) {\r\n        this.property = stringProperty;\r\n        this.textField = new JTextField();\r\n\r\n        textField.addKeyListener(new KeyAdapter());\r\n    }\r\n\r\n    @Override\r\n    public Component getTableCellEditorComponent(JTable jTable, Object o, boolean b, int i, int i1) {\r\n        textField.setText(property.getValue());\r\n\r\n        return textField;\r\n    }\r\n\r\n    @Override\r\n    public Object getCellEditorValue() {\r\n        return property.getValue();\r\n    }\r\n\r\n    @Override\r\n    public Component getTableCellRendererComponent(JTable jTable, Object o, boolean b, boolean b1, int i, int i1) {\r\n        return new JLabel(property.getValue());\r\n    }\r\n\r\n    private class KeyAdapter extends java.awt.event.KeyAdapter {\r\n        @Override\r\n        public void keyReleased(KeyEvent event) {\r\n            if (Keys.ignoreKey(event.getKeyCode())) {\r\n                return;\r\n            }\r\n\r\n            if (property.getValidator().validate(textField.getText())) {\r\n                property.setValue(textField.getText());\r\n                textField.setBackground(options.getBackgroundColor());\r\n                eventDispatcher.dispatchUpdateEvent(property);\r\n            } else {\r\n                textField.setBackground(options.getInvalidColor());\r\n            }\r\n        }\r\n    }\r\n}\r\n","size_bytes":1694},"prop/src/main/java/com/gabriel/property/property/IntegerProperty.java":{"content":"package com.gabriel.property.property;\r\n\r\nimport com.gabriel.property.validator.Validator;\r\nimport com.gabriel.property.validator.integer.IntegerValidator;\r\n\r\npublic class IntegerProperty extends AbstractProperty<Integer> {\r\n\r\n    public IntegerProperty(String name, Integer value) {\r\n        super(name, value, new IntegerValidator());\r\n    }\r\n\r\n    public IntegerProperty(String name, Integer value, Validator validator) {\r\n        super(name, value, validator);\r\n    }\r\n}\r\n","size_bytes":476},"fontchooser/src/main/java/com/gabriel/fontchooser/FontFamiliesFactory.java":{"content":"package com.gabriel.fontchooser;\r\n\r\nimport java.awt.Font;\r\nimport java.awt.GraphicsEnvironment;\r\n\r\npublic class FontFamiliesFactory {\r\n\r\n    public static FontFamilies create() {\r\n        FontFamilies fontFamilies = new FontFamilies();\r\n        GraphicsEnvironment graphicsEnvironment = GraphicsEnvironment.getLocalGraphicsEnvironment();\r\n        Font[] allFonts = graphicsEnvironment.getAllFonts();\r\n\r\n        for (Font font : allFonts) {\r\n            fontFamilies.add(font);\r\n        }\r\n\r\n        return fontFamilies;\r\n    }\r\n\r\n}\r\n","size_bytes":533},"draw/src/main/java/com/gabriel/draw/view/DrawingMenuBar.java":{"content":"package com.gabriel.draw.view;\r\n\r\nimport com.gabriel.drawfx.ActionCommand;\r\nimport com.gabriel.drawfx.ShapeMode;\r\nimport com.gabriel.drawfx.service.AppService;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.InputEvent;\r\nimport java.awt.event.KeyEvent;\r\n\r\npublic class DrawingMenuBar extends JMenuBar {\r\n\r\n    ActionListener actionListener;\r\n\r\n    public DrawingMenuBar( ActionListener actionListener ){\r\n        super();\r\n        this.actionListener =actionListener;\r\n\r\n// Insert the File menu and menuitems\r\n\r\n        JMenu menu = new JMenu(\"File\");\r\n        menu.setMnemonic(KeyEvent.VK_F);\r\n\r\n        JMenuItem menuItem = new JMenuItem(\"New\");\r\n        menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, InputEvent.CTRL_DOWN_MASK));\r\n        menuItem.addActionListener(actionListener);\r\n        menuItem.setActionCommand(ActionCommand.NEW);\r\n        menu.add(menuItem);\r\n\r\n        menuItem = new JMenuItem(\"Open\");\r\n        menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, InputEvent.CTRL_DOWN_MASK));\r\n        menuItem.addActionListener(actionListener);\r\n        menuItem.setActionCommand(ActionCommand.OPEN);\r\n        menu.add(menuItem);\r\n\r\n\r\n        menuItem = new JMenuItem(\"SaveAs\");\r\n        menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, InputEvent.CTRL_DOWN_MASK));\r\n        menuItem.addActionListener(actionListener);\r\n        menuItem.setActionCommand(ActionCommand.SAVEAS);\r\n        menu.add(menuItem);\r\n\r\n        menuItem = new JMenuItem(\"Save\");\r\n        menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, InputEvent.CTRL_DOWN_MASK));\r\n        menuItem.addActionListener(actionListener);\r\n        menuItem.setActionCommand(ActionCommand.SAVE);\r\n        menu.add(menuItem);\r\n\r\n        add(menu);\r\n\r\n\r\n        menu = new JMenu(\"Edit\");\r\n        menu.setMnemonic(KeyEvent.VK_E);\r\n\r\n        menuItem = new JMenuItem(\"Umdo\");\r\n        menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z, InputEvent.CTRL_DOWN_MASK));\r\n        menuItem.addActionListener(actionListener);\r\n        menuItem.setActionCommand(ActionCommand.UNDO);\r\n        menu.add(menuItem);\r\n\r\n        menuItem = new JMenuItem(\"Redo\");\r\n        menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z, InputEvent.CTRL_DOWN_MASK | InputEvent.SHIFT_DOWN_MASK));;\r\n        menuItem.addActionListener(actionListener);\r\n        menuItem.setActionCommand(ActionCommand.REDO);\r\n        menu.add(menuItem);\r\n\r\n        add(menu);\r\n\r\n        menu = new JMenu(\"Draw\");\r\n        menu.setMnemonic(KeyEvent.VK_D);\r\n\r\n        menuItem = new JMenuItem(\"Line\");\r\n        menuItem.setActionCommand(ActionCommand.LINE);\r\n        menuItem.addActionListener(actionListener);\r\n        menu.add(menuItem);\r\n\r\n        menuItem = new JMenuItem(\"Rectangle\");\r\n        menuItem.setActionCommand(ActionCommand.RECT);\r\n        menuItem.addActionListener(actionListener);\r\n        menu.add(menuItem);\r\n\r\n        menuItem = new JMenuItem(\"Ellipse\");\r\n        menu.add(menuItem);\r\n        menuItem.setActionCommand(ActionCommand.ELLIPSE);\r\n        menuItem.addActionListener(actionListener);\r\n\r\n        menuItem = new JMenuItem(\"Picture\");\r\n        menu.add(menuItem);\r\n        menuItem.setActionCommand(ActionCommand.IMAGE);\r\n        menuItem.addActionListener(actionListener);\r\n\r\n        menuItem = new JMenuItem(\"Text\");\r\n        menuItem.setActionCommand(ActionCommand.TEXT);\r\n        menuItem.addActionListener(actionListener);\r\n        menu.add(menuItem);\r\n\r\n        menuItem = new JMenuItem(\"Select\");\r\n        menuItem.setActionCommand(ActionCommand.SELECT);\r\n        menuItem.addActionListener(actionListener);\r\n        menu.add(menuItem);\r\n\r\n\r\n        add(menu);\r\n\r\n        // Properties\r\n        menu = new JMenu(\"Properties\");\r\n        menu.setMnemonic(KeyEvent.VK_P);\r\n\r\n        menuItem = new JMenuItem(\"Color\");\r\n        menuItem.setActionCommand(ActionCommand.COLOR);\r\n        menuItem.addActionListener(actionListener);\r\n        menu.add(menuItem);\r\n\r\n        menuItem = new JMenuItem(\"Fill\");\r\n        menuItem.setActionCommand(ActionCommand.FILL);\r\n        menuItem.addActionListener(actionListener);\r\n        menu.add(menuItem);\r\n\r\n        this.add(menu);\r\n\r\n    }\r\n}\r\n","size_bytes":4292},"fontchooser/src/main/java/com/gabriel/fontchooser/FontDialog.java":{"content":"package com.gabriel.fontchooser;\r\n\r\nimport java.awt.BorderLayout;\r\nimport java.awt.Component;\r\nimport java.awt.Dialog;\r\nimport java.awt.FlowLayout;\r\nimport java.awt.Font;\r\nimport java.awt.Frame;\r\nimport java.awt.GraphicsConfiguration;\r\nimport java.awt.Window;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.util.ResourceBundle;\r\nimport javax.swing.BorderFactory;\r\nimport javax.swing.JButton;\r\nimport javax.swing.JDialog;\r\nimport javax.swing.JPanel;\r\nimport javax.swing.WindowConstants;\r\nimport com.gabriel.fontchooser.util.ResourceBundleUtil;\r\n\r\n/**\r\n * A dialog containing a {@code FontChooser} as well as OK and Cancel buttons.\r\n *\r\n * @author Christos Bohoris\r\n */\r\npublic class FontDialog extends JDialog {\r\n\r\n    private static final long serialVersionUID = -5545636367279574840L;\r\n\r\n    public static void showDialog(Component component) {\r\n        FontDialog dialog = new FontDialog((Frame) null, \"Select Font\", true);\r\n        dialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\r\n        dialog.setSelectedFont(component.getFont());\r\n        dialog.setVisible(true);\r\n        if (!dialog.cancelSelected) {\r\n            component.setFont(dialog.getSelectedFont());\r\n        }\r\n    }\r\n\r\n    private final com.gabriel.fontchooser.FontChooser chooser = new FontChooser();\r\n\r\n    private final JButton cancelButton = new JButton();\r\n\r\n    private final JButton okButton = new JButton();\r\n\r\n    private final ResourceBundle bundle = ResourceBundle.getBundle(\"FontDialog\");\r\n\r\n    private final ResourceBundleUtil resourceBundleUtil = new ResourceBundleUtil(bundle);\r\n\r\n    public FontDialog() {\r\n        initDialog();\r\n    }\r\n\r\n    public FontDialog(Frame owner) {\r\n        super(owner);\r\n        initDialog();\r\n    }\r\n\r\n    public FontDialog(Frame owner, boolean modal) {\r\n        super(owner, modal);\r\n        initDialog();\r\n    }\r\n\r\n    public FontDialog(Frame owner, String title) {\r\n        super(owner, title);\r\n        initDialog();\r\n    }\r\n\r\n    public FontDialog(Frame owner, String title, boolean modal) {\r\n        super(owner, title, modal);\r\n        initDialog();\r\n    }\r\n\r\n    public FontDialog(Frame owner, String title, boolean modal, GraphicsConfiguration gc) {\r\n        super(owner, title, modal, gc);\r\n        initDialog();\r\n    }\r\n\r\n    public FontDialog(Dialog owner) {\r\n        super(owner);\r\n        initDialog();\r\n    }\r\n\r\n    public FontDialog(Dialog owner, boolean modal) {\r\n        super(owner, modal);\r\n        initDialog();\r\n    }\r\n\r\n    public FontDialog(Dialog owner, String title) {\r\n        super(owner, title);\r\n        initDialog();\r\n    }\r\n\r\n    public FontDialog(Dialog owner, String title, boolean modal) {\r\n        super(owner, title, modal);\r\n        initDialog();\r\n    }\r\n\r\n    public FontDialog(Dialog owner, String title, boolean modal, GraphicsConfiguration gc) {\r\n        super(owner, title, modal, gc);\r\n        initDialog();\r\n    }\r\n\r\n    public FontDialog(Window owner) {\r\n        super(owner);\r\n        initDialog();\r\n    }\r\n\r\n    public FontDialog(Window owner, ModalityType modalityType) {\r\n        super(owner, modalityType);\r\n        initDialog();\r\n    }\r\n\r\n    public FontDialog(Window owner, String title) {\r\n        super(owner, title);\r\n        initDialog();\r\n    }\r\n\r\n    public FontDialog(Window owner, String title, ModalityType modalityType) {\r\n        super(owner, title, modalityType);\r\n        initDialog();\r\n    }\r\n\r\n    public FontDialog(Window owner, String title, ModalityType modalityType, GraphicsConfiguration gc) {\r\n        super(owner, title, modalityType, gc);\r\n        initDialog();\r\n    }\r\n\r\n    private boolean cancelSelected;\r\n\r\n    private void initDialog() {\r\n        initComponents();\r\n        getRootPane().setDefaultButton(okButton);\r\n\r\n        addWindowListener(new WindowAdapter() {\r\n            @Override\r\n            public void windowClosing(WindowEvent e) {\r\n                cancelSelected = true;\r\n            }\r\n        });\r\n        pack();\r\n    }\r\n\r\n    private void initComponents() {\r\n\r\n        JPanel chooserPanel = new JPanel();\r\n        chooserPanel.setBorder(BorderFactory.createEmptyBorder(12, 12, 0, 11));\r\n        chooserPanel.setLayout(new BorderLayout(0, 12));\r\n        chooserPanel.add(chooser);\r\n        add(chooserPanel);\r\n\r\n        JPanel controlPanel = new JPanel();\r\n        controlPanel.setBorder(BorderFactory.createEmptyBorder(7, 7, 6, 6));\r\n        controlPanel.setLayout(new FlowLayout(FlowLayout.TRAILING));\r\n        add(controlPanel, BorderLayout.PAGE_END);\r\n\r\n        okButton.setMnemonic(resourceBundleUtil.getFirstChar(\"action.ok.mnemonic\"));\r\n        okButton.setText(bundle.getString(\"action.ok\"));\r\n        okButton.addActionListener(event -> dispose());\r\n        controlPanel.add(okButton);\r\n\r\n        cancelButton.setMnemonic(resourceBundleUtil.getFirstChar(\"action.cancel.mnemonic\"));\r\n        cancelButton.setText(bundle.getString(\"action.cancel\"));\r\n        cancelButton.addActionListener(event -> {\r\n            cancelSelected = true;\r\n            dispose();\r\n        });\r\n        controlPanel.add(cancelButton);\r\n    }\r\n\r\n    public Font getSelectedFont() {\r\n        return chooser.getSelectedFont();\r\n    }\r\n\r\n    public void setSelectedFont(Font font) {\r\n        chooser.setSelectedFont(font);\r\n    }\r\n\r\n    public boolean isCancelSelected() {\r\n        return cancelSelected;\r\n    }\r\n\r\n    FontChooser getFontChooser(){\r\n        return chooser;\r\n    }\r\n\r\n    public  void setPreviewText(String text) {\r\n        getFontChooser().setPreviewText(text);\r\n    }\r\n\r\n    public String getPreviewText(){\r\n        return getFontChooser().getPreviewText();\r\n    }\r\n}\r\n","size_bytes":5645},"prop/src/main/java/com/gabriel/property/PropertyPanel.java":{"content":"package com.gabriel.property;\r\n\r\nimport com.gabriel.property.cell.*;\r\nimport com.gabriel.property.event.EventDispatcher;\r\nimport com.gabriel.property.event.PropertyEventListener;\r\nimport com.gabriel.property.property.*;\r\nimport com.gabriel.property.exception.PropertyNotSupportedException;\r\nimport com.gabriel.property.property.selection.SelectionProperty;\r\n\r\nimport javax.swing.*;\r\nimport javax.swing.table.TableCellEditor;\r\nimport javax.swing.table.TableCellRenderer;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class PropertyPanel extends JTable {\r\n    private PropertyOptions options;\r\n    private PropertyModel propertyModel;\r\n    private EventDispatcher eventDispatcher;\r\n    private List<AbstractCellComponent> cellComponents;\r\n    private List<Property> properties;\r\n\r\n    private SelectionCellComponent selectionCellComponent;\r\n    /**\r\n     * @param options Options object for the property sheet\r\n     */\r\n    public PropertyPanel(PropertyOptions options) {\r\n        this.options = options;\r\n        this.propertyModel = new PropertyModel(options.getHeaders());\r\n        this.eventDispatcher = new EventDispatcher();\r\n        this.cellComponents = new ArrayList<>();\r\n        this.properties = new ArrayList<>();\r\n\r\n        // Set necessary properties\r\n        setModel(propertyModel);\r\n        setRowHeight(options.getRowHeight());\r\n        getTableHeader().setReorderingAllowed(false);\r\n    }\r\n\r\n    /**\r\n     * Add a new property to the table with a custom cell component.\r\n     *\r\n     * @param property      Property\r\n     * @param cellComponent Custom cell component\r\n     */\r\n    public void addProperty(Property property, AbstractCellComponent cellComponent) {\r\n        propertyModel.addRow(new Object[]{property.getName(), property.getValue()});\r\n        cellComponents.add(cellComponent);\r\n        properties.add(property);\r\n        cellComponent.init(options, eventDispatcher);\r\n        eventDispatcher.dispatchPropertyAddedEvent(property);\r\n    }\r\n\r\n    /**\r\n     * Add a standard property. If the property is not standard, i.e. there does not exist a standard\r\n     * cell component, a {@code PropertyNotSupportedException} is thrown.\r\n     *\r\n     * @param property Standard property\r\n     * @throws PropertyNotSupportedException If {@code property} is not a standard property\r\n     */\r\n    public void addProperty(Property property) throws PropertyNotSupportedException {\r\n        if (property instanceof IntegerProperty) {\r\n            addProperty(property, new IntegerCellComponent((IntegerProperty) property));\r\n        } else if (property instanceof LongProperty) {\r\n            addProperty(property, new LongCellComponent((LongProperty) property));\r\n        } else if (property instanceof DoubleProperty) {\r\n            addProperty(property, new DoubleCellComponent((DoubleProperty) property));\r\n        } else if (property instanceof FloatProperty) {\r\n            addProperty(property, new FloatCellComponent((FloatProperty) property));\r\n        } else if (property instanceof StringProperty) {\r\n            addProperty(property, new StringCellComponent((StringProperty) property));\r\n        } else if (property instanceof ColorProperty) {\r\n            addProperty(property, new ColorCellComponent((ColorProperty) property));\r\n        } else if (property instanceof BooleanProperty) {\r\n            addProperty(property, new BooleanCellComponent((BooleanProperty) property));\r\n        } else if (property instanceof SelectionProperty) {\r\n            selectionCellComponent = new SelectionCellComponent((SelectionProperty) property);\r\n            addProperty(property, selectionCellComponent);\r\n        } else if (property instanceof ActionProperty) {\r\n            addProperty(property, new ActionCellComponent((ActionProperty) property));\r\n        } else {\r\n            throw new PropertyNotSupportedException(property);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes the property from the sheet.\r\n     *\r\n     * @param property Property\r\n     */\r\n    public void removeProperty(Property property) {\r\n        removeProperty(properties.indexOf(property));\r\n    }\r\n\r\n    /**\r\n     * Removes a row from the table.\r\n     *\r\n     * @param row Row index\r\n     */\r\n    public void removeProperty(int row) {\r\n        cellComponents.remove(row);\r\n        properties.remove(row);\r\n        propertyModel.removeRow(row);\r\n    }\r\n\r\n    /**\r\n     * Removes all components from the table\r\n     */\r\n    public void clear() {\r\n        propertyModel.clear();\r\n        cellComponents.clear();\r\n        properties.clear();\r\n    }\r\n\r\n    /**\r\n     * Add a new event listener.\r\n     *\r\n     * @param eventListener Event listener\r\n     */\r\n    public void addEventListener(PropertyEventListener eventListener) {\r\n        eventDispatcher.addEventListener(eventListener);\r\n    }\r\n\r\n    /**\r\n     * Remove an event listener\r\n     *\r\n     * @param eventListener Event listener\r\n     */\r\n    public void removeEventListener(PropertyEventListener eventListener) {\r\n        eventDispatcher.removeEventListener(eventListener);\r\n    }\r\n\r\n    @Override\r\n    public TableCellEditor getCellEditor(int row, int column) {\r\n        if (column == 1) {\r\n            return cellComponents.get(row);\r\n        }\r\n\r\n        return super.getCellEditor(row, column);\r\n    }\r\n\r\n    @Override\r\n    public TableCellRenderer getCellRenderer(int row, int column) {\r\n        if (column == 1) {\r\n            return cellComponents.get(row);\r\n        }\r\n\r\n        return super.getCellRenderer(row, column);\r\n    }\r\n    public SelectionCellComponent getSelectionCellComponent(){\r\n        return selectionCellComponent;\r\n    }\r\n}\r\n","size_bytes":5621},"prop/src/main/java/com/gabriel/property/validator/integer/IntegerZeroPolicyValidator.java":{"content":"package com.gabriel.property.validator.integer;\r\n\r\nimport com.gabriel.property.validator.Validator;\r\n\r\npublic class IntegerZeroPolicyValidator implements Validator {\r\n\r\n    protected boolean allowZero;\r\n\r\n    public IntegerZeroPolicyValidator() {\r\n        this(true);\r\n    }\r\n\r\n    public IntegerZeroPolicyValidator(boolean allowZero) {\r\n        this.allowZero = allowZero;\r\n    }\r\n\r\n    @Override\r\n    public boolean validate(Object object) {\r\n        int value = Integer.parseInt((String) object);\r\n\r\n        return (value == 0 && allowZero) || value != 0;\r\n    }\r\n}\r\n","size_bytes":570},"draw/src/main/java/com/gabriel/draw/renderer/LineRenderer.java":{"content":"package com.gabriel.draw.renderer;\r\n\r\nimport com.gabriel.drawfx.model.Shape;\r\nimport com.gabriel.drawfx.renderer.ShapeRenderer;\r\n\r\nimport java.awt.*;\r\n\r\n\r\npublic class LineRenderer extends ShapeRenderer {\r\n\r\n    @Override\r\n    public void render(Graphics g, Shape shape, boolean xor) {\r\n        if(!shape.isVisible()){\r\n            return;\r\n        }\r\n\r\n        int x = shape.getLocation().x;\r\n        int y = shape.getLocation().y;\r\n        int width = shape.getWidth() ;\r\n        int height = shape.getHeight();\r\n\r\n        Graphics2D g2 = (Graphics2D) g;\r\n        g2.setStroke(new BasicStroke(shape.getThickness()));\r\n\r\n        if(xor) {\r\n            g2.setXORMode(shape.getColor());\r\n        }\r\n        else {\r\n            g2.setColor(shape.getColor());\r\n            g2.drawLine(x,y,x+width, y+height);\r\n            super.render(g, shape, xor);\r\n        }\r\n    }\r\n}","size_bytes":868},"fontchooser/src/main/java/com/gabriel/fontchooser/FontNameComparator.java":{"content":"package com.gabriel.fontchooser;\r\n\r\nimport java.awt.Font;\r\nimport java.io.Serializable;\r\nimport java.util.Comparator;\r\n\r\npublic class FontNameComparator implements Comparator<Font>, Serializable {\r\n\r\n    private static final long serialVersionUID = 1143602375442062028L;\r\n\r\n    @Override\r\n    public int compare(Font o1, Font o2) {\r\n        return o1.getName().compareTo(o2.getName());\r\n    }\r\n\r\n}\r\n","size_bytes":399},"drawfx/src/main/java/com/gabriel/drawfx/util/Normalizer.java":{"content":"package com.gabriel.drawfx.util;\r\n\r\nimport com.gabriel.drawfx.model.Shape;\r\n\r\npublic class Normalizer {\r\n    public static void normalize(Shape shape){\r\n        int w = shape.getWidth();\r\n        int h =  shape.getHeight();\r\n        if(shape.getWidth() < 0){\r\n            shape.getLocation().x += w;\r\n            shape.setWidth(-w);\r\n        }\r\n        if(shape.getHeight()<0){\r\n            shape.getLocation().y += h;\r\n            shape.setHeight(-h);;\r\n        }\r\n    }\r\n}\r\n","size_bytes":476},"prop/src/main/java/com/gabriel/property/validator/longNumber/LongValidatorFactory.java":{"content":"package com.gabriel.property.validator.longNumber;\r\n\r\nimport com.gabriel.property.validator.CompoundValidator;\r\nimport com.gabriel.property.validator.Validator;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class LongValidatorFactory {\r\n\r\n    private LongValidator validator;\r\n    private LongRangeValidator rangeValidator;\r\n    private LongParityValidator parityValidator;\r\n    private LongZeroPolicyValidator zeroPolicyValidator;\r\n\r\n    public LongValidatorFactory() {\r\n        this.validator = new LongValidator();\r\n        this.rangeValidator = null;\r\n        this.parityValidator = null;\r\n        this.zeroPolicyValidator = null;\r\n    }\r\n\r\n    public LongValidatorFactory setRange(int lowerBound, int upperBound) {\r\n        rangeValidator = new LongRangeValidator(lowerBound, upperBound);\r\n\r\n        return this;\r\n    }\r\n\r\n    public LongValidatorFactory setLowerBound(int lowerBound) {\r\n        if (rangeValidator == null) {\r\n            rangeValidator = new LongRangeValidator();\r\n        }\r\n        rangeValidator.setLowerBound(lowerBound);\r\n\r\n        return this;\r\n    }\r\n\r\n    public LongValidatorFactory setUpperBound(int upperBound) {\r\n        if (rangeValidator == null) {\r\n            rangeValidator = new LongRangeValidator();\r\n        }\r\n        rangeValidator.setUpperBound(upperBound);\r\n\r\n        return this;\r\n    }\r\n\r\n    public LongValidatorFactory setParity(boolean even) {\r\n        parityValidator = new LongParityValidator(even);\r\n\r\n        return this;\r\n    }\r\n\r\n    public LongValidatorFactory allowZero(boolean allowZero) {\r\n        zeroPolicyValidator = new LongZeroPolicyValidator(allowZero);\r\n\r\n        return this;\r\n    }\r\n\r\n    public CompoundValidator build() {\r\n        ArrayList<Validator> validators = new ArrayList<>();\r\n        validators.add(validator);\r\n\r\n        if (rangeValidator != null) {\r\n            validators.add(rangeValidator);\r\n        }\r\n        if (parityValidator != null) {\r\n            validators.add(parityValidator);\r\n        }\r\n        if (zeroPolicyValidator != null) {\r\n            validators.add(zeroPolicyValidator);\r\n        }\r\n\r\n        Validator[] _validators = new Validator[validators.size()];\r\n        validators.toArray(_validators);\r\n\r\n        return new CompoundValidator(_validators);\r\n    }\r\n\r\n}\r\n","size_bytes":2267},"prop/src/main/java/com/gabriel/property/cell/ActionCellComponent.java":{"content":"package com.gabriel.property.cell;\r\n\r\nimport com.gabriel.property.property.ActionProperty;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\n\r\npublic class ActionCellComponent extends AbstractCellComponent {\r\n\r\n    private JButton button;\r\n\r\n    public ActionCellComponent(ActionProperty actionProperty) {\r\n        this.button = new JButton(actionProperty.getActionName());\r\n\r\n        button.addActionListener(e -> actionProperty.getValue().execute());\r\n    }\r\n\r\n    @Override\r\n    public Component getTableCellEditorComponent(JTable jTable, Object o, boolean b, int i, int i1) {\r\n        return button;\r\n    }\r\n\r\n    @Override\r\n    public Object getCellEditorValue() {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Component getTableCellRendererComponent(JTable jTable, Object o, boolean b, boolean b1, int i, int i1) {\r\n        return button;\r\n    }\r\n}\r\n","size_bytes":864},"fontchooser/src/main/java/com/gabriel/fontchooser/model/FamilyListModel.java":{"content":"package com.gabriel.fontchooser.model;\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport com.gabriel.fontchooser.FontFamilies;\r\nimport com.gabriel.fontchooser.FontFamily;\r\n\r\nimport javax.swing.AbstractListModel;\r\nimport java.awt.Component;\r\nimport java.awt.Font;\r\nimport java.awt.FontMetrics;\r\nimport java.util.ArrayList;\r\nimport java.util.Comparator;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Optional;\r\nimport java.util.stream.IntStream;\r\n\r\n@RequiredArgsConstructor\r\npublic class FamilyListModel extends AbstractListModel<String> {\r\n\r\n    private static final char[] MONOSPACE_CHARS = {'0', '1', 'x', 'W'};\r\n\r\n    private final FontFamilies fontFamilies = FontFamilies.getInstance();\r\n\r\n    private final Component component;\r\n\r\n    private List<String> fontFamilyNames;\r\n\r\n    private List<String> monospacedFontFamilyNames;\r\n\r\n    private boolean monospacedOnly;\r\n\r\n    @Override\r\n    public int getSize() {\r\n        initialize();\r\n        return (monospacedOnly ? monospacedFontFamilyNames : fontFamilyNames).size();\r\n    }\r\n\r\n    @Override\r\n    public String getElementAt(int index) {\r\n        initialize();\r\n        return (monospacedOnly ? monospacedFontFamilyNames : fontFamilyNames).get(index);\r\n    }\r\n\r\n    public Optional<String> findFirst(CharSequence searchString) {\r\n        initialize();\r\n        List<String> families = monospacedOnly ? monospacedFontFamilyNames : fontFamilyNames;\r\n        for (String family : families) {\r\n            if (family.toLowerCase(Locale.ENGLISH).contains(searchString)) {\r\n                return Optional.of(family);\r\n            }\r\n        }\r\n        return Optional.empty();\r\n    }\r\n\r\n    private void initialize() {\r\n        if (monospacedOnly) {\r\n            if (monospacedFontFamilyNames == null) {\r\n                monospacedFontFamilyNames = new ArrayList<>(128);\r\n                for (FontFamily fontFamily : fontFamilies) {\r\n                    String name = fontFamily.getName();\r\n                    if (isMonospace(fontFamily)) {\r\n                        monospacedFontFamilyNames.add(name);\r\n                    }\r\n                }\r\n                monospacedFontFamilyNames.sort(Comparator.naturalOrder());\r\n            }\r\n        } else {\r\n            if (fontFamilyNames == null) {\r\n                fontFamilyNames = new ArrayList<>(fontFamilies.size());\r\n                for (FontFamily fontFamily : fontFamilies) {\r\n                    fontFamilyNames.add(fontFamily.getName());\r\n                }\r\n                fontFamilyNames.sort(Comparator.naturalOrder());\r\n            }\r\n        }\r\n    }\r\n\r\n    private boolean isMonospace(FontFamily fontFamily) {\r\n        FontMetrics metrics = component.getFontMetrics(new Font(fontFamily.getName(), Font.PLAIN, 12));\r\n        int width = metrics.charWidth(MONOSPACE_CHARS[0]);\r\n        return width > 1 && IntStream.range(1, MONOSPACE_CHARS.length)\r\n            .noneMatch(i -> Math.abs(metrics.charWidth(MONOSPACE_CHARS[i]) - width) > 2);\r\n    }\r\n\r\n    public void setMonospacedOnly(boolean monospacedOnly) {\r\n        this.monospacedOnly = monospacedOnly;\r\n        fireContentsChanged(this, -1, -1);\r\n    }\r\n}\r\n","size_bytes":3150},"fontchooser/src/main/java/com/gabriel/fontchooser/FontContainer.java":{"content":"package com.gabriel.fontchooser;\r\n\r\nimport java.awt.Font;\r\n\r\n\r\npublic interface FontContainer {\r\n\r\n    String getSelectedStyle();\r\n\r\n    float getSelectedSize();\r\n\r\n    String getSelectedFamily();\r\n\r\n    Font getSelectedFont();\r\n\r\n    void setSelectedFont(Font font);\r\n\r\n    void setPreviewFont(Font font);\r\n\r\n    void setPreviewText(String text);\r\n\r\n    String getPreviewText();\r\n\r\n}\r\n","size_bytes":386},"draw/src/main/java/com/gabriel/draw/controller/DrawingController.java":{"content":"package com.gabriel.draw.controller;\r\n\r\nimport com.gabriel.draw.component.PropertySheet;\r\nimport com.gabriel.draw.model.*;\r\nimport com.gabriel.draw.model.Image;\r\nimport com.gabriel.draw.model.Rectangle;\r\nimport com.gabriel.draw.view.DrawingStatusPanel;\r\nimport com.gabriel.drawfx.DrawMode;\r\nimport com.gabriel.drawfx.model.Drawing;\r\nimport com.gabriel.drawfx.util.Normalizer;\r\nimport com.gabriel.drawfx.SelectionMode;\r\nimport com.gabriel.drawfx.ShapeMode;\r\nimport com.gabriel.draw.view.DrawingView;\r\nimport com.gabriel.drawfx.service.AppService;\r\nimport com.gabriel.drawfx.model.Shape;\r\nimport lombok.Setter;\r\n\r\nimport java.util.List;\r\nimport java.awt.*;\r\nimport java.awt.event.*;\r\n\r\npublic class DrawingController  implements MouseListener, MouseMotionListener, KeyListener {\r\n    Point start;\r\n    private Point end;\r\n\r\n    private final AppService appService;\r\n    private final Drawing drawing;\r\n\r\n    @Setter\r\n    private DrawingView drawingView;\r\n\r\n    @Setter\r\n    private DrawingStatusPanel drawingStatusPanel;\r\n\r\n    @Setter\r\n    private PropertySheet propertySheet;\r\n\r\n    private Shape currentShape = null;\r\n\r\n     public DrawingController(AppService appService, DrawingView drawingView){\r\n       this.appService = appService;\r\n       this.drawing = appService.getDrawing();\r\n       this.drawingView = drawingView;\r\n       drawingView.addMouseListener(this);\r\n       drawingView.addMouseMotionListener(this);\r\n     }\r\n    @Override\r\n    public void mouseClicked(MouseEvent e) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mousePressed(MouseEvent e) {\r\n        if(appService.getDrawMode() == DrawMode.Idle) {\r\n            start = e.getPoint();\r\n            ShapeMode currentShapeMode = appService.getShapeMode();\r\n            if(currentShapeMode == ShapeMode.Select) {\r\n                appService.search(start, !e.isControlDown());\r\n\r\n            }\r\n            else {\r\n                if(currentShape!=null){\r\n                    currentShape.setSelected(false);\r\n                }\r\n                switch (currentShapeMode) {\r\n                    case Line:\r\n                        currentShape = new Line(start);\r\n                        currentShape.setColor(appService.getColor());\r\n                        currentShape.getRendererService().render(drawingView.getGraphics(), currentShape, false);\r\n                        break;\r\n                    case Rectangle:\r\n                        currentShape = new Rectangle(start);\r\n                        currentShape.setColor(appService.getColor());\r\n                        currentShape.getRendererService().render(drawingView.getGraphics(), currentShape, false);\r\n                        break;\r\n                    case Text:\r\n                        currentShape = new Text(start);\r\n                        currentShape.setColor(appService.getColor());\r\n                        currentShape.setText(drawing.getText());\r\n                        currentShape.getRendererService().render(drawingView.getGraphics(), currentShape, true);\r\n                        appService.setDrawMode(DrawMode.MousePressed);\r\n                        break;\r\n                    case Ellipse:\r\n                        currentShape = new Ellipse(start);\r\n                        currentShape.setColor(appService.getColor());\r\n                        currentShape.getRendererService().render(drawingView.getGraphics(), currentShape, false);\r\n                        break;\r\n                    case Image:\r\n                        currentShape = new Image(start);\r\n                        currentShape.setImageFilename(drawing.getImageFilename());\r\n                        currentShape.setColor(appService.getColor());\r\n                        currentShape.setThickness(appService.getThickness());\r\n                }\r\n\r\n/*                if(currentShape!=null) {\r\n                    currentShape.getRendererService().render(drawingView.getGraphics(), currentShape, false);\r\n                }\r\n  */          }\r\n            appService.setDrawMode(DrawMode.MousePressed);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mouseReleased(MouseEvent e) {\r\n        end = e.getPoint();\r\n        if(appService.getDrawMode() == DrawMode.MousePressed) {\r\n            if (appService.getShapeMode() == ShapeMode.Select) {\r\n                Shape selectedShape = drawing.getSelectedShape();\r\n                if (selectedShape != null) {\r\n                    if (selectedShape.getSelectionMode() == SelectionMode.None) {\r\n                        List<Shape> shapes = drawing.getShapes();\r\n                        for (Shape shape : shapes) {\r\n                            if (shape.isSelected()) {\r\n                                shape.getRendererService().render(drawingView.getGraphics(), shape, true);\r\n                                appService.move(shape, start, end);\r\n                                shape.getRendererService().render(drawingView.getGraphics(), shape, false);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        appService.scale(selectedShape, start, end);\r\n                        Normalizer.normalize(selectedShape);\r\n                        drawingView.repaint();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                currentShape.getRendererService().render(drawingView.getGraphics(), currentShape, true);\r\n                appService.scale(currentShape, end);\r\n                currentShape.setText(drawing.getText());\r\n                currentShape.setFont(drawing.getFont());\r\n                currentShape.setGradient(drawing.isGradient());\r\n                currentShape.setFill(drawing.getFill());\r\n                currentShape.setStartColor(drawing.getStartColor());\r\n                currentShape.setEndColor(drawing.getEndColor());\r\n                Normalizer.normalize(currentShape);\r\n                appService.create(currentShape);\r\n                currentShape.setSelected(true);\r\n//              currentShape.getRendererService().render(drawingView.getGraphics(), currentShape, false);\r\n                drawing.setSelectedShape(currentShape);\r\n                drawing.setShapeMode(ShapeMode.Select);\r\n                drawingView.repaint();\r\n            }\r\n            appService.setDrawMode(DrawMode.Idle);\r\n        }\r\n        propertySheet.populateTable(appService);\r\n        drawingView.repaint();\r\n    }\r\n\r\n    @Override\r\n    public void mouseEntered(MouseEvent e) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mouseExited(MouseEvent e) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void mouseDragged(MouseEvent e) {\r\n        if(appService.getDrawMode() == DrawMode.MousePressed) {\r\n            end = e.getPoint();\r\n            if(drawing.getShapeMode() == ShapeMode.Select){\r\n                Shape selectedShape = drawing.getSelectedShape();\r\n                if(selectedShape != null){\r\n                    if(selectedShape.getSelectionMode() == SelectionMode.None){\r\n                        List<Shape> shapes =drawing.getShapes();\r\n                        for(Shape shape : shapes) {\r\n                            if (shape.isSelected()) {\r\n                                shape.getRendererService().render(drawingView.getGraphics(), shape, true);\r\n                                appService.move(shape, start, end);\r\n                                shape.getRendererService().render(drawingView.getGraphics(), shape, true);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        appService.scale(selectedShape, start, end);\r\n                    }\r\n                }\r\n                start = end;\r\n\r\n            }\r\n            else {\r\n                currentShape.getRendererService().render(drawingView.getGraphics(), currentShape, true);\r\n                appService.scale(currentShape, end);\r\n                currentShape.getRendererService().render(drawingView.getGraphics(), currentShape, true);\r\n            }\r\n       }\r\n    }\r\n\r\n    @Override\r\n    public void mouseMoved(MouseEvent e) {\r\n        drawingStatusPanel.setPoint(e.getPoint());\r\n    }\r\n\r\n    @Override\r\n    public void keyTyped(KeyEvent e) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void keyPressed(KeyEvent e) {\r\n//        if (e.getKeyCode() == KeyEvent.VK_DELETE) {\r\n//          appService.delete();\r\n//        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void keyReleased(KeyEvent e) {\r\n\r\n    }\r\n}\r\n","size_bytes":8406},"draw/src/main/java/com/gabriel/draw/service/DrawingCommandAppService.java":{"content":"package com.gabriel.draw.service;\r\n\r\nimport com.gabriel.draw.command.AddShapeCommand;\r\nimport com.gabriel.draw.command.DeleteShapeCommand;\nimport com.gabriel.draw.command.MoveShapeCommand;\nimport com.gabriel.draw.command.ScaleShapeCommand;\nimport com.gabriel.draw.command.SetDrawModeCommand;\r\nimport com.gabriel.drawfx.DrawMode;\r\nimport com.gabriel.drawfx.ShapeMode;\r\nimport com.gabriel.drawfx.command.Command;\r\nimport com.gabriel.drawfx.command.CommandService;\r\nimport com.gabriel.drawfx.model.Drawing;\r\nimport com.gabriel.drawfx.model.Shape;\r\nimport com.gabriel.drawfx.service.AppService;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.List;\r\n\r\npublic class DrawingCommandAppService implements AppService {\r\n    public AppService appService;\r\n    protected static AppService drawingCommandAppService = null;\r\n\r\n    protected DrawingCommandAppService(AppService appService){\r\n        this.appService = appService;\r\n    }\r\n\r\n    public static AppService getInstance(){\r\n        return drawingCommandAppService;\r\n    }\r\n\r\n    public static AppService getInstance(AppService appService){\r\n        if(drawingCommandAppService == null){\r\n            drawingCommandAppService = new DrawingCommandAppService(appService);\r\n        };\r\n        return drawingCommandAppService;\r\n    }\r\n\r\n    @Override\r\n    public void undo() {\r\n        CommandService.undo();;\r\n    }\r\n\r\n    @Override\r\n    public void redo() {\r\n        CommandService.redo();\r\n    }\r\n\r\n    @Override\r\n    public ShapeMode getShapeMode() {\r\n        return appService.getShapeMode();\r\n    }\r\n\r\n    @Override\r\n    public void setShapeMode(ShapeMode shapeMode) {\r\n        appService.setShapeMode(shapeMode);\r\n    }\r\n\r\n    @Override\r\n    public DrawMode getDrawMode() {\r\n        return appService.getDrawMode();\r\n    }\r\n\r\n    @Override\r\n    public void setDrawMode(DrawMode drawMode) {\r\n        Command command = new SetDrawModeCommand(appService, drawMode);\r\n        CommandService.ExecuteCommand(command);\r\n    }\r\n\r\n    @Override\r\n    public Color getColor() {\r\n        return appService.getColor();\r\n    }\r\n\r\n    @Override\r\n    public void setColor(Color color) {\r\n        appService.setColor(color);\r\n    }\r\n\r\n    @Override\r\n    public Color getFill() {\r\n        return appService.getFill();\r\n    }\r\n\r\n    @Override\r\n    public void setFill(Color color) {\r\n        appService.setFill(color);\r\n    }\r\n\r\n    @Override\r\n    public void move(Shape shape, Point start, Point end) {\n        Command command = new MoveShapeCommand(appService, shape, start, end);\n        CommandService.ExecuteCommand(command);\n    }\n\r\n    @Override\r\n    public void move(Point start, Point end) {\r\n        appService.move(start, end);\r\n    }\r\n\r\n    @Override\r\n    public void scale(Point start, Point end) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void scale(Shape shape, Point start, Point end) {\n        Command command = new ScaleShapeCommand(appService, shape, start, end);\n        CommandService.ExecuteCommand(command);\n    }\n\r\n    @Override\r\n    public void scale(Shape shape, Point end) {\r\n        appService.scale(shape,end);\r\n    }\r\n\r\n    @Override\r\n    public void create(Shape shape) {\r\n        Command command = new AddShapeCommand(appService, shape);\r\n        CommandService.ExecuteCommand(command);\r\n    }\r\n\r\n    @Override\r\n    public void delete(Shape shape) {\n        Command command = new DeleteShapeCommand(appService, shape);\n        CommandService.ExecuteCommand(command);\n    }\n\r\n    @Override\r\n    public void close() {\r\n        appService.close();\r\n    }\r\n\r\n    @Override\r\n    public Drawing getDrawing() {\r\n        return appService.getDrawing();\r\n    }\r\n\r\n    @Override\r\n    public void setDrawing(Drawing drawing) {\r\n        appService.setDrawing(drawing);\r\n    }\r\n\r\n    @Override\r\n    public int getSearchRadius() {\r\n        return appService.getSearchRadius();\r\n    }\r\n\r\n    @Override\r\n    public void setSearchRadius(int radius) {\r\n        appService.setSearchRadius(radius);\r\n    }\r\n\r\n    @Override\r\n    public void search(Point p) {\r\n        appService.search(p);\r\n    }\r\n\r\n    @Override\r\n    public void search(Point p, boolean single) {\r\n        appService.search(p, single);\r\n    }\r\n\r\n    @Override\r\n    public void open(String filename) {\r\n        appService.open(filename);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void save() {\r\n        appService.save();;\r\n    }\r\n\r\n    @Override\r\n    public String getFileName() {\r\n        return appService.getFileName();\r\n    }\r\n\r\n    @Override\r\n    public void select(Shape selectedShape) {\r\n        appService.select(selectedShape);\r\n    }\r\n\r\n    @Override\r\n    public void unSelect(Shape selectedShape) {\r\n        appService.unSelect(selectedShape);\r\n    }\r\n\r\n    @Override\r\n    public Shape getSelectedShape() {\r\n        return appService.getSelectedShape();\r\n    }\r\n\r\n    @Override\r\n    public List<Shape> getSelectedShapes() {\r\n        return appService.getSelectedShapes();\r\n    }\r\n\r\n    @Override\r\n    public void clearSelections(){\r\n        appService.clearSelections();;\r\n    }\r\n\r\n    @Override\r\n    public void setThickness(int thickness) {\r\n        appService.setThickness(thickness);\r\n    }\r\n\r\n    @Override\r\n    public int getThickness() {\r\n        return appService.getThickness();\r\n    }\r\n\r\n    @Override\r\n    public void setXLocation(int xLocation) {\r\n        appService.setXLocation(xLocation);\r\n    }\r\n\r\n    @Override\r\n    public int getXLocation() {\r\n        return appService.getXLocation();\r\n    }\r\n\r\n    @Override\r\n    public void setYLocation(int yLocation) {\r\n        appService.setYLocation(yLocation);\r\n    }\r\n\r\n    @Override\r\n    public int getYLocation() {\r\n        return appService.getYLocation();\r\n    }\r\n\r\n    @Override\r\n    public void setWidth(int width) {\r\n        appService.setWidth(width);\r\n    }\r\n\r\n    @Override\r\n    public int getWidth() {\r\n        return appService.getWidth();\r\n    }\r\n\r\n    @Override\r\n    public void setHeight(int height) {\r\n        appService.setHeight(height);\r\n    }\r\n\r\n    @Override\r\n    public int getHeight() {\r\n        return appService.getHeight();\r\n    }\r\n\r\n    @Override\r\n    public void setImageFilename(String imageFilename) {\r\n        appService.setImageFilename(imageFilename);\r\n    }\r\n\r\n    @Override\r\n    public String getImageFilename() {\r\n        return appService.getImageFilename();\r\n    }\r\n\r\n    @Override\r\n    public void setText(String text) {\r\n        appService.setText(text);\r\n    }\r\n\r\n    @Override\r\n    public void setFontSize(int fontSize) {\r\n        appService.setFontSize(fontSize);\r\n    }\r\n\r\n    @Override\r\n    public Color getStartColor() {\r\n        return appService.getStartColor();\r\n    }\r\n\r\n    @Override\r\n    public void setStartColor(Color color) {\r\n        appService.setStartColor(color);\r\n    }\r\n\r\n    @Override\r\n    public Color getEndColor() {\r\n        return appService.getEndColor();\r\n    }\r\n\r\n    @Override\r\n    public void setEndColor(Color color) {\r\n        appService.setEndColor(color);\r\n    }\r\n\r\n    @Override\r\n    public boolean isGradient() {\r\n        return appService.isGradient();\r\n    }\r\n\r\n    @Override\r\n    public void setIsGradient(boolean yes) {\r\n        appService.setIsGradient(yes);\r\n    }\r\n\r\n    @Override\r\n    public boolean isVisible() {\r\n        return appService.isVisible();\r\n    }\r\n\r\n    @Override\r\n    public void setIsVisible(boolean yes) {\r\n        appService.setIsVisible(yes);\r\n    }\r\n\r\n    @Override\r\n    public void delete() {\r\n        appService.delete();\r\n    }\r\n\r\n    @Override\r\n    public void setStartX(int startx) {\r\n        appService.setStartX(startx);\r\n    }\r\n\r\n    @Override\r\n    public int getStartX() {\r\n        return appService.getStartX();\r\n    }\r\n\r\n    @Override\r\n    public void setStarty(int starty) {\r\n        appService.setStarty(starty);\r\n    }\r\n\r\n    @Override\r\n    public int getStarty() {\r\n        return appService.getStarty();\r\n    }\r\n\r\n    @Override\r\n    public void setEndx(int endx) {\r\n        appService.setEndx(endx);\r\n    }\r\n\r\n    @Override\r\n    public int getEndx() {\r\n        return appService.getEndx();\r\n    }\r\n\r\n    @Override\r\n    public void setEndy(int endy) {\r\n        appService.setEndy(endy);\r\n    }\r\n\r\n    @Override\r\n    public int getEndy() {\r\n        return appService.getEndy();\r\n    }\r\n\r\n    @Override\r\n    public String getText() {\r\n        return appService.getText();\r\n    }\r\n\r\n    @Override\r\n    public Font getFont() {\r\n        return appService.getFont();\r\n    }\r\n\r\n    @Override\r\n    public void setFont(Font font) {\r\n        appService.setFont(font);\r\n    }\r\n}\r\n","size_bytes":8478},"prop/src/main/java/com/gabriel/property/property/FloatProperty.java":{"content":"package com.gabriel.property.property;\r\n\r\nimport com.gabriel.property.validator.Validator;\r\nimport com.gabriel.property.validator.floatNumber.FloatValidator;\r\n\r\npublic class FloatProperty extends AbstractProperty<Float> {\r\n\r\n    public FloatProperty(String name, Float value) {\r\n        super(name, value, new FloatValidator());\r\n    }\r\n\r\n    public FloatProperty(String name, Float value, Validator validator) {\r\n        super(name, value, validator);\r\n    }\r\n}\r\n","size_bytes":464},"prop/src/main/java/com/gabriel/property/property/Property.java":{"content":"package com.gabriel.property.property;\r\n\r\nimport com.gabriel.property.validator.Validator;\r\n\r\n/**\r\n * Property interface\r\n *\r\n * @param <T> Type of the property\r\n */\r\npublic interface Property<T> {\r\n\r\n    /**\r\n     * @return The (display) name of the property\r\n     */\r\n    public String getName();\r\n\r\n    /**\r\n     * @return The actual value of the property\r\n     */\r\n    public T getValue();\r\n\r\n    /**\r\n     * Sets the value of the property\r\n     *\r\n     * @param value The incoming value of the desired type\r\n     */\r\n    public void setValue(T value);\r\n\r\n    /**\r\n     * @return A non-null validator for this property which should at least check whether\r\n     * the type is correct\r\n     */\r\n    public Validator getValidator();\r\n}\r\n","size_bytes":738},"drawfx/src/main/java/com/gabriel/drawfx/ShapeMode.java":{"content":"package com.gabriel.drawfx;\r\n\r\npublic enum ShapeMode {\r\n    Line,\r\n    Rectangle,\r\n    Ellipse,\r\n    Image,\r\n    Text,\r\n    Select\r\n}\r\n","size_bytes":135},"prop/src/main/java/com/gabriel/property/event/PropertyEventListener.java":{"content":"package com.gabriel.property.event;\r\n\r\nimport com.gabriel.property.property.Property;\r\n\r\n/**\r\n * Event listener interface\r\n * <p>\r\n * Objects implementing this interface can subscribe to events coming from the\r\n * property sheet.\r\n */\r\npublic interface PropertyEventListener {\r\n\r\n    /**\r\n     * Fired when a property is successfully updated\r\n     *\r\n     * @param property Property\r\n     */\r\n    public void onPropertyUpdated(Property property);\r\n\r\n    /**\r\n     * Fired when a property is successfully added to the sheet\r\n     *\r\n     * @param property Property\r\n     */\r\n    public void onPropertyAdded(Property property);\r\n}\r\n","size_bytes":630},"drawfx/src/main/java/com/gabriel/drawfx/model/Drawing.java":{"content":"package com.gabriel.drawfx.model;\r\n\r\nimport com.gabriel.drawfx.DrawMode;\r\nimport com.gabriel.drawfx.ShapeMode;\r\nimport lombok.Data;\r\n\r\nimport java.awt.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n@Data\r\npublic class Drawing {\r\n    Point location;\r\n    int id;\r\n    private String filename = null;\r\n    private String imageFilename = null;\r\n    private Color color;\r\n    private Color fill;\r\n\r\n    private Color startColor = Color.WHITE;\r\n    private Color endColor = Color.RED;\r\n    boolean isGradient = false;\r\n    boolean visible = false;\r\n    Point start;\r\n    Point end;\r\n    int r;\r\n    int thickness  = 1;\r\n    private ShapeMode shapeMode = ShapeMode.Rectangle;\r\n    private DrawMode drawMode = DrawMode.Idle;\r\n    private int SearchRadius = 5;\r\n    private Font font = null;\r\n    int width = 0;\r\n    int height = 0;\r\n    List<Shape> shapes;\r\n    private Shape selectedShape = null;\r\n    private String text = \"Default text\";\r\n    public Drawing(){\r\n        location  = new Point(0,0);\r\n        color = Color.RED;\r\n        fill = Color.WHITE;\r\n        font = new Font(\"Serif\", Font.BOLD, 24);\r\n        shapes = new ArrayList<>();\r\n        this.start = new Point(0,0);\r\n        this.end = new Point(100,0);\r\n    }\r\n}\r\n","size_bytes":1235},"fontchooser/src/main/java/com/gabriel/fontchooser/panes/SizePane.java":{"content":"package com.gabriel.fontchooser.panes;\r\n\r\nimport java.awt.Dimension;\r\nimport java.awt.GridBagConstraints;\r\nimport java.awt.GridBagLayout;\r\nimport java.awt.Insets;\r\nimport javax.swing.DefaultListCellRenderer;\r\nimport javax.swing.DefaultListModel;\r\nimport javax.swing.JFormattedTextField;\r\nimport javax.swing.JList;\r\nimport javax.swing.JPanel;\r\nimport javax.swing.JScrollPane;\r\nimport javax.swing.JSpinner;\r\nimport javax.swing.ListSelectionModel;\r\nimport javax.swing.SpinnerNumberModel;\r\nimport javax.swing.SwingConstants;\r\nimport javax.swing.border.Border;\r\nimport javax.swing.event.ListSelectionListener;\r\nimport javax.swing.plaf.UIResource;\r\n\r\npublic class SizePane extends JPanel {\r\n\r\n    private static final long serialVersionUID = -2849151625253919609L;\r\n\r\n    private final JList<Integer> sizeList = new JList<>();\r\n\r\n    private final JSpinner sizeSpinner = new JSpinner();\r\n\r\n    private final DefaultListModel<Integer> sizeListModel = new DefaultListModel<>();\r\n\r\n    public SizePane() {\r\n        setLayout(new GridBagLayout());\r\n\r\n        initSizeListModel();\r\n        initSizeList();\r\n        initSizeSpinner();\r\n        addSizeSpinner();\r\n        addSizeScrollPane();\r\n    }\r\n\r\n    private void addSizeScrollPane() {\r\n        JScrollPane sizeScrollPane = new JScrollPane();\r\n        sizeScrollPane.setMinimumSize(new Dimension(50, 50));\r\n        sizeScrollPane.setPreferredSize(new Dimension(60, 100));\r\n        sizeScrollPane.setViewportView(sizeList);\r\n        GridBagConstraints gridBagConstraints = new GridBagConstraints();\r\n        gridBagConstraints.gridy = 1;\r\n        gridBagConstraints.fill = GridBagConstraints.VERTICAL;\r\n        gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n        gridBagConstraints.weighty = 1.0;\r\n        add(sizeScrollPane, gridBagConstraints);\r\n    }\r\n\r\n    private void addSizeSpinner() {\r\n        GridBagConstraints gridBagConstraints = new GridBagConstraints();\r\n        gridBagConstraints.gridy = 0;\r\n        gridBagConstraints.fill = GridBagConstraints.VERTICAL;\r\n        gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n        gridBagConstraints.insets = new Insets(0, 0, 6, 0);\r\n        add(sizeSpinner, gridBagConstraints);\r\n    }\r\n\r\n    private void initSizeSpinner() {\r\n        int spinnerHeight = (int) sizeSpinner.getPreferredSize().getHeight();\r\n        sizeSpinner.setPreferredSize(new Dimension(60, spinnerHeight));\r\n        sizeSpinner.setModel(new SpinnerNumberModel(12, 6, 128, 1));\r\n        setupSpinnerEditor(sizeSpinner);\r\n        sizeSpinner.addChangeListener(event -> {\r\n\r\n            Integer value = (Integer) sizeSpinner.getValue();\r\n            int index = ((DefaultListModel<Integer>) sizeList.getModel()).indexOf(value);\r\n            if (index > -1) {\r\n                sizeList.setSelectedValue(value, true);\r\n            } else {\r\n                sizeList.clearSelection();\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    private static void setupSpinnerEditor(JSpinner spinner) {\r\n        JSpinner.DefaultEditor editor = (JSpinner.DefaultEditor) spinner.getEditor();\r\n        JFormattedTextField textField = editor.getTextField();\r\n        Border border = new JScrollPane().getBorder();\r\n        if (border != null && !(border instanceof UIResource)) {\r\n            textField.setBorder(border);\r\n        }\r\n    }\r\n\r\n    private void initSizeList() {\r\n        sizeList.setModel(sizeListModel);\r\n        sizeList.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n        sizeList.addListSelectionListener(event -> {\r\n            if (!event.getValueIsAdjusting()) {\r\n                int index = ((DefaultListModel<Integer>) sizeList.getModel()).indexOf(sizeList.getSelectedValue());\r\n                if (index > -1) {\r\n                    sizeSpinner.setValue(sizeList.getSelectedValue());\r\n                }\r\n            }\r\n        });\r\n        DefaultListCellRenderer renderer = (DefaultListCellRenderer) sizeList.getCellRenderer();\r\n        renderer.setHorizontalAlignment(SwingConstants.RIGHT);\r\n    }\r\n\r\n    private void initSizeListModel() {\r\n        int size = 6;\r\n        int step = 1;\r\n        int ceil = 14;\r\n        do {\r\n            sizeListModel.addElement(size);\r\n            if (size == ceil) {\r\n                ceil += ceil;\r\n                step += step;\r\n            }\r\n            size += step;\r\n        } while (size <= 128);\r\n    }\r\n\r\n    @Override\r\n    public void updateUI() {\r\n        super.updateUI();\r\n        if (sizeSpinner != null) {\r\n            setupSpinnerEditor(sizeSpinner);\r\n        }\r\n    }\r\n\r\n    public void addListSelectionListener(ListSelectionListener listener) {\r\n        sizeList.addListSelectionListener(listener);\r\n    }\r\n\r\n    public void removeListSelectionListener(ListSelectionListener listener) {\r\n        sizeList.removeListSelectionListener(listener);\r\n    }\r\n\r\n    public void setSelectedSize(int size) {\r\n        if (sizeListModel.contains(size)) {\r\n            sizeList.setSelectedValue(size, true);\r\n        }\r\n        sizeSpinner.setValue(size);\r\n    }\r\n\r\n    public int getSelectedSize() {\r\n        if (!sizeList.isSelectionEmpty()) {\r\n            return sizeList.getSelectedValue();\r\n        }\r\n        return (Integer) sizeSpinner.getValue();\r\n    }\r\n\r\n}\r\n","size_bytes":5238},"draw/src/main/java/com/gabriel/draw/model/Text.java":{"content":"package com.gabriel.draw.model;\r\n\r\nimport java.awt.*;\r\n\r\nimport com.gabriel.draw.renderer.RectangleRenderer;\r\nimport com.gabriel.draw.renderer.TextRenderer;\r\nimport com.gabriel.drawfx.model.Shape;\r\nimport lombok.Data;\r\n\r\npublic class Text extends  Shape {\r\n\r\n    public Text(Point location) {\r\n        super(location);\r\n        this.setRendererService(new TextRenderer());\r\n    }\r\n\r\n    public Text(Point start, int width, int height) {\r\n        super(start, width, height);\r\n        this.setRendererService(new TextRenderer());\r\n    }\r\n}\r\n","size_bytes":540},"prop/src/main/java/com/gabriel/property/property/ActionProperty.java":{"content":"package com.gabriel.property.property;\r\n\r\nimport com.gabriel.property.action.Action;\r\nimport com.gabriel.property.validator.NullValidator;\r\n\r\n\r\npublic class ActionProperty extends AbstractProperty<Action> {\r\n\r\n    private String actionName;\r\n\r\n    public ActionProperty(String label, String actionName, Action action) {\r\n        super(label, action, new NullValidator());\r\n\r\n        this.actionName = actionName;\r\n    }\r\n\r\n    public String getActionName() {\r\n        return actionName;\r\n    }\r\n}\r\n","size_bytes":498},"draw/src/main/java/com/gabriel/draw/renderer/TextRenderer.java":{"content":"package com.gabriel.draw.renderer;\r\n\r\nimport com.gabriel.draw.model.Text;\r\nimport com.gabriel.drawfx.model.Shape;\r\nimport com.gabriel.drawfx.renderer.ShapeRenderer;\r\n\r\nimport java.awt.*;\r\n\r\npublic class TextRenderer extends ShapeRenderer {\r\n\r\n    @Override\r\n    public void render(Graphics g, Shape shape, boolean xor) {\r\n        if(!shape.isVisible()){\r\n            return;\r\n        }\r\n\r\n        Text text = (Text) shape;\r\n\r\n        int x = shape.getLocation().x;\r\n        int y = shape.getLocation().y;\r\n        int width = shape.getWidth() ;\r\n        int height = shape.getHeight();\r\n\r\n        Graphics2D g2 = (Graphics2D) g;\r\n        g2.setStroke(new BasicStroke(shape.getThickness()));\r\n\r\n        if (xor) {\r\n            g2.setXORMode(shape.getColor());\r\n            g2.drawRect(x, y, width, height);\r\n        } else {\r\n//            g2.setColor(shape.getColor());\r\n            GradientPaint gp = new GradientPaint(x, x, shape.getFill(), x+width, y+height, Color.BLACK);\r\n            g2.setPaint(gp);\r\n            g2.setFont(shape.getFont());\r\n            g2.drawString(shape.getText(), shape.getLocation().x, shape.getLocation().y);\r\n        }\r\n        super.render(g, shape, xor);\r\n    }\r\n}\r\n","size_bytes":1199},"drawfx/src/main/java/com/gabriel/drawfx/service/AppService.java":{"content":"package com.gabriel.drawfx.service;\r\n\r\nimport com.gabriel.drawfx.DrawMode;\r\nimport com.gabriel.drawfx.ShapeMode;\r\nimport com.gabriel.drawfx.model.Drawing;\r\nimport com.gabriel.drawfx.model.Shape;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.List;\r\n\r\npublic interface AppService {\r\n    void undo();\r\n    void redo();\r\n\r\n    ShapeMode getShapeMode();\r\n    void setShapeMode(ShapeMode shapeMode);\r\n\r\n    DrawMode getDrawMode();\r\n    void setDrawMode(DrawMode drawMode);\r\n\r\n    Color getColor();\r\n    void setColor(Color color);\r\n\r\n    Color getFill();\r\n    void setFill(Color color);\r\n\r\n    void move (Shape shape, Point Start, Point newLoc);\r\n    void move(Point start, Point newLoc) ;\r\n\r\n    void scale(Point start, Point end);\r\n    void scale(Shape shape, Point start, Point end);\r\n    void scale(Shape shape, Point end);\r\n\r\n    void create(Shape shape);\r\n    void delete(Shape shape);\r\n\r\n    void close();\r\n\r\n    Drawing getDrawing();\r\n    void setDrawing(Drawing drawing);\r\n\r\n    int getSearchRadius();\r\n    void setSearchRadius(int radius);\r\n\r\n    void search(Point p);\r\n    void search(Point p, boolean single);\r\n\r\n    void open(String filename);\r\n    void save();\r\n    String getFileName();\r\n\r\n    void select(Shape shape);\r\n    void unSelect(Shape shape);\r\n\r\n    Shape getSelectedShape();\r\n    List<Shape> getSelectedShapes();\r\n    void clearSelections();\r\n\r\n    void setThickness(int thickness);\r\n    int getThickness();\r\n\r\n    void setXLocation(int xLocation);\r\n    int getXLocation();\r\n    void setYLocation(int yLocation);\r\n    int getYLocation();\r\n\r\n    void setWidth(int width);\r\n    int getWidth();\r\n    void setHeight(int height);\r\n    int getHeight();\r\n\r\n    void setImageFilename(String filename);\r\n    String getImageFilename();\r\n    void setText(String text);\r\n\r\n    void setFontSize(int fontSize);\r\n\r\n    Color getStartColor();\r\n    void setStartColor( Color color);\r\n    Color getEndColor();\r\n    void setEndColor( Color color);\r\n    boolean isGradient();\r\n    void setIsGradient(boolean yes);\r\n    boolean isVisible();\r\n    void setIsVisible(boolean yes);\r\n    void delete();\r\n\r\n    void setStartX(int startx);\r\n    int  getStartX();\r\n    void setStarty(int starty);\r\n    int  getStarty();\r\n\r\n    void setEndx(int endxy);\r\n    int  getEndx();\r\n    void setEndy(int endy);\r\n    int  getEndy();\r\n\r\n    String getText();\r\n    Font getFont();\r\n    void setFont(Font font);\r\n}\r\n","size_bytes":2411},"draw/src/main/java/com/gabriel/draw/component/FileTypeFilter.java":{"content":"package com.gabriel.draw.component;\r\n\r\nimport javax.swing.filechooser.FileFilter;\r\nimport java.io.File;\r\n\r\npublic class FileTypeFilter extends FileFilter {\r\n    private String extension;\r\n    private String description;\r\n\r\n    public FileTypeFilter(String extension, String description) {\r\n        this.extension = extension;\r\n        this.description = description;\r\n    }\r\n\r\n    public boolean accept(File file) {\r\n        if (file.isDirectory()) {\r\n            return true;\r\n        }\r\n        return file.getName().endsWith(extension);\r\n    }\r\n\r\n    public String getDescription() {\r\n        return description + String.format(\" (*%s)\", extension);\r\n    }\r\n}\r\n","size_bytes":664},"prop/src/main/java/com/gabriel/property/validator/NullValidator.java":{"content":"package com.gabriel.property.validator;\r\n\r\n/**\r\n * Accepts all incoming objects\r\n */\r\npublic class NullValidator implements Validator {\r\n\r\n    @Override\r\n    public boolean validate(Object object) {\r\n        return true;\r\n    }\r\n}\r\n","size_bytes":232},"prop/src/main/java/com/gabriel/property/property/BooleanProperty.java":{"content":"package com.gabriel.property.property;\r\n\r\nimport com.gabriel.property.validator.NullValidator;\r\n\r\npublic class BooleanProperty extends AbstractProperty<Boolean> {\r\n\r\n    public BooleanProperty(String name, Boolean value) {\r\n        super(name, value, new NullValidator());\r\n    }\r\n}\r\n","size_bytes":284},"drawfx/src/main/java/com/gabriel/drawfx/DrawMode.java":{"content":"package com.gabriel.drawfx;\r\n\r\npublic enum DrawMode {\r\n    Idle,\r\n    MousePressed,\r\n    MouseReleased,\r\n}\r\n","size_bytes":108},"drawfx/src/main/java/com/gabriel/drawfx/command/CommandService.java":{"content":"package com.gabriel.drawfx.command;\r\n\r\nimport java.util.Stack;\r\npublic class CommandService {\r\n    static Stack<Command> undoStack = new Stack<Command>();\r\n    static Stack<Command> redoStack = new Stack<Command>();\r\n\r\n    public static void ExecuteCommand(Command command) {\r\n        command.execute();\r\n        undoStack.push(command);\r\n    }\r\n\r\n    public static void undo() {\r\n        if (undoStack.empty())\r\n            return;\r\n        Command command = undoStack.pop();\r\n        command.undo();\r\n        redoStack.push(command);\r\n    }\r\n\r\n    public static void redo() {\r\n        if (redoStack.empty())\r\n            return;\r\n        Command command = redoStack.pop();\r\n        command.execute();\r\n        undoStack.push(command);\r\n    }\r\n}","size_bytes":746},"draw/src/main/java/com/gabriel/draw/controller/DrawingWindowController.java":{"content":"package com.gabriel.draw.controller;\r\nimport com.gabriel.drawfx.service.AppService;\r\n\r\nimport java.awt.event.WindowEvent;\r\nimport java.awt.event.WindowFocusListener;\r\nimport java.awt.event.WindowListener;\r\nimport java.awt.event.WindowStateListener;\r\n\r\npublic class DrawingWindowController implements WindowListener,\r\n        WindowFocusListener,\r\n        WindowStateListener {\r\n\r\n    AppService appService;\r\n\r\n    public DrawingWindowController(AppService appService){\r\n        this.appService = appService;\r\n    }\r\n    @Override\r\n    public void windowGainedFocus(WindowEvent e) {\r\n   //\r\n    }\r\n\r\n    @Override\r\n    public void windowLostFocus(WindowEvent e) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void windowOpened(WindowEvent e) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void windowClosing(WindowEvent e) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void windowClosed(WindowEvent e) {\r\n        appService.close();\r\n    }\r\n\r\n    @Override\r\n    public void windowIconified(WindowEvent e) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void windowDeiconified(WindowEvent e) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void windowActivated(WindowEvent e) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void windowDeactivated(WindowEvent e) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void windowStateChanged(WindowEvent e) {\r\n\r\n    }\r\n}\r\n","size_bytes":1310},"prop/src/main/java/com/gabriel/property/cell/FloatCellComponent.java":{"content":"package com.gabriel.property.cell;\r\n\r\nimport com.gabriel.property.property.FloatProperty;\r\nimport com.gabriel.property.util.Keys;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.KeyEvent;\r\n\r\npublic class FloatCellComponent extends AbstractCellComponent {\r\n\r\n    private FloatProperty property;\r\n    private JTextField textField;\r\n\r\n    public FloatCellComponent(FloatProperty property) {\r\n        this.property = property;\r\n        this.textField = new JTextField();\r\n\r\n        textField.addKeyListener(new KeyAdapter());\r\n    }\r\n\r\n    @Override\r\n    public Component getTableCellEditorComponent(JTable jTable, Object o, boolean b, int i, int i1) {\r\n        textField.setText(property.getValue().toString());\r\n\r\n        return textField;\r\n    }\r\n\r\n    @Override\r\n    public Object getCellEditorValue() {\r\n        return property.getValue();\r\n    }\r\n\r\n    @Override\r\n    public Component getTableCellRendererComponent(JTable jTable, Object o, boolean b, boolean b1, int i, int i1) {\r\n        return new JLabel(property.getValue().toString());\r\n    }\r\n\r\n    private class KeyAdapter extends java.awt.event.KeyAdapter {\r\n        @Override\r\n        public void keyReleased(KeyEvent event) {\r\n            if (Keys.ignoreKey(event.getKeyCode())) {\r\n                return;\r\n            }\r\n\r\n            if (property.getValidator().validate(textField.getText())) {\r\n                property.setValue(Float.parseFloat(textField.getText()));\r\n                textField.setBackground(options.getBackgroundColor());\r\n                eventDispatcher.dispatchUpdateEvent(property);\r\n            } else {\r\n                textField.setBackground(options.getInvalidColor());\r\n            }\r\n        }\r\n    }\r\n}\r\n","size_bytes":1717},"draw/src/main/java/com/gabriel/draw/controller/PropertyEventListener.java":{"content":"package com.gabriel.draw.controller;\r\n\r\nimport com.gabriel.property.event.PropertyEventAdapter;\r\nimport com.gabriel.property.property.Property;\r\nimport com.gabriel.drawfx.service.AppService;\r\n\r\nimport java.awt.*;\r\n\r\npublic class PropertyEventListener extends PropertyEventAdapter {\r\n    private AppService appService;\r\n\r\n    public PropertyEventListener(AppService appService) {\r\n        this.appService = appService;\r\n    }\r\n\r\n    @Override\r\n    public void onPropertyUpdated(Property property) {\r\n        if (property.getName().equals(\"Fill color\")) {\r\n            appService.setFill((Color) property.getValue());\r\n        } else if (property.getName().equals(\"Fore color\")) {\r\n            appService.setColor ((Color) property.getValue());\r\n        } else if (property.getName().equals(\"X Location\")) {\r\n            appService.setXLocation((int) property.getValue());\r\n        } else if (property.getName().equals(\"Y Location\")) {\r\n            appService.setYLocation((int) property.getValue());\r\n        } else if (property.getName().equals(\"Width\")) {\r\n            appService.setWidth((int) property.getValue());\r\n        } else if (property.getName().equals(\"Height\")) {\r\n            appService.setHeight((int) property.getValue());\r\n        } else if (property.getName().equals(\"Line Thickness\")) {\r\n            appService.setThickness((int) property.getValue());\r\n        } else if (property.getName().equals(\"Text\")) {\r\n            appService.setText((String)property.getValue());\r\n        } else if (property.getName().equals(\"Font size\")) {\r\n            appService.setFontSize((int)property.getValue());\r\n        } else if (property.getName().equals(\"Font Family\")) {\r\n            appService.setFontSize((int) property.getValue());\r\n        } else if (property.getName().equals(\"Start color\")) {\r\n            appService.setStartColor((Color) property.getValue());\r\n        } else if (property.getName().equals(\"End color\")) {\r\n            appService.setEndColor((Color) property.getValue());\r\n        } else if (property.getName().equals(\"IsGradient\")) {\r\n            appService.setIsGradient((Boolean) property.getValue());\r\n        } else if (property.getName().equals(\"IsVisible\")) {\r\n            appService.setIsVisible((Boolean) property.getValue());\r\n        } else if (property.getName().equals(\"Start x\")) {\r\n            appService.setStartX((int) property.getValue());\r\n        } else if (property.getName().equals(\"Start y\")) {\r\n            appService.setStarty((int) property.getValue());\r\n        } else if (property.getName().equals(\"End x\")) {\r\n            appService.setEndx((int) property.getValue());\r\n        } else if (property.getName().equals(\"End y\")) {\r\n            appService.setEndy((int) property.getValue());\r\n        } else if (property.getName().equals(\"Font family\")) {\r\n            Font font = appService.getFont();\r\n            Font newFont = new Font((String) property.getValue(), font.getStyle(), font.getSize());\r\n            appService.setFont(newFont);\r\n        } else if (property.getName().equals(\"Font style\")) {\r\n            Font font = appService.getFont();\r\n            Font newFont = new Font( font.getFamily(), (int)property.getValue(), font.getSize());\r\n            appService.setFont(newFont);\r\n        } else if (property.getName().equals(\"Font size\")) {\r\n            Font font = appService.getFont();\r\n            Font newFont = new Font(font.getFamily(),font.getStyle(), (int) property.getValue());\r\n            appService.setFont(newFont);\r\n        }\r\n    }\r\n}","size_bytes":3522},"prop/src/main/java/com/gabriel/property/property/LongProperty.java":{"content":"package com.gabriel.property.property;\r\n\r\nimport com.gabriel.property.validator.Validator;\r\nimport com.gabriel.property.validator.longNumber.LongValidator;\r\n\r\npublic class LongProperty extends AbstractProperty<Long> {\r\n\r\n    public LongProperty(String name, Long value) {\r\n        super(name, value, new LongValidator());\r\n    }\r\n\r\n    public LongProperty(String name, Long value, Validator validator) {\r\n        super(name, value, validator);\r\n    }\r\n}\r\n","size_bytes":455},"prop/src/main/java/com/gabriel/property/validator/StringValidator.java":{"content":"package com.gabriel.property.validator;\r\n\r\n/**\r\n * Default string validator implementation\r\n */\r\npublic class StringValidator implements Validator {\r\n\r\n    protected String[] options;\r\n\r\n    public StringValidator() {\r\n        this.options = new String[]{};\r\n    }\r\n\r\n    public StringValidator(String[] options) {\r\n        this.options = options;\r\n    }\r\n\r\n    @Override\r\n    public boolean validate(Object object) {\r\n\r\n        String value = (String) object;\r\n\r\n        if (options.length > 0) {\r\n            for (String option : options) {\r\n                if (option.equals(value)) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","size_bytes":731},"batik/src/main/java/com/gabriel/batik/util/Transcoder.java":{"content":"package com.gabriel.batik.util;\r\nimport org.apache.batik.transcoder.TranscoderException;\r\nimport org.apache.batik.transcoder.TranscoderInput;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\n\r\npublic class Transcoder {\r\n    public static Icon transcode(String svgFile, int width, int height) throws FileNotFoundException, TranscoderException  {\r\n        // Example using Batik to convert SVG to BufferedImage\r\n        TranscoderInput input = new TranscoderInput(new FileInputStream(\"icon.svg\"));\r\n        BufferedImageTranscoder transcoder = new BufferedImageTranscoder(width, height);\r\n        transcoder.transcode(input, null);\r\n        BufferedImage image = transcoder.getBufferedImage();\r\n        Icon icon = new ImageIcon(image);\r\n        return icon;\r\n    }\r\n}\r\n","size_bytes":855},"fontchooser/src/main/java/com/gabriel/fontchooser/FontChooser.java":{"content":"package com.gabriel.fontchooser;\r\n\r\nimport java.awt.BorderLayout;\r\nimport java.awt.Font;\r\nimport java.awt.GridBagConstraints;\r\nimport java.awt.GridBagLayout;\r\nimport java.awt.Insets;\r\nimport java.util.ResourceBundle;\r\nimport javax.swing.JComponent;\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JPanel;\r\nimport javax.swing.event.ChangeListener;\r\nimport javax.swing.event.ListSelectionListener;\r\nimport com.gabriel.fontchooser.listeners.FamilyListSelectionListener;\r\nimport com.gabriel.fontchooser.listeners.SizeListSelectionListener;\r\nimport com.gabriel.fontchooser.listeners.StyleListSelectionListener;\r\nimport com.gabriel.fontchooser.model.DefaultFontSelectionModel;\r\nimport com.gabriel.fontchooser.model.FontSelectionModel;\r\nimport com.gabriel.fontchooser.panes.FamilyPane;\r\nimport com.gabriel.fontchooser.panes.PreviewPane;\r\nimport com.gabriel.fontchooser.panes.SizePane;\r\nimport com.gabriel.fontchooser.panes.StylePane;\r\nimport com.gabriel.fontchooser.util.ResourceBundleUtil;\r\n\r\n\r\npublic class FontChooser extends JPanel implements FontContainer {\r\n\r\n    private static final int DEFAULT_FONT_SIZE = 12;\r\n\r\n    private static final int DEFAULT_SPACE = 11;\r\n\r\n    private static final String SELECTION_MODEL_PROPERTY = \"selectionModel\";\r\n\r\n    //private static final long serialVersionUID = -1587096935072345808L;\r\n\r\n    private FontSelectionModel selectionModel;\r\n\r\n    private final ResourceBundle resourceBundle;\r\n\r\n    private final ResourceBundleUtil resourceBundleUtil;\r\n\r\n    private final JLabel familyLabel = new JLabel();\r\n\r\n    private final JLabel styleLabel = new JLabel();\r\n\r\n    private final JLabel sizeLabel = new JLabel();\r\n\r\n    private final JLabel previewLabel = new JLabel();\r\n\r\n    private final JPanel fontPanel = new JPanel();\r\n\r\n    private final JPanel previewPanel = new JPanel();\r\n\r\n    private final FamilyPane familyPane = new FamilyPane();\r\n\r\n    private final PreviewPane previewPane = new PreviewPane();\r\n\r\n    private final StylePane stylePane = new StylePane();\r\n\r\n    private final SizePane sizePane = new SizePane();\r\n\r\n    private final ListSelectionListener familyPaneListener = new FamilyListSelectionListener(this);\r\n\r\n    private final ListSelectionListener stylePaneListener = new StyleListSelectionListener(this);\r\n\r\n    private final ListSelectionListener sizePaneListener = new SizeListSelectionListener(this);\r\n\r\n    /**\r\n     * Creates a FontChooser pane with an initial default Font (Sans Serif, Plain, 12).\r\n     */\r\n    public FontChooser() {\r\n        this(new Font(Font.SANS_SERIF, Font.PLAIN, DEFAULT_FONT_SIZE));\r\n    }\r\n\r\n    /**\r\n     * Creates a FontChooser pane with the specified initial Font.\r\n     *\r\n     * @param initialFont the initial Font set in the chooser\r\n     */\r\n    public FontChooser(Font initialFont) {\r\n        this(new DefaultFontSelectionModel(initialFont));\r\n    }\r\n\r\n    /**\r\n     * Creates a FontChooser pane with the specified\r\n     * {@code FontSelectionModel}.\r\n     *\r\n     * @param model the {@code FontSelectionModel} to be used\r\n     */\r\n    public FontChooser(FontSelectionModel model) {\r\n        resourceBundle = ResourceBundle.getBundle(\"FontChooser\");\r\n        resourceBundleUtil = new ResourceBundleUtil(resourceBundle);\r\n        setSelectionModel(model);\r\n        setLayout(new BorderLayout());\r\n        addComponents();\r\n        initPanes();\r\n\r\n        previewPane.setPreviewFont(selectionModel.getSelectedFont());\r\n    }\r\n\r\n    /**\r\n     * Gets the current Font value from the FontChooser.\r\n     * By default, this delegates to the model.\r\n     *\r\n     * @return the current Font value of the FontChooser\r\n     */\r\n    @Override\r\n    public Font getSelectedFont() {\r\n        return selectionModel.getSelectedFont();\r\n    }\r\n\r\n    /**\r\n     * Sets the current font of the FontChooser to the specified font.\r\n     * The {@code FontSelectionModel} will fire a {@code ChangeEvent}\r\n     *\r\n     * @param font the font to be set in the font chooser\r\n     * @see JComponent#addPropertyChangeListener\r\n     */\r\n    @Override\r\n    public void setSelectedFont(Font font) {\r\n        familyPane.removeListSelectionListener(familyPaneListener);\r\n        stylePane.removeListSelectionListener(stylePaneListener);\r\n        sizePane.removeListSelectionListener(sizePaneListener);\r\n\r\n        selectionModel.setSelectedFont(font);\r\n\r\n        initPanes();\r\n    }\r\n\r\n    /**\r\n     * Returns the data model that handles Font selections.\r\n     *\r\n     * @return a {@code FontSelectionModel} object\r\n     */\r\n    public FontSelectionModel getSelectionModel() {\r\n        return selectionModel;\r\n    }\r\n\r\n    /**\r\n     * Sets the model containing the selected Font.\r\n     *\r\n     * @param newModel the new {@code FontSelectionModel} object\r\n     */\r\n    public void setSelectionModel(FontSelectionModel newModel) {\r\n        if (newModel == null) {\r\n            throw new IllegalArgumentException(\"New model must not be null\");\r\n        }\r\n        FontSelectionModel oldModel = selectionModel;\r\n        selectionModel = newModel;\r\n        selectionModel.addChangeListener(stylePane);\r\n        firePropertyChange(SELECTION_MODEL_PROPERTY, oldModel, newModel);\r\n    }\r\n\r\n    /**\r\n     * Adds a {@code ChangeListener} to the model.\r\n     *\r\n     * @param listener the {@code ChangeListener} to be added\r\n     */\r\n    public void addChangeListener(ChangeListener listener) {\r\n        selectionModel.addChangeListener(listener);\r\n    }\r\n\r\n    /**\r\n     * Removes a {@code ChangeListener} from the model.\r\n     *\r\n     * @param listener the {@code ChangeListener} to be removed\r\n     */\r\n    public void removeChangeListener(ChangeListener listener) {\r\n        selectionModel.removeChangeListener(listener);\r\n    }\r\n\r\n    private void initPanes() {\r\n        familyPane.setSelectedFamily(selectionModel.getSelectedFontFamily());\r\n        familyPane.addListSelectionListener(familyPaneListener);\r\n\r\n        stylePane.loadFamily(selectionModel.getSelectedFontFamily());\r\n        stylePane.setSelectedStyle(selectionModel.getSelectedFont());\r\n        stylePane.addListSelectionListener(stylePaneListener);\r\n\r\n        sizePane.addListSelectionListener(sizePaneListener);\r\n        sizePane.setSelectedSize(selectionModel.getSelectedFontSize());\r\n    }\r\n\r\n    private void addComponents() {\r\n        addFontPanel();\r\n        addFamilyLabel();\r\n        addStyleLabel();\r\n        addSizeLabel();\r\n        addFamilyPane();\r\n        addStylePane();\r\n        addSizePane();\r\n        addPreviewLabel();\r\n        addPreview();\r\n    }\r\n\r\n    private void addPreview() {\r\n        previewPanel.setLayout(new GridBagLayout());\r\n        GridBagConstraints gridBagConstraints = new GridBagConstraints();\r\n        gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n        gridBagConstraints.insets = new Insets(0, 0, 5, 0);\r\n        previewPanel.add(previewLabel, gridBagConstraints);\r\n        add(previewPanel, BorderLayout.PAGE_END);\r\n\r\n        GridBagConstraints gridBagConstraints2 = new GridBagConstraints();\r\n        gridBagConstraints2.gridy = 1;\r\n        gridBagConstraints2.fill = GridBagConstraints.HORIZONTAL;\r\n        gridBagConstraints2.weightx = 1.0;\r\n        previewPanel.add(previewPane, gridBagConstraints2);\r\n    }\r\n\r\n    private void addPreviewLabel() {\r\n        previewLabel.setDisplayedMnemonic(resourceBundleUtil.getFirstChar(\"font.preview.mnemonic\"));\r\n        previewLabel.setText(resourceBundle.getString(\"font.preview\"));\r\n    }\r\n\r\n    private void addSizePane() {\r\n        GridBagConstraints gridBagConstraints = new GridBagConstraints();\r\n        gridBagConstraints.gridy = 1;\r\n        gridBagConstraints.fill = GridBagConstraints.VERTICAL;\r\n        gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n        gridBagConstraints.weighty = 1.0;\r\n        gridBagConstraints.insets = new Insets(0, 0, DEFAULT_SPACE, 0);\r\n        fontPanel.add(sizePane, gridBagConstraints);\r\n    }\r\n\r\n    private void addStylePane() {\r\n        GridBagConstraints gridBagConstraints = new GridBagConstraints();\r\n        gridBagConstraints.gridy = 1;\r\n        gridBagConstraints.fill = GridBagConstraints.VERTICAL;\r\n        gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n        gridBagConstraints.weighty = 1.0;\r\n        gridBagConstraints.insets = new Insets(0, 0, DEFAULT_SPACE, DEFAULT_SPACE);\r\n        fontPanel.add(stylePane, gridBagConstraints);\r\n    }\r\n\r\n    private void addFamilyPane() {\r\n        GridBagConstraints gridBagConstraints = new GridBagConstraints();\r\n        gridBagConstraints.gridy = 1;\r\n        gridBagConstraints.fill = GridBagConstraints.BOTH;\r\n        gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n        gridBagConstraints.weightx = 1.0;\r\n        gridBagConstraints.weighty = 1.0;\r\n        gridBagConstraints.insets = new Insets(0, 0, DEFAULT_SPACE, DEFAULT_SPACE);\r\n        fontPanel.add(familyPane, gridBagConstraints);\r\n    }\r\n\r\n    private void addSizeLabel() {\r\n        sizeLabel.setLabelFor(sizePane);\r\n        sizeLabel.setDisplayedMnemonic(resourceBundleUtil.getFirstChar(\"font.size.mnemonic\"));\r\n        sizeLabel.setText(resourceBundle.getString(\"font.size\"));\r\n        GridBagConstraints gridBagConstraints = new GridBagConstraints();\r\n        gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n        gridBagConstraints.insets = new Insets(0, 0, 5, 0);\r\n        fontPanel.add(sizeLabel, gridBagConstraints);\r\n    }\r\n\r\n    private void addStyleLabel() {\r\n        styleLabel.setLabelFor(stylePane);\r\n        styleLabel.setDisplayedMnemonic(resourceBundleUtil.getFirstChar(\"font.style.mnemonic\"));\r\n        styleLabel.setText(resourceBundle.getString(\"font.style\"));\r\n        GridBagConstraints gridBagConstraints = new GridBagConstraints();\r\n        gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n        gridBagConstraints.insets = new Insets(0, 0, 5, DEFAULT_SPACE);\r\n        fontPanel.add(styleLabel, gridBagConstraints);\r\n    }\r\n\r\n    private void addFamilyLabel() {\r\n        familyLabel.setLabelFor(familyPane);\r\n        GridBagConstraints gridBagConstraints = new GridBagConstraints();\r\n        gridBagConstraints.anchor = GridBagConstraints.LINE_START;\r\n        gridBagConstraints.insets = new Insets(0, 0, 5, DEFAULT_SPACE);\r\n        fontPanel.add(familyLabel, gridBagConstraints);\r\n        familyLabel.setDisplayedMnemonic(resourceBundleUtil.getFirstChar(\"font.family.mnemonic\"));\r\n        familyLabel.setText(resourceBundle.getString(\"font.family\"));\r\n    }\r\n\r\n    private void addFontPanel() {\r\n        fontPanel.setLayout(new GridBagLayout());\r\n        add(fontPanel);\r\n    }\r\n\r\n    @Override\r\n    public String getSelectedStyle() {\r\n        return stylePane.getSelectedStyle().getName();\r\n    }\r\n\r\n    @Override\r\n    public float getSelectedSize() {\r\n        return sizePane.getSelectedSize();\r\n    }\r\n\r\n    @Override\r\n    public String getSelectedFamily() {\r\n        return familyPane.getSelectedFamily();\r\n    }\r\n\r\n    @Override\r\n    public void setPreviewFont(Font font) {\r\n        previewPane.setPreviewFont(font);\r\n    }\r\n\r\n    @Override\r\n    public String getPreviewText(){\r\n        return  previewPane.getPreviewText();\r\n    }\r\n\r\n    @Override\r\n    public void setPreviewText(String text){\r\n        previewPane.setPreviewText(text);\r\n    }\r\n\r\n}\r\n","size_bytes":11232},"fontchooser/src/main/java/com/gabriel/fontchooser/panes/ToolTipCellRenderer.java":{"content":"package com.gabriel.fontchooser.panes;\r\n\r\nimport java.awt.Component;\r\nimport javax.swing.DefaultListCellRenderer;\r\nimport javax.swing.JComponent;\r\nimport javax.swing.JList;\r\n\r\npublic class ToolTipCellRenderer extends DefaultListCellRenderer {\r\n\r\n    private static final long serialVersionUID = 6420358947653897358L;\r\n\r\n    @Override\r\n    public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {\r\n        JComponent listCellRendererComponent = (JComponent) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);\r\n        listCellRendererComponent.setToolTipText(value.toString());\r\n        return listCellRendererComponent;\r\n    }\r\n}\r\n","size_bytes":735},"prop/src/main/java/com/gabriel/property/cell/ColorCellComponent.java":{"content":"package com.gabriel.property.cell;\r\n\r\nimport com.gabriel.property.property.ColorProperty;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\n\r\npublic class ColorCellComponent extends AbstractCellComponent {\r\n\r\n    private ColorProperty property;\r\n    private JButton delegate;\r\n\r\n    public ColorCellComponent(ColorProperty property) {\r\n        this.property = property;\r\n        this.delegate = new JButton() {\r\n            @Override\r\n            protected void paintComponent(Graphics g) {\r\n                g.setColor(ColorCellComponent.this.property.getValue());\r\n                g.fillRect(0, 0, this.getWidth(), this.getHeight());\r\n            }\r\n        };\r\n\r\n        delegate.addActionListener(e -> {\r\n            // Blocking call to select a colour\r\n            Color color = JColorChooser.showDialog(delegate, \"Choose colour\", property.getValue());\r\n            property.setValue(color);\r\n            eventDispatcher.dispatchUpdateEvent(property);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public Component getTableCellEditorComponent(JTable jTable, Object o, boolean b, int i, int i1) {\r\n        return delegate;\r\n    }\r\n\r\n    @Override\r\n    public Object getCellEditorValue() {\r\n        return property.getValue();\r\n    }\r\n\r\n    @Override\r\n    public Component getTableCellRendererComponent(JTable jTable, Object o, boolean b, boolean b1, int i, int i1) {\r\n        return delegate;\r\n    }\r\n}\r\n","size_bytes":1399},"prop/src/main/java/com/gabriel/property/validator/doubleNumber/DoubleZeroPolicyValidator.java":{"content":"package com.gabriel.property.validator.doubleNumber;\r\n\r\nimport com.gabriel.property.validator.Validator;\r\n\r\npublic class DoubleZeroPolicyValidator implements Validator {\r\n\r\n    protected boolean allowZero;\r\n\r\n    public DoubleZeroPolicyValidator(boolean allowZero) {\r\n        this.allowZero = allowZero;\r\n    }\r\n\r\n    public DoubleZeroPolicyValidator() {\r\n        this(true);\r\n    }\r\n\r\n    @Override\r\n    public boolean validate(Object object) {\r\n        double value = Double.parseDouble((String) object);\r\n\r\n        return value != 0 || allowZero;\r\n    }\r\n}\r\n","size_bytes":561},"draw/src/main/java/com/gabriel/draw/controller/ActionController.java":{"content":"package com.gabriel.draw.controller;\r\nimport com.gabriel.draw.service.ImageFileService;\r\nimport com.gabriel.draw.service.XmlDocumentService;\r\nimport com.gabriel.drawfx.ActionCommand;\r\nimport com.gabriel.drawfx.ShapeMode;\r\nimport com.gabriel.drawfx.model.Drawing;\r\nimport com.gabriel.drawfx.service.AppService;\r\nimport lombok.Setter;\r\nimport com.gabriel.fontchooser.FontDialog;\r\n\r\nimport javax.swing.*;\r\nimport javax.swing.filechooser.FileFilter;\r\nimport javax.swing.filechooser.FileSystemView;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.io.File;\r\n\r\npublic class ActionController implements ActionListener {\r\n    AppService appService;\r\n    ImageFileService imageFileService;\r\n\r\n    @Setter\r\n    Component component;\r\n\r\n    Drawing drawing;\r\n\r\n    @Setter\r\n    JFrame frame;\r\n\r\n    public  ActionController(AppService appService){\r\n        this.appService = appService;\r\n        drawing = appService.getDrawing();\r\n        imageFileService = new ImageFileService();\r\n   }\r\n\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n        String cmd = e.getActionCommand();\r\n        if (ActionCommand.UNDO.equals(cmd)) {\r\n            appService.undo();\r\n        }\r\n        if (ActionCommand.REDO.equals(cmd)) {\r\n            appService.redo();\r\n        } else if (ActionCommand.LINE.equals(cmd)) {\r\n            appService.setShapeMode(ShapeMode.Line);\r\n        } else if (ActionCommand.RECT.equals(cmd)) {\r\n            appService.setShapeMode(ShapeMode.Rectangle);\r\n        } else if (ActionCommand.ELLIPSE.equals(cmd)) {\r\n            appService.setShapeMode(ShapeMode.Ellipse);\r\n        } else if (ActionCommand.IMAGE.equals(cmd)) { // third button\r\n            if(drawing.getImageFilename() == null) {\r\n                imageFileService.setImage(drawing);\r\n            }\r\n            appService.setShapeMode(ShapeMode.Image);\r\n        } else if (ActionCommand.IMAGEFILE.equals(cmd)) { // third button\r\n            imageFileService.setImage(drawing);\r\n        } else if (ActionCommand.COLOR.equals(cmd)) {\r\n            Color color = JColorChooser.showDialog(component, \"Select color\", appService.getColor());\r\n            appService.setColor(color);\r\n        } else if (ActionCommand.FONT.equals(cmd)) {\r\n            getFont();\r\n        } else if (ActionCommand.TEXT.equals(cmd)) {\r\n            if(drawing.getFont() == null) {\r\n                getFont();\r\n            }\r\n            appService.setShapeMode(ShapeMode.Text);\r\n        } else if (ActionCommand.FILL.equals(cmd)) {\r\n            Color color = JColorChooser.showDialog(component, \"Select color\", appService.getColor());\r\n            Color newColor = new Color(color.getRed(),color.getGreen(), color.getBlue(), color.getAlpha() );\r\n            appService.setFill(newColor );\r\n        } else if (ActionCommand.SAVEAS.equals(cmd)) {\r\n            FileDialog fDialog = new FileDialog(frame, \"Save\", FileDialog.SAVE);\r\n            fDialog.setFile(drawing.getFilename());\r\n            fDialog.setVisible(true);\r\n            String path = fDialog.getDirectory() + fDialog.getFile();\r\n            File f = new File(path);\r\n            drawing.setFilename(path);\r\n            appService.save();\r\n        } else if (ActionCommand.SELECT.equals(cmd)) {\r\n            appService.clearSelections();\r\n            appService.setShapeMode(ShapeMode.Select);\r\n        } else if (ActionCommand.OPEN.equals(cmd)) {\r\n            JFileChooser fileChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());\r\n            fileChooser.addChoosableFileFilter(new FileFilter() {\r\n                public String getDescription() {\r\n                    return \"Xml Documents (*.xml)\";\r\n                }\r\n\r\n                public boolean accept(File f) {\r\n                    if (f.isDirectory()) {\r\n                        return true;\r\n                    } else {\r\n                        return f.getName().toLowerCase().endsWith(\".xml\");\r\n                    }\r\n                }\r\n            });\r\n            int result = fileChooser.showOpenDialog(null);\r\n            if (result == JFileChooser.OPEN_DIALOG) {\r\n                // set the label to the path of the selected file\r\n                String filename = fileChooser.getSelectedFile().getAbsolutePath();\r\n                drawing.setFilename(filename);\r\n                XmlDocumentService docService = new XmlDocumentService(drawing);\r\n                docService.open();\r\n                frame.setTitle(filename);\r\n\r\n            }\r\n            component.repaint();\r\n        } else if (ActionCommand.NEW.equals(cmd)) {\r\n            if (!drawing.getShapes().isEmpty()) {\r\n                int result = JOptionPane.showConfirmDialog(\r\n                        null,\r\n                        \"Do you want to continue and discard your changes?\",\r\n                        \"Confirmation\",\r\n                        JOptionPane.YES_NO_OPTION\r\n                );\r\n                if (result == JOptionPane.YES_OPTION) {\r\n                    drawing.getShapes().clear();\r\n                }\r\n                component.repaint();\r\n            }\r\n        } else if (ActionCommand.SAVE.equals(cmd)) {\r\n            String filename = drawing.getFilename();\r\n            if (filename == null) {\r\n                JFileChooser fileChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());\r\n                fileChooser.addChoosableFileFilter(new FileFilter() {\r\n                    public String getDescription() {\r\n                        return \"Xml Documents (*.xml)\";\r\n                    }\r\n\r\n                    public boolean accept(File f) {\r\n                        if (f.isDirectory()) {\r\n                            return true;\r\n                        } else {\r\n                            return f.getName().toLowerCase().endsWith(\".xml\");\r\n                        }\r\n                    }\r\n                });\r\n                int result = fileChooser.showSaveDialog(null);\r\n                if (result == JFileChooser.APPROVE_OPTION) {\r\n                    // set the label to the path of the selected file\r\n                    filename = fileChooser.getSelectedFile().getAbsolutePath();\r\n                    drawing.setFilename(filename);\r\n                    frame.setTitle(filename);\r\n                }\r\n            }\r\n            XmlDocumentService docService = new XmlDocumentService(drawing);\r\n            docService.save();\r\n\r\n            // TODO Insert the handler for the File menuitems.\r\n\r\n        }\r\n    }\r\n    void getFont() {\r\n        FontDialog dialog = new FontDialog((Frame) null, \"Font Dialog Example\", true);\r\n        dialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\r\n        dialog.setFont(drawing.getFont());\r\n        dialog.setPreviewText(drawing.getText());\r\n        dialog.setVisible(true);\r\n        if (!dialog.isCancelSelected()) {\r\n            Font font = dialog.getSelectedFont();\r\n            drawing.setFont(dialog.getSelectedFont());\r\n            drawing.setText(dialog.getPreviewText());\r\n            System.out.println(\"Selected font is: \" + dialog);\r\n        }\r\n        dialog.setVisible(false);\r\n    }\r\n\r\n}\r\n","size_bytes":7165},"drawfx/src/main/java/com/gabriel/drawfx/service/SearchService.java":{"content":"package com.gabriel.drawfx.service;\r\n\r\nimport com.gabriel.drawfx.SelectionMode;\r\nimport com.gabriel.drawfx.model.Drawing;\r\nimport com.gabriel.drawfx.model.Shape;\r\n\r\nimport java.awt.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\npublic final class SearchService {\r\n\r\n    public Shape getSelectedShape(Drawing drawing){\r\n        return drawing.getSelectedShape();\r\n    }\r\n\r\n    public void search(AppService appService, Point p) {\r\n        search(appService, p,true);\r\n    }\r\n\r\n    public void search(AppService appService, Point p, boolean single) {\r\n        Drawing drawing = appService.getDrawing();\r\n        drawing.setSelectedShape(null);\r\n        List<Shape> shapes = drawing.getShapes();\r\n        int r = appService.getSearchRadius();\r\n\r\n        for (Shape shape : shapes) {\r\n            Point loc = shape.getLocation();\r\n            int width = shape.getWidth();\r\n            int height = shape.getHeight();\r\n            if (p.x > loc.x - r && p.x < loc.x + width + r && p.y > loc.y - r && p.y < loc.y + height + r) {\r\n                if (found(shape, p, loc.x, loc.y, r)) {\r\n                    shape.setSelectionMode(SelectionMode.UpperLeft);\r\n                } else if (found(shape, p, loc.x, loc.y + height / 2, r)) {\r\n                    shape.setSelectionMode(SelectionMode.MiddleLeft);\r\n                } else if (found(shape, p, loc.x, loc.y + height, r)) {\r\n                    shape.setSelectionMode(SelectionMode.LowerLeft);\r\n                } else if (found(shape, p, loc.x + width / 2, loc.y, r)) {\r\n                    shape.setSelectionMode(SelectionMode.MiddleTop);\r\n                } else if (found(shape, p, loc.x + width, loc.y, r)) {\r\n                    shape.setSelectionMode(SelectionMode.UpperRight);\r\n                } else if (found(shape, p, loc.x + width, loc.y + height / 2, r)) {\r\n                    shape.setSelectionMode(SelectionMode.MiddleRight);\r\n                } else if (found(shape, p, loc.x + width, loc.y + height, r)) {\r\n                    shape.setSelectionMode(SelectionMode.LowerRight);\r\n                } else if (found(shape, p, loc.x + width / 2, loc.y + height, r)) {\r\n                    shape.setSelectionMode(SelectionMode.MiddleBottom);\r\n                } else {\r\n                    shape.setSelectionMode(SelectionMode.None);\r\n                }\r\n                shape.setSelected(true);\r\n                drawing.setSelectedShape( shape);\r\n            }\r\n            else {\r\n                if (single) {\r\n                    if(shape.isSelected()) {\r\n                        shape.setSelected(false);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    boolean found(Shape shape, Point p, int x, int y, int r){\r\n        return (p.x>x-r && p.x< x+r && p.y>y-r && p.y<y+r);\r\n    }\r\n}","size_bytes":2782},"fontchooser/src/main/java/com/gabriel/fontchooser/ExampleRunner.java":{"content":"package com.gabriel.fontchooser;\r\n\r\nimport java.awt.EventQueue;\r\nimport java.lang.reflect.InvocationTargetException;\r\nimport java.util.Locale;\r\nimport javax.swing.UIManager;\r\nimport javax.swing.UnsupportedLookAndFeelException;\r\n\r\npublic class ExampleRunner {\r\n\r\n    public static void invoke(Runnable runnable) throws InterruptedException, InvocationTargetException {\r\n        enhanceFontRendering();\r\n        useDifferentTranslation();\r\n        EventQueue.invokeAndWait(runnable);\r\n    }\r\n\r\n    private static void useDifferentTranslation() {\r\n        Locale.setDefault(new Locale(\"en\"));\r\n    }\r\n\r\n    private static void enhanceFontRendering() {\r\n        System.setProperty(\"swing.aatext\", \"true\");\r\n        System.setProperty(\"awt.useSystemAAFontSettings\", \"lcd\");\r\n    }\r\n\r\n    public static void useLookAndFeel(Class<?> lookAndFeelClass) {\r\n        String lookAndFeelName = lookAndFeelClass.getName();\r\n        useLookAndFeel(lookAndFeelName);\r\n    }\r\n\r\n    public static void useLookAndFeel(String lookAndFeelName) {\r\n        try {\r\n            UIManager.setLookAndFeel(lookAndFeelName);\r\n        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {\r\n            throw new RuntimeException(\"Could not set look and feel to \" + lookAndFeelName, e);\r\n        }\r\n    }\r\n\r\n}\r\n","size_bytes":1346},"prop/src/main/java/com/gabriel/property/validator/longNumber/LongRangeValidator.java":{"content":"package com.gabriel.property.validator.longNumber;\r\n\r\nimport com.gabriel.property.validator.Validator;\r\n\r\npublic class LongRangeValidator implements Validator {\r\n\r\n    protected long lowerBound;\r\n    protected long upperBound;\r\n\r\n    public LongRangeValidator() {\r\n        this(Long.MIN_VALUE, Long.MAX_VALUE);\r\n    }\r\n\r\n    public LongRangeValidator(long lowerBound, long upperBound) {\r\n        this.lowerBound = lowerBound;\r\n        this.upperBound = upperBound;\r\n    }\r\n\r\n    public void setLowerBound(long lowerBound) {\r\n        this.lowerBound = lowerBound;\r\n    }\r\n\r\n    public void setUpperBound(long upperBound) {\r\n        this.upperBound = upperBound;\r\n    }\r\n\r\n    @Override\r\n    public boolean validate(Object object) {\r\n        long value = Long.parseLong((String) object);\r\n\r\n        return value >= lowerBound && value <= upperBound;\r\n    }\r\n\r\n}\r\n","size_bytes":861},"prop/src/main/java/com/gabriel/property/property/AbstractProperty.java":{"content":"package com.gabriel.property.property;\r\n\r\nimport com.gabriel.property.validator.NullValidator;\r\nimport com.gabriel.property.validator.Validator;\r\n\r\n/**\r\n * Abstract property implementation\r\n *\r\n * @param <T>\r\n */\r\npublic abstract class AbstractProperty<T> implements Property<T> {\r\n\r\n    protected T value;\r\n    protected String name;\r\n    protected Validator validator;\r\n\r\n    public AbstractProperty(String name, T value, Validator validator) {\r\n        this.name = name;\r\n        this.value = value;\r\n        this.validator = validator;\r\n    }\r\n\r\n    public AbstractProperty(T value) {\r\n        this(\"\", value, new NullValidator());\r\n    }\r\n\r\n    public AbstractProperty(String name) {\r\n        this(name, null, new NullValidator());\r\n    }\r\n\r\n    @Override\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    @Override\r\n    public T getValue() {\r\n        return value;\r\n    }\r\n\r\n    @Override\r\n    public void setValue(T value) {\r\n        this.value = value;\r\n    }\r\n\r\n    @Override\r\n    public Validator getValidator() {\r\n        return validator;\r\n    }\r\n\r\n    /**\r\n     * Sets the validator for this object\r\n     *\r\n     * @param validator Validator\r\n     */\r\n    public void setValidator(Validator validator) {\r\n        this.validator = validator;\r\n    }\r\n}\r\n","size_bytes":1282},"prop/src/main/java/com/gabriel/property/cell/BooleanCellComponent.java":{"content":"package com.gabriel.property.cell;\r\n\r\nimport com.gabriel.property.property.BooleanProperty;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\n\r\npublic class BooleanCellComponent extends AbstractCellComponent {\r\n\r\n    private BooleanProperty property;\r\n    private JCheckBox checkBox;\r\n\r\n    public BooleanCellComponent(BooleanProperty property) {\r\n        this.property = property;\r\n        this.checkBox = new JCheckBox();\r\n\r\n        checkBox.setSelected(property.getValue());\r\n        checkBox.addActionListener(e -> {\r\n            property.setValue(checkBox.isSelected());\r\n            eventDispatcher.dispatchUpdateEvent(property);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public Component getTableCellEditorComponent(JTable jTable, Object o, boolean b, int i, int i1) {\r\n        return checkBox;\r\n    }\r\n\r\n    @Override\r\n    public Object getCellEditorValue() {\r\n        return property.getValue();\r\n    }\r\n\r\n    @Override\r\n    public Component getTableCellRendererComponent(JTable jTable, Object o, boolean b, boolean b1, int i, int i1) {\r\n        return checkBox;\r\n    }\r\n}\r\n","size_bytes":1079},"batik/src/main/java/com/gabriel/Main.java":{"content":"package com.gabriel;\n\n//TIP To <b>Run</b> code, press <shortcut actionId=\"Run\"/> or\n// click the <icon src=\"AllIcons.Actions.Execute\"/> icon in the gutter.\npublic class Main {\n    public static void main(String[] args) {\n        //TIP Press <shortcut actionId=\"ShowIntentionActions\"/> with your caret at the highlighted text\n        // to see how IntelliJ IDEA suggests fixing it.\n        System.out.printf(\"Hello and welcome!\");\n\n        for (int i = 1; i <= 5; i++) {\n            //TIP Press <shortcut actionId=\"Debug\"/> to start debugging your code. We have set one <icon src=\"AllIcons.Debugger.Db_set_breakpoint\"/> breakpoint\n            // for you, but you can always add more by pressing <shortcut actionId=\"ToggleLineBreakpoint\"/>.\n            System.out.println(\"i = \" + i);\n        }\n    }\n}","size_bytes":800},"prop/src/main/java/com/gabriel/property/PropertyModel.java":{"content":"package com.gabriel.property;\r\n\r\nimport javax.swing.table.DefaultTableModel;\r\n\r\npublic class PropertyModel extends DefaultTableModel {\r\n    public PropertyModel(String[] headers) {\r\n        super(null, headers);\r\n    }\r\n\r\n    @Override\r\n    public boolean isCellEditable(int row, int column) {\r\n        return (column == 1);\r\n    }\r\n\r\n    public void clear() {\r\n        for (int i = getRowCount() - 1; i >= 0; i--) {\r\n            removeRow(i);\r\n        }\r\n    }\r\n}\r\n\r\n","size_bytes":468},"fontchooser/src/main/java/com/gabriel/fontchooser/PanelExample.java":{"content":"package com.gabriel.fontchooser;\r\n\r\nimport java.awt.BorderLayout;\r\nimport java.lang.reflect.InvocationTargetException;\r\nimport javax.swing.BorderFactory;\r\nimport javax.swing.JFrame;\r\nimport javax.swing.JLabel;\r\nimport javax.swing.UIManager;\r\nimport javax.swing.WindowConstants;\r\nimport com.gabriel.fontchooser.FontChooser;\r\nimport com.gabriel.fontchooser.model.FontSelectionModel;\r\n\r\npublic class PanelExample implements Runnable {\r\n\r\n    private final JLabel selection = new JLabel(\"Selected font will be displayed here\");\r\n\r\n    public static void main(String[] args) throws InvocationTargetException, InterruptedException {\r\n        com.gabriel.fontchooser.ExampleRunner.useLookAndFeel(UIManager.getSystemLookAndFeelClassName());\r\n        com.gabriel.fontchooser.ExampleRunner.invoke(new PanelExample());\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        selection.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\r\n\r\n        FontChooser fontChooser = new FontChooser();\r\n        fontChooser.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\r\n        fontChooser.addChangeListener(event -> {\r\n            FontSelectionModel model = (FontSelectionModel) event.getSource();\r\n            selection.setText(model.getSelectedFont().toString());\r\n        });\r\n\r\n        JFrame frame = new JFrame(\"Select Font\");\r\n        frame.setSize(600, 400);\r\n        frame.add(fontChooser);\r\n        frame.add(selection, BorderLayout.PAGE_END);\r\n        frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\r\n        frame.setVisible(true);\r\n    }\r\n\r\n}\r\n","size_bytes":1571},"drawfx/src/main/java/com/gabriel/drawfx/service/ShapeService.java":{"content":"package com.gabriel.drawfx.service;\r\n\r\nimport com.gabriel.drawfx.model.Shape;\r\n\r\nimport java.util.List;\r\n\r\n\r\npublic interface ShapeService {\r\n    void create(Shape shape);\r\n    void update(Shape shape);\r\n    void delete(Shape shape);\r\n    List<Shape> getAll();\r\n    Shape get(Shape shape);\r\n}\r\n\r\n","size_bytes":296},"draw/src/main/java/com/gabriel/draw/renderer/EllipseRenderer.java":{"content":"package com.gabriel.draw.renderer;\r\n\r\nimport com.gabriel.draw.model.Ellipse;\r\nimport com.gabriel.drawfx.model.Shape;\r\nimport com.gabriel.drawfx.renderer.ShapeRenderer;\r\n\r\nimport java.awt.*;\r\n\r\npublic class EllipseRenderer extends ShapeRenderer {\r\n\r\n    @Override\r\n    public void render(Graphics g,  Shape shape, boolean xor) {\r\n        if(!shape.isVisible()){\r\n            return;\r\n        }\r\n        Ellipse ellipse = (Ellipse) shape;\r\n        int x = shape.getLocation().x;\r\n        int y = shape.getLocation().y;\r\n        int width = shape.getWidth() ;\r\n        int height = shape.getHeight();\r\n\r\n        Graphics2D g2 = (Graphics2D) g;\r\n        g2.setStroke(new BasicStroke(shape.getThickness()));\r\n\r\n        if (xor) {\r\n            g2.setXORMode(shape.getColor());\r\n        } else {\r\n            g2.setColor(shape.getColor());\r\n            if(shape.getFill() != null){\r\n                if(shape.isGradient()) {\r\n                    GradientPaint gp = new GradientPaint(shape.getLocation().x + shape.getStart().x, shape.getLocation().y + shape.getStart().y, shape.getStartColor(), shape.getLocation().x + width + shape.getEnd().x, shape.getLocation().y + shape.getEnd().y + shape.getHeight(), shape.getEndColor());\r\n                    g2.setPaint(gp);\r\n                }\r\n                else{\r\n                    g2.setColor(shape.getFill());\r\n                }\r\n                g2.fillOval(x,y,width, height);\r\n                g2.setColor(shape.getColor());\r\n            }\r\n        }\r\n        g2.drawOval(x, y, width, height);\r\n        super.render(g, shape, xor);\r\n    }\r\n}","size_bytes":1583},"draw/src/main/java/com/gabriel/draw/view/DrawingView.java":{"content":"package com.gabriel.draw.view;\r\n\r\nimport com.gabriel.draw.controller.DrawingController;\r\nimport com.gabriel.draw.controller.DrawingWindowController;\r\nimport com.gabriel.drawfx.model.Drawing;\r\nimport com.gabriel.drawfx.model.Shape;\r\nimport com.gabriel.drawfx.service.AppService;\r\nimport lombok.Setter;\r\n\r\nimport java.util.List;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\n\r\npublic class DrawingView extends JPanel {\r\n\r\n    AppService appService;\r\n\r\n    public DrawingView(AppService appService){\r\n        this.appService  = appService;\r\n        JTextArea textArea = new JTextArea();\r\n        add(textArea);\r\n        textArea.setVisible(true);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void paint(Graphics g) {\r\n        super.paint(g);\r\n        Drawing drawing = appService.getDrawing();\r\n        List<Shape> shapes  = drawing.getShapes();\r\n        for(Shape shape : shapes){\r\n            shape.getRendererService().render(g, shape, false);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","size_bytes":961},"prop/src/main/java/com/gabriel/property/action/Action.java":{"content":"package com.gabriel.property.action;\r\n\r\n/**\r\n * Functional interface of an action.\r\n */\r\npublic interface Action {\r\n\r\n    /**\r\n     * Executes a piece of code.\r\n     */\r\n    public void execute();\r\n}\r\n","size_bytes":201},"draw/src/main/java/com/gabriel/draw/SplashFrame.java":{"content":"package com.gabriel.draw;\r\n\r\nimport com.gabriel.draw.view.Splash;\r\n\r\nimport javax.swing.*;\r\n\r\npublic class SplashFrame {\r\n    public static void main(String[] args) {\r\n        JFrame splashFrame = new JFrame();\r\n        Splash splashPanel = new Splash();\r\n        splashFrame.add(splashPanel);\r\n        splashFrame.setExtendedState(splashFrame.getExtendedState() | JFrame.MAXIMIZED_BOTH);\r\n        splashFrame.setVisible(true);\r\n        splashFrame.repaint();\r\n\r\n    }\r\n}\r\n","size_bytes":473},"prop/src/main/java/com/gabriel/property/validator/integer/IntegerValidatorFactory.java":{"content":"package com.gabriel.property.validator.integer;\r\n\r\nimport com.gabriel.property.validator.CompoundValidator;\r\nimport com.gabriel.property.validator.Validator;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class IntegerValidatorFactory {\r\n\r\n    private IntegerValidator validator;\r\n    private IntegerRangeValidator rangeValidator;\r\n    private IntegerParityValidator parityValidator;\r\n    private IntegerZeroPolicyValidator zeroPolicyValidator;\r\n\r\n    public IntegerValidatorFactory() {\r\n        this.validator = new IntegerValidator();\r\n        this.rangeValidator = null;\r\n        this.parityValidator = null;\r\n        this.zeroPolicyValidator = null;\r\n    }\r\n\r\n    public IntegerValidatorFactory setRange(int lowerBound, int upperBound) {\r\n        rangeValidator = new IntegerRangeValidator(lowerBound, upperBound);\r\n\r\n        return this;\r\n    }\r\n\r\n    public IntegerValidatorFactory setLowerBound(int lowerBound) {\r\n        if (rangeValidator == null) {\r\n            rangeValidator = new IntegerRangeValidator();\r\n        }\r\n        rangeValidator.setLowerBound(lowerBound);\r\n\r\n        return this;\r\n    }\r\n\r\n    public IntegerValidatorFactory setUpperBound(int upperBound) {\r\n        if (rangeValidator == null) {\r\n            rangeValidator = new IntegerRangeValidator();\r\n        }\r\n        rangeValidator.setUpperBound(upperBound);\r\n\r\n        return this;\r\n    }\r\n\r\n    public IntegerValidatorFactory setParity(boolean even) {\r\n        parityValidator = new IntegerParityValidator(even);\r\n\r\n        return this;\r\n    }\r\n\r\n    public IntegerValidatorFactory allowZero(boolean allowZero) {\r\n        zeroPolicyValidator = new IntegerZeroPolicyValidator(allowZero);\r\n\r\n        return this;\r\n    }\r\n\r\n    public CompoundValidator build() {\r\n        ArrayList<Validator> validators = new ArrayList<>();\r\n        validators.add(validator);\r\n\r\n        if (rangeValidator != null) {\r\n            validators.add(rangeValidator);\r\n        }\r\n        if (parityValidator != null) {\r\n            validators.add(parityValidator);\r\n        }\r\n        if (zeroPolicyValidator != null) {\r\n            validators.add(zeroPolicyValidator);\r\n        }\r\n\r\n        Validator[] _validators = new Validator[validators.size()];\r\n        validators.toArray(_validators);\r\n\r\n        return new CompoundValidator(_validators);\r\n    }\r\n}\r\n","size_bytes":2313},"draw/src/main/java/com/gabriel/draw/command/SetDrawModeCommand.java":{"content":"package com.gabriel.draw.command;\r\n\r\nimport com.gabriel.drawfx.DrawMode;\r\nimport com.gabriel.drawfx.command.Command;\r\nimport com.gabriel.drawfx.service.AppService;\r\n\r\npublic class SetDrawModeCommand implements Command {\r\n    DrawMode drawMode;\r\n    DrawMode prevDrawMode;\r\n    AppService appService;\r\n    public SetDrawModeCommand(AppService appService, DrawMode drawMode){\r\n        this.appService = appService;\r\n        this.drawMode = drawMode;\r\n    }\r\n\r\n    @Override\r\n    public void execute() {\r\n        prevDrawMode = appService.getDrawMode();\r\n        appService.setDrawMode(drawMode);\r\n    }\r\n\r\n    @Override\r\n    public void undo() {\r\n        appService.setDrawMode(prevDrawMode);\r\n    }\r\n\r\n    @Override\r\n    public void redo() {\r\n        appService.setDrawMode(drawMode);\r\n    }\r\n}\r\n","size_bytes":795},"prop/src/main/java/com/gabriel/property/validator/floatNumber/FloatValidatorFactory.java":{"content":"package com.gabriel.property.validator.floatNumber;\r\n\r\nimport com.gabriel.property.validator.CompoundValidator;\r\nimport com.gabriel.property.validator.Validator;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class FloatValidatorFactory {\r\n\r\n    private FloatValidator floatValidator;\r\n    private FloatRangeValidator rangeValidator;\r\n    private FloatZeroPolicyValidator zeroPolicyValidator;\r\n\r\n    public FloatValidatorFactory() {\r\n        this.floatValidator = new FloatValidator();\r\n        this.rangeValidator = null;\r\n        this.zeroPolicyValidator = null;\r\n    }\r\n\r\n    public FloatValidatorFactory setRange(float lowerBound, float upperBound) {\r\n        rangeValidator = new FloatRangeValidator(lowerBound, upperBound);\r\n\r\n        return this;\r\n    }\r\n\r\n    public FloatValidatorFactory setRange(\r\n            float lowerBound,\r\n            float upperBound,\r\n            boolean includeLowerBound,\r\n            boolean includeUpperBound\r\n    ) {\r\n        rangeValidator = new FloatRangeValidator(\r\n                lowerBound,\r\n                upperBound,\r\n                includeLowerBound,\r\n                includeUpperBound\r\n        );\r\n\r\n        return this;\r\n    }\r\n\r\n    public FloatValidatorFactory includeBounds(boolean includeLowerBound, boolean includeUpperBound) {\r\n        if (rangeValidator == null) {\r\n            rangeValidator = new FloatRangeValidator();\r\n        }\r\n        rangeValidator.setIncludeBounds(includeLowerBound, includeUpperBound);\r\n\r\n        return this;\r\n    }\r\n\r\n    public FloatValidatorFactory allowZero(boolean allowZero) {\r\n        zeroPolicyValidator = new FloatZeroPolicyValidator(allowZero);\r\n\r\n        return this;\r\n    }\r\n\r\n    public Validator build() {\r\n        ArrayList<Validator> validators = new ArrayList<>();\r\n        validators.add(floatValidator);\r\n\r\n        if (rangeValidator != null) {\r\n            validators.add(rangeValidator);\r\n        }\r\n        if (zeroPolicyValidator != null) {\r\n            validators.add(zeroPolicyValidator);\r\n        }\r\n\r\n        Validator[] _validators = new Validator[validators.size()];\r\n        validators.toArray(_validators);\r\n\r\n        return new CompoundValidator(_validators);\r\n    }\r\n}\r\n","size_bytes":2185},"drawfx/src/main/java/com/gabriel/drawfx/service/MoverService.java":{"content":"package com.gabriel.drawfx.service;\r\n\r\nimport com.gabriel.drawfx.model.Drawing;\r\nimport com.gabriel.drawfx.model.Shape;\r\n\r\nimport java.awt.*;\r\nimport java.util.List;\r\n\r\npublic final class MoverService {\r\n    public void  move(Shape shape, Point start, Point end){\r\n        int dx = end.x - start.x;\r\n        int dy = end.y - start.y;\r\n        shape.getLocation().x +=dx;\r\n        shape.getLocation().y += dy;\r\n     }\r\n    public void  move(Drawing drawing, Point start, Point end){\r\n        List<Shape> shapes = drawing.getShapes();\r\n        for (Shape shape : shapes ){\r\n            if(shape.isSelected()){\r\n                move(shape, start, end);\r\n            }\r\n        }\r\n    }\r\n}\r\n","size_bytes":687},"drawfx/src/main/java/com/gabriel/drawfx/command/Command.java":{"content":"package com.gabriel.drawfx.command;\r\n\r\npublic interface Command {\r\n    void execute();\r\n    void undo();\r\n    void redo();\r\n}\r\n","size_bytes":127},"fontchooser/src/main/java/com/gabriel/fontchooser/panes/FamilyPane.java":{"content":"package com.gabriel.fontchooser.panes;\r\n\r\nimport com.gabriel.fontchooser.listeners.MonospacedListener;\r\nimport com.gabriel.fontchooser.model.FamilyListModel;\r\nimport javax.swing.BorderFactory;\r\nimport javax.swing.JCheckBox;\r\nimport javax.swing.JList;\r\nimport javax.swing.JPanel;\r\nimport javax.swing.JScrollPane;\r\nimport javax.swing.JTextField;\r\nimport javax.swing.ListModel;\r\nimport javax.swing.ListSelectionModel;\r\nimport javax.swing.event.ListSelectionListener;\r\nimport java.awt.Dimension;\r\nimport java.awt.GridBagConstraints;\r\nimport java.awt.GridBagLayout;\r\nimport java.awt.Insets;\r\n\r\n\r\npublic class FamilyPane extends JPanel {\r\n\r\n    private static final long serialVersionUID = 5705429171724237594L;\r\n\r\n    private final JList<String> familyList = new JList<>();\r\n\r\n    private final SearchListener searchListener;\r\n\r\n    private final JCheckBox monospacedCheckBox = new JCheckBox();\r\n\r\n    private final MonospacedListener monospacedListener;\r\n\r\n    public FamilyPane() {\r\n\r\n        FamilyListModel familyListModel = new FamilyListModel(this);\r\n        searchListener = new SearchListener(familyListModel, this);\r\n\r\n        initializeList(familyListModel);\r\n        monospacedListener = new MonospacedListener(familyListModel);\r\n\r\n        setMinimumSize(new Dimension(80, 50));\r\n        setPreferredSize(new Dimension(240, 160));\r\n\r\n        setLayout(new GridBagLayout());\r\n        addSearchField();\r\n        addMonospacedCheckBox();\r\n        addScrollPane();\r\n    }\r\n\r\n    private void initializeList(ListModel<String> familyListModel) {\r\n        familyList.setModel(familyListModel);\r\n        familyList.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n        familyList.setCellRenderer(new ToolTipCellRenderer());\r\n    }\r\n\r\n    private void addSearchField() {\r\n        GridBagConstraints gridBagConstraints = new GridBagConstraints();\r\n        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n        gridBagConstraints.insets = new Insets(0, 0, 5, 0);\r\n        gridBagConstraints.weightx = 1.0;\r\n\r\n        JTextField searchField = new JTextField();\r\n        searchField.setBorder(BorderFactory.createEmptyBorder());\r\n        searchField.requestFocus();\r\n        searchField.addKeyListener(searchListener);\r\n        add(new JScrollPane(searchField), gridBagConstraints);\r\n    }\r\n\r\n    private void addMonospacedCheckBox() {\r\n        monospacedCheckBox.setText(\"Monospaced only\");\r\n        monospacedCheckBox.setDisplayedMnemonicIndex(0);\r\n        monospacedCheckBox.addItemListener(monospacedListener);\r\n        GridBagConstraints gridBagConstraints = new GridBagConstraints();\r\n        gridBagConstraints.gridy = 2;\r\n        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\r\n        gridBagConstraints.weightx = 1.0;\r\n        add(monospacedCheckBox, gridBagConstraints);\r\n    }\r\n\r\n    private void addScrollPane() {\r\n        GridBagConstraints gridBagConstraints = new GridBagConstraints();\r\n        gridBagConstraints.fill = GridBagConstraints.BOTH;\r\n        gridBagConstraints.gridy = 1;\r\n        gridBagConstraints.weightx = 1.0;\r\n        gridBagConstraints.weighty = 1.0;\r\n\r\n        JScrollPane scrollPane = new JScrollPane(familyList);\r\n        add(scrollPane, gridBagConstraints);\r\n    }\r\n\r\n    public void setSelectedFamily(String family) {\r\n        familyList.setSelectedValue(family, true);\r\n    }\r\n\r\n    public void addListSelectionListener(ListSelectionListener listener) {\r\n        familyList.addListSelectionListener(listener);\r\n    }\r\n\r\n    public void removeListSelectionListener(ListSelectionListener listener) {\r\n        familyList.removeListSelectionListener(listener);\r\n    }\r\n\r\n    public String getSelectedFamily() {\r\n        return familyList.getSelectedValue();\r\n    }\r\n\r\n}\r\n","size_bytes":3754},"fontchooser/src/main/java/com/gabriel/fontchooser/FontFamilies.java":{"content":"package com.gabriel.fontchooser;\r\n\r\nimport java.awt.Font;\r\nimport java.io.Serializable;\r\nimport java.util.Iterator;\r\nimport java.util.Map;\r\nimport java.util.TreeMap;\r\n\r\npublic class FontFamilies implements Iterable<FontFamily>, Serializable {\r\n\r\n    private static final FontFamilies INSTANCE = createFontFamilies();\r\n\r\n    private static FontFamilies createFontFamilies() {\r\n        return FontFamiliesFactory.create();\r\n    }\r\n\r\n    public static FontFamilies getInstance() {\r\n        return INSTANCE;\r\n    }\r\n\r\n    private final Map<String, FontFamily> families = new TreeMap<>();\r\n\r\n    public void add(Font font) {\r\n        String family = font.getFamily();\r\n        FontFamily fontFamily = families.computeIfAbsent(family, FontFamily::new);\r\n        fontFamily.add(font);\r\n    }\r\n\r\n    @Override\r\n    public Iterator<FontFamily> iterator() {\r\n        return families.values().iterator();\r\n    }\r\n\r\n    public FontFamily get(String name) {\r\n        return families.get(name);\r\n    }\r\n\r\n    public int size() {\r\n        return families.size();\r\n    }\r\n}\r\n","size_bytes":1059},"draw/src/main/java/com/gabriel/draw/model/Image.java":{"content":"package com.gabriel.draw.model;\r\n\r\nimport com.gabriel.draw.renderer.EllipseRenderer;\r\nimport com.gabriel.draw.renderer.ImageRenderer;\r\nimport com.gabriel.drawfx.model.Shape;\r\nimport lombok.Data;\r\n\r\nimport java.awt.*;\r\n\r\n@Data\r\npublic class Image extends Shape {\r\n    public Image(Point start){\r\n        super(start);\r\n        setRendererService(new ImageRenderer());\r\n    }\r\n\r\n    public Image(Point start, Point end, String imageFilename){\r\n        super(start, end );\r\n        setRendererService(new ImageRenderer());\r\n    }\r\n    public Image(Point start, int width, int height) {\r\n        super(start, width, height);\r\n        this.setRendererService(new ImageRenderer());\r\n    }\r\n}\r\n","size_bytes":687},"draw/src/main/java/com/gabriel/draw/util/ImageLoader.java":{"content":"package com.gabriel.draw.util;\r\nimport javax.imageio.ImageIO;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\n\r\npublic class ImageLoader {\r\n    public BufferedImage loadImage(String resourceName) throws IOException {\r\n        try (InputStream is = getClass().getResourceAsStream(resourceName)) {\r\n            if (is == null) {\r\n                throw new IOException(\"Resource not found: \" + resourceName);\r\n            }\r\n            return ImageIO.read(is);\r\n        }\r\n    }\r\n}","size_bytes":528},"prop/src/main/java/com/gabriel/property/cell/LongCellComponent.java":{"content":"package com.gabriel.property.cell;\r\n\r\nimport com.gabriel.property.property.LongProperty;\r\nimport com.gabriel.property.util.Keys;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.KeyEvent;\r\n\r\npublic class LongCellComponent extends AbstractCellComponent {\r\n\r\n    private LongProperty property;\r\n    private JTextField textField;\r\n\r\n    public LongCellComponent(LongProperty property) {\r\n        this.property = property;\r\n        this.textField = new JTextField();\r\n\r\n        textField.addKeyListener(new KeyAdapter());\r\n    }\r\n\r\n    @Override\r\n    public Component getTableCellEditorComponent(JTable jTable, Object o, boolean b, int i, int i1) {\r\n        textField.setText(property.getValue().toString());\r\n\r\n        return textField;\r\n    }\r\n\r\n    @Override\r\n    public Object getCellEditorValue() {\r\n        return property.getValue();\r\n    }\r\n\r\n    @Override\r\n    public Component getTableCellRendererComponent(JTable jTable, Object o, boolean b, boolean b1, int i, int i1) {\r\n        return new JLabel(property.getValue().toString());\r\n    }\r\n\r\n    private class KeyAdapter extends java.awt.event.KeyAdapter {\r\n        @Override\r\n        public void keyReleased(KeyEvent event) {\r\n            if (Keys.ignoreKey(event.getKeyCode())) {\r\n                return;\r\n            }\r\n\r\n            if (property.getValidator().validate(textField.getText())) {\r\n                property.setValue(Long.parseLong(textField.getText()));\r\n                textField.setBackground(options.getBackgroundColor());\r\n                eventDispatcher.dispatchUpdateEvent(property);\r\n            } else {\r\n                textField.setBackground(options.getInvalidColor());\r\n            }\r\n        }\r\n    }\r\n}\r\n","size_bytes":1710},"drawfx/src/main/java/com/gabriel/drawfx/ActionCommand.java":{"content":"package com.gabriel.drawfx;\r\n\r\npublic class ActionCommand {\r\n    static final public String UNDO = \"undo\";\r\n    static final public String REDO = \"redo\";\r\n    static final public String RECT = \"rectangle\";\r\n    static final public String LINE = \"Line\";\r\n    static final public String ELLIPSE = \"ellipse\";\r\n    static final public String IMAGEFILE = \"imagefile\";\r\n    static final public String IMAGE = \"image\";\r\n    static final public String TEXT = \"text\";\r\n    static final public String FONT = \"font\";\r\n    static final public String SELECT = \"select\";\r\n    static final public String COLOR = \"color\";\r\n    static final public String FILL = \"fill\";\r\n    static final public String SAVE = \"save\";\r\n    static final public String OPEN = \"open\";\r\n    static final public String SAVEAS = \"saveas\";\r\n    static final public String NEW= \"new\";\r\n}\r\n","size_bytes":846},"prop/src/main/java/com/gabriel/property/property/StringProperty.java":{"content":"package com.gabriel.property.property;\r\n\r\nimport com.gabriel.property.validator.StringValidator;\r\nimport com.gabriel.property.validator.Validator;\r\n\r\npublic class StringProperty extends AbstractProperty<String> {\r\n\r\n    public StringProperty(String name, String value) {\r\n        super(name, value, new StringValidator());\r\n    }\r\n\r\n    public StringProperty(String name, String value, Validator validator) {\r\n        super(name, value, validator);\r\n    }\r\n}\r\n","size_bytes":460},"prop/src/main/java/com/gabriel/property/validator/doubleNumber/DoubleRangeValidator.java":{"content":"package com.gabriel.property.validator.doubleNumber;\r\n\r\nimport com.gabriel.property.validator.Validator;\r\n\r\npublic class DoubleRangeValidator implements Validator {\r\n\r\n    protected double lowerBound;\r\n    protected double upperBound;\r\n\r\n    protected boolean includeLowerBound;\r\n    protected boolean includeUpperBound;\r\n\r\n    public DoubleRangeValidator(\r\n            double lowerBound,\r\n            double upperBound,\r\n            boolean includeLowerBound,\r\n            boolean includeUpperBound\r\n    ) {\r\n        this.lowerBound = lowerBound;\r\n        this.upperBound = upperBound;\r\n        this.includeLowerBound = includeLowerBound;\r\n        this.includeUpperBound = includeUpperBound;\r\n    }\r\n\r\n    public DoubleRangeValidator(double lowerBound, double upperBound) {\r\n        this(lowerBound, upperBound, true, true);\r\n    }\r\n\r\n    public DoubleRangeValidator() {\r\n        this(-Double.MAX_VALUE, Double.MAX_VALUE, true, true);\r\n    }\r\n\r\n    public void setLowerBound(double lowerBound) {\r\n        this.lowerBound = lowerBound;\r\n    }\r\n\r\n    public void setUpperBound(double upperBound) {\r\n        this.upperBound = upperBound;\r\n    }\r\n\r\n    public void setIncludeLowerBound(boolean includeLowerBound) {\r\n        this.includeLowerBound = includeLowerBound;\r\n    }\r\n\r\n    public void setIncludeUpperBound(boolean includeUpperBound) {\r\n        this.includeUpperBound = includeUpperBound;\r\n    }\r\n\r\n    public void setIncludeBounds(boolean includeLowerBound, boolean includeUpperBound) {\r\n        this.includeLowerBound = includeLowerBound;\r\n        this.includeUpperBound = includeUpperBound;\r\n    }\r\n\r\n    @Override\r\n    public boolean validate(Object object) {\r\n        double value = Double.parseDouble((String) object);\r\n\r\n        if ((value == lowerBound && includeLowerBound) || (value == upperBound && includeUpperBound)) {\r\n            return true;\r\n        }\r\n\r\n        return value > lowerBound && value < upperBound;\r\n    }\r\n}\r\n","size_bytes":1945},"draw/src/main/java/com/gabriel/draw/service/XmlDocumentService.java":{"content":"package com.gabriel.draw.service;\r\n\r\nimport com.gabriel.draw.model.Ellipse;\r\nimport com.gabriel.draw.model.Line;\r\nimport com.gabriel.draw.model.Rectangle;\r\nimport com.gabriel.drawfx.SelectionMode;\r\nimport com.gabriel.drawfx.ShapeMode;\r\nimport com.gabriel.drawfx.model.Drawing;\r\nimport com.gabriel.drawfx.service.DocumentService;\r\nimport org.w3c.dom.*;\r\nimport com.gabriel.drawfx.model.Shape;\r\nimport com.gabriel.draw.model.Text;\r\nimport com.gabriel.draw.model.Image;\r\n\r\nimport javax.swing.*;\r\nimport javax.xml.parsers.DocumentBuilder;\r\nimport javax.xml.parsers.DocumentBuilderFactory;\r\nimport javax.xml.transform.Transformer;\r\nimport javax.xml.transform.TransformerFactory;\r\nimport javax.xml.transform.dom.DOMSource;\r\nimport javax.xml.transform.stream.StreamResult;\r\n\r\nimport java.awt.*;\r\nimport java.io.File;\r\n\r\npublic class XmlDocumentService implements DocumentService {\r\n\r\n    Drawing drawing;\r\n\r\n    public XmlDocumentService(Drawing drawing){\r\n        this.drawing = drawing;\r\n    }\r\n\r\n    @Override\r\n    public void save(){\r\n        Font font;\r\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\r\n        try {\r\n            DocumentBuilder builder = factory.newDocumentBuilder();\r\n            Document document = builder.newDocument();\r\n            Element root = document.createElement(\"Drawing\");\r\n\r\n            Attr attr = document.createAttribute(\"color\");\r\n            attr.setValue(String.valueOf(drawing.getColor()));\r\n            root.setAttributeNode(attr);\r\n\r\n            attr = document.createAttribute(\"filename\");\r\n            attr.setValue(drawing.getFilename());\r\n            root.setAttributeNode(attr);\r\n\r\n            attr =  document.createAttribute(\"mode\");\r\n            attr.setValue(String.valueOf(drawing.getShapeMode()));\r\n            root.setAttributeNode(attr);\r\n\r\n            attr =  document.createAttribute(\"mode\");\r\n            attr.setValue(String.valueOf(drawing.getShapeMode()));\r\n            root.setAttributeNode(attr);\r\n\r\n            attr = document.createAttribute(\"id\");\r\n            attr.setValue(String.valueOf(drawing.getId()));\r\n            root.setAttributeNode(attr);\r\n\r\n            attr = document.createAttribute(\"visible\");\r\n            attr.setValue(String.valueOf(drawing.isVisible()));\r\n            root.setAttributeNode(attr);\r\n\r\n            attr = document.createAttribute(\"color\");\r\n            attr.setValue(String.valueOf(drawing.getColor()));\r\n            root.setAttributeNode(attr);\r\n\r\n            attr = document.createAttribute(\"fill\");\r\n            attr.setValue(String.valueOf(drawing.getFill()));\r\n            root.setAttributeNode(attr);\r\n\r\n            attr = document.createAttribute(\"text\");\r\n            attr.setValue(String.valueOf(drawing.getText()));\r\n            root.setAttributeNode(attr);\r\n\r\n\r\n            attr = document.createAttribute(\"r\");\r\n            attr.setValue(String.valueOf(drawing.getR()));\r\n            root.setAttributeNode(attr);\r\n\r\n\r\n            attr = document.createAttribute(\"x\");\r\n            attr.setValue(String.valueOf(drawing.getLocation().x));\r\n            root.setAttributeNode(attr);\r\n\r\n            attr = document.createAttribute(\"y\");\r\n            attr.setValue(String.valueOf(drawing.getLocation().y));\r\n            root.setAttributeNode(attr);\r\n\r\n            attr = document.createAttribute(\"width\");\r\n            attr.setValue(String.valueOf(drawing.getWidth()));\r\n            root.setAttributeNode(attr);\r\n\r\n            attr = document.createAttribute(\"height\");\r\n            attr.setValue(String.valueOf(drawing.getHeight()));\r\n            root.setAttributeNode(attr);\r\n\r\n            attr = document.createAttribute(\"startx\");\r\n            attr.setValue(String.valueOf(drawing.getStart().x));\r\n            root.setAttributeNode(attr);\r\n\r\n            attr = document.createAttribute(\"starty\");\r\n            attr.setValue(String.valueOf(drawing.getStart().y));\r\n            root.setAttributeNode(attr);\r\n\r\n            attr = document.createAttribute(\"endx\");\r\n            attr.setValue(String.valueOf(drawing.getEnd().x));\r\n            root.setAttributeNode(attr);\r\n\r\n            attr = document.createAttribute(\"endy\");\r\n            attr.setValue(String.valueOf(drawing.getEnd().y));\r\n            root.setAttributeNode(attr);\r\n\r\n            attr = document.createAttribute(\"startColor\");\r\n            attr.setValue(String.valueOf(drawing.getStartColor()));\r\n            root.setAttributeNode(attr);\r\n\r\n            attr = document.createAttribute(\"endColor\");\r\n            attr.setValue(String.valueOf(drawing.getEndColor()));\r\n            root.setAttributeNode(attr);\r\n\r\n            attr = document.createAttribute(\"gradient\");\r\n            attr.setValue(String.valueOf(drawing.isGradient()));\r\n            root.setAttributeNode(attr);\r\n\r\n            attr = document.createAttribute(\"thickness\");\r\n            attr.setValue(String.valueOf(drawing.getThickness()));\r\n            root.setAttributeNode(attr);\r\n\r\n            font = drawing.getFont();\r\n\r\n            attr = document.createAttribute(\"font-family\");\r\n            attr.setValue(font.getFamily());\r\n            root.setAttributeNode(attr);\r\n\r\n            attr = document.createAttribute(\"font-style\");\r\n            attr.setValue(String.valueOf(font.getStyle()));\r\n            root.setAttributeNode(attr);\r\n\r\n            attr = document.createAttribute(\"font-size\");\r\n            attr.setValue(String.valueOf(font.getSize()));\r\n            root.setAttributeNode(attr);\r\n\r\n            attr = document.createAttribute(\"image\");\r\n            attr.setValue(String.valueOf(drawing.getImageFilename()));\r\n            root.setAttributeNode(attr);\r\n\r\n            document.appendChild(root);\r\n\r\n            for (Shape shape : drawing.getShapes()) {\r\n\r\n                Element element = document.createElement(\"Shape\");\r\n                attr = document.createAttribute(\"type\");\r\n                if (shape.getClass() == Line.class) {\r\n                    attr.setValue(\"Line\");\r\n                } else if (shape.getClass() == Ellipse.class) {\r\n                    attr.setValue(\"Ellipse\");\r\n                } else if (shape.getClass() == Rectangle.class) {\r\n                    attr.setValue(\"Rectangle\");\r\n                } else if (shape.getClass() == Text.class) {\r\n                    attr.setValue(\"Text\");\r\n                } else if (shape.getClass() == Image.class) {\r\n                    attr.setValue(\"Image\");\r\n                }\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"id\");\r\n                attr.setValue(String.valueOf(shape.getId()));\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"selected\");\r\n                attr.setValue(String.valueOf(shape.isSelected()));\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"visible\");\r\n                attr.setValue(String.valueOf(shape.isVisible()));\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"color\");\r\n                attr.setValue(String.valueOf(shape.getColor()));\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"alpha\");\r\n                attr.setValue(String.valueOf(shape.getColor().getAlpha()));\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"fill\");\r\n                attr.setValue(String.valueOf(shape.getFill()));\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"fill-alpha\");\r\n                attr.setValue(String.valueOf(shape.getFill().getAlpha()));\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"start-color\");\r\n                attr.setValue(String.valueOf(shape.getStartColor()));\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"start-color-alpha\");\r\n                attr.setValue(String.valueOf(shape.getStartColor().getAlpha()));\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"end-color\");\r\n                attr.setValue(String.valueOf(shape.getEndColor()));\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"end-color-alpha\");\r\n                attr.setValue(String.valueOf(shape.getEndColor().getAlpha()));\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"text\");\r\n                attr.setValue(String.valueOf(shape.getText()));\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"selection-mode\");\r\n                attr.setValue(String.valueOf(shape.getSelectionMode()));\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"r\");\r\n                attr.setValue(String.valueOf(shape.getR()));\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"x\");\r\n                attr.setValue(String.valueOf(shape.getLocation().x));\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"y\");\r\n                attr.setValue(String.valueOf(shape.getLocation().y));\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"width\");\r\n                attr.setValue(String.valueOf(shape.getWidth()));\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"height\");\r\n                attr.setValue(String.valueOf(shape.getHeight()));\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"startx\");\r\n                attr.setValue(String.valueOf(shape.getStart().x));\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"starty\");\r\n                attr.setValue(String.valueOf(shape.getStart().y));\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"endx\");\r\n                attr.setValue(String.valueOf(shape.getEnd().x));\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"endy\");\r\n                attr.setValue(String.valueOf(shape.getEnd().y));\r\n                element.setAttributeNode(attr);\r\n\r\n\r\n                attr = document.createAttribute(\"gradient\");\r\n                attr.setValue(String.valueOf(shape.isGradient()));\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"thickness\");\r\n                attr.setValue(String.valueOf(shape.getThickness()));\r\n                element.setAttributeNode(attr);\r\n\r\n                font = shape.getFont();\r\n\r\n                attr = document.createAttribute(\"font-family\");\r\n                attr.setValue(font.getFamily());\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"font-style\");\r\n                attr.setValue(String.valueOf(font.getStyle()));\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"font-size\");\r\n                attr.setValue(String.valueOf(font.getSize()));\r\n                element.setAttributeNode(attr);\r\n\r\n                attr = document.createAttribute(\"image\");\r\n                attr.setValue(String.valueOf(shape.getImageFilename()));\r\n                element.setAttributeNode(attr);\r\n\r\n                root.appendChild(element);\r\n            }\r\n\r\n            // Write to XML file\r\n            TransformerFactory transformerFactory = TransformerFactory.newInstance();\r\n            Transformer transformer = transformerFactory.newTransformer();\r\n            DOMSource source = new DOMSource(document);\r\n\r\n            // Specify your local file path\r\n            String filename = drawing.getFilename();\r\n            StreamResult result = new StreamResult(filename);\r\n            if(!filename.toUpperCase().endsWith(\".XML\") ){\r\n                result = new StreamResult(filename + \"xml\");\r\n            }\r\n            transformer.transform(source, result);\r\n\r\n            System.out.println(\"XML file created successfully!\");\r\n        }\r\n        catch(Exception e){\r\n            System.out.println(\"Error occurred \" + e.getMessage());\r\n        }\r\n    }\r\n    @Override\r\n    public void open() {\r\n        drawing.getShapes().clear();\r\n        Shape  shape = null;\r\n        File xmlFile = new File(drawing.getFilename());\r\n        int id;\r\n        int x;\r\n        int y;\r\n        int width;\r\n        int height;\r\n        int startx;\r\n        int starty;\r\n        int endx;\r\n        int endy;\r\n        boolean isvisible;\r\n        boolean isgradient;\r\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\r\n        try {\r\n            DocumentBuilder builder = factory.newDocumentBuilder();\r\n            Document document = builder.parse(xmlFile);\r\n\r\n            NodeList nodeList = document.getElementsByTagName(\"Drawing\");\r\n            Node root = nodeList.item(0);\r\n            NamedNodeMap map =  root.getAttributes();\r\n\r\n            drawing.setColor(convertColor(map.getNamedItem(\"color\").getNodeValue()));\r\n            drawing.setFill(convertColor(map.getNamedItem(\"fill\").getNodeValue()));\r\n            drawing.setStartColor(convertColor(map.getNamedItem(\"startColor\").getNodeValue()));\r\n            drawing.setColor(convertColor(map.getNamedItem(\"endColor\").getNodeValue()));\r\n            x = Integer.parseInt(map.getNamedItem(\"startx\").getNodeValue());\r\n            y = Integer.parseInt(map.getNamedItem(\"starty\").getNodeValue());\r\n            drawing.setStart(new Point(x,y));\r\n            x = Integer.parseInt(map.getNamedItem(\"endx\").getNodeValue());\r\n            y = Integer.parseInt(map.getNamedItem(\"endy\").getNodeValue());\r\n            drawing.setEnd(new Point(x,y));\r\n\r\n            drawing.setVisible(Boolean.parseBoolean(map.getNamedItem(\"visible\").getNodeValue()));\r\n            drawing.setVisible(Boolean.parseBoolean(map.getNamedItem(\"gradient\").getNodeValue()));\r\n\r\n            drawing.setWidth(Integer.parseInt(map.getNamedItem(\"width\").getNodeValue()));\r\n            drawing.setHeight(Integer.parseInt(map.getNamedItem(\"height\").getNodeValue()));\r\n            drawing.setThickness(Integer.parseInt(map.getNamedItem(\"thickness\").getNodeValue()));\r\n\r\n            drawing.setText(map.getNamedItem(\"text\").getNodeValue());\r\n            drawing.setImageFilename(map.getNamedItem(\"image\").getNodeValue());\r\n\r\n            String fontFamily = map.getNamedItem(\"font-family\").getNodeValue();\r\n            int fontStyle  =  Integer.parseInt(map.getNamedItem(\"font-style\").getNodeValue());\r\n            int fontSize =   Integer.parseInt(map.getNamedItem(\"font-size\").getNodeValue());\r\n            Font font = new Font(fontFamily, fontStyle, fontSize);\r\n            drawing.setFont(font);\r\n\r\n            String mode = map.getNamedItem(\"mode\").getNodeValue();\r\n            if(mode.equals(\"Select\")){\r\n                drawing.setShapeMode(ShapeMode.Select);\r\n            } else if(mode.equals(\"Rectangle\")){\r\n                drawing.setShapeMode(ShapeMode.Rectangle);\r\n            } else if(mode.equals(\"Ellipse\")){\r\n                drawing.setShapeMode(ShapeMode.Ellipse);\r\n            } else if(mode.equals(\"Line\")){\r\n                drawing.setShapeMode(ShapeMode.Line);\r\n            } else if(mode.equals(\"Image\")){\r\n                drawing.setShapeMode(ShapeMode.Image);\r\n            } else if(mode.equals(\"Text\")) {\r\n                drawing.setShapeMode(ShapeMode.Text);\r\n            }\r\n\r\n\r\n\r\n\r\n            nodeList = document.getElementsByTagName(\"Shape\");\r\n\r\n            for (int i = 0; i < nodeList.getLength(); i++) {\r\n                Node node = nodeList.item(i);\r\n                map = node.getAttributes();\r\n\r\n                x = Integer.parseInt(map.getNamedItem(\"x\").getNodeValue());\r\n                y = Integer.parseInt(map.getNamedItem(\"y\").getNodeValue());\r\n                width = Integer.parseInt(map.getNamedItem(\"width\").getNodeValue());\r\n                height = Integer.parseInt(map.getNamedItem(\"height\").getNodeValue());\r\n\r\n                Point p = new Point(x,y);\r\n                String type = map.getNamedItem(\"type\").getNodeValue();\r\n\r\n                if (type.equals(\"Rectangle\")) {\r\n                    shape = new Rectangle(p, width, height);\r\n                } else if (type.equals(\"Ellipse\")) {\r\n                    shape = new Ellipse(p, width, height);\r\n                }else if (type.equals(\"Line\")) {\r\n                    shape = new Line(p, width, height);\r\n                }else if (type.equals(\"Text\")) {\r\n                    shape = new Text(p, width, height);\r\n                }else if (type.equals(\"Image\")) {\r\n                    shape = new Image(p, width, height);\r\n                }\r\n                shape.setId(Integer.parseInt(map.getNamedItem(\"id\").getNodeValue()));\r\n                shape.setR(Integer.parseInt(map.getNamedItem(\"r\").getNodeValue()));\r\n                shape.setThickness(Integer.parseInt(map.getNamedItem(\"thickness\").getNodeValue()));\r\n\r\n                shape.setVisible(Boolean.parseBoolean(map.getNamedItem(\"visible\").getNodeValue()));\r\n                shape.setGradient(Boolean.parseBoolean(map.getNamedItem(\"gradient\").getNodeValue()));\r\n                shape.setSelected(Boolean.parseBoolean(map.getNamedItem(\"selected\").getNodeValue()));\r\n\r\n                String selectionMode = map.getNamedItem(\"selection-mode\").getNodeValue();\r\n                if(selectionMode.equals(\"None\")){\r\n                    shape.setSelectionMode(SelectionMode.None);\r\n                } else if(selectionMode.equals(\"UpperLeft\")){\r\n                    shape.setSelectionMode(SelectionMode.UpperLeft);\r\n                } else if(selectionMode.equals(\"UpperRight\")){\r\n                    shape.setSelectionMode(SelectionMode.UpperRight);\r\n                } else if(selectionMode.equals(\"LowerLeft\")){\r\n                    shape.setSelectionMode(SelectionMode.LowerLeft);\r\n                } else if(selectionMode.equals(\"LowerRight\")){\r\n                    shape.setSelectionMode(SelectionMode.LowerRight);\r\n                } else if(selectionMode.equals(\"MiddleTop\")){\r\n                    shape.setSelectionMode(SelectionMode.MiddleTop);\r\n                } else if(selectionMode.equals(\"MiddleRight\")){\r\n                    shape.setSelectionMode(SelectionMode.MiddleRight);\r\n                } else if(selectionMode.equals(\"MiddleLeft\")){\r\n                    shape.setSelectionMode(SelectionMode.MiddleLeft);\r\n                } else if(selectionMode.equals(\"MiddleBottom\")) {\r\n                    shape.setSelectionMode(SelectionMode.MiddleBottom);\r\n                } else {\r\n                    shape.setSelectionMode(SelectionMode.None);\r\n                }\r\n                Color color = convertColor(map.getNamedItem(\"color\").getNodeValue());\r\n                int alpha = Integer.parseInt(map.getNamedItem(\"alpha\").getNodeValue());\r\n                Color newColor = new Color(color.getRed(), color.getGreen(), color.getBlue(), alpha);\r\n                shape.setColor(newColor);\r\n\r\n                color = convertColor(map.getNamedItem(\"start-color\").getNodeValue());\r\n                alpha = Integer.parseInt(map.getNamedItem(\"start-color-alpha\").getNodeValue());\r\n                newColor = new Color(color.getRed(), color.getGreen(), color.getBlue(), alpha);\r\n                shape.setStartColor(newColor);\r\n\r\n                color = convertColor(map.getNamedItem(\"end-color\").getNodeValue());\r\n                alpha = Integer.parseInt(map.getNamedItem(\"end-color-alpha\").getNodeValue());\r\n                newColor = new Color(color.getRed(), color.getGreen(), color.getBlue(), alpha);\r\n                shape.setEndColor(newColor);\r\n\r\n                color = convertColor(map.getNamedItem(\"fill\").getNodeValue());\r\n                alpha = Integer.parseInt(map.getNamedItem(\"fill-alpha\").getNodeValue());\r\n                newColor = new Color(color.getRed(), color.getGreen(), color.getBlue(), alpha);\r\n                shape.setFill(newColor);\r\n\r\n                shape.setR(Integer.parseInt(map.getNamedItem(\"r\").getNodeValue()));\r\n\r\n                x =Integer.parseInt(map.getNamedItem(\"startx\").getNodeValue());\r\n                y =Integer.parseInt(map.getNamedItem(\"starty\").getNodeValue());\r\n                p = new Point(x,y);\r\n                shape.setStart(p);\r\n\r\n                x =Integer.parseInt(map.getNamedItem(\"endx\").getNodeValue());\r\n                y =Integer.parseInt(map.getNamedItem(\"endy\").getNodeValue());\r\n                p = new Point(x,y);\r\n                shape.setEnd(p);\r\n\r\n                shape.setText(map.getNamedItem(\"text\").getNodeValue());\r\n                shape.setImageFilename(map.getNamedItem(\"image\").getNodeValue());\r\n\r\n                fontFamily = map.getNamedItem(\"font-family\").getNodeValue();\r\n                fontStyle =  Integer.parseInt(map.getNamedItem(\"font-style\").getNodeValue());\r\n                fontSize =   Integer.parseInt(map.getNamedItem(\"font-size\").getNodeValue());\r\n\r\n                font = new Font(fontFamily, fontStyle, fontSize);\r\n                shape.setFont(font);\r\n                drawing.getShapes().add(shape);\r\n            }\r\n        }\r\n        catch(Exception e){\r\n            System.out.println(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public Color convertColor(String colorStr) {\r\n        Color color;\r\n        boolean hasAlpha = false;\r\n        int rIndex = colorStr.indexOf(\"r=\");\r\n        int alpha;\r\n        String rStr;\r\n        String gStr;\r\n        String bStr;\r\n        String aStr;\r\n        int rcolor;\r\n        int gcolor;\r\n        int bcolor;\r\n\r\n        colorStr = colorStr.substring(rIndex + 2);\r\n        int nextIndex = colorStr.indexOf(\",\");\r\n        rStr = colorStr.substring(0, nextIndex);\r\n        colorStr = colorStr.substring(nextIndex + 3);\r\n        nextIndex = colorStr.indexOf(\",\");\r\n        gStr = colorStr.substring(0, nextIndex);\r\n        colorStr = colorStr.substring(nextIndex + 3);\r\n        nextIndex = colorStr.indexOf(\",\");\r\n\r\n         rcolor = Integer.parseInt(rStr);\r\n         gcolor = Integer.parseInt(gStr);\r\n\r\n        if(nextIndex>0) {   // Found a comma therefore there is alpha\r\n            hasAlpha = true;\r\n            bStr = colorStr.substring(0, nextIndex);\r\n            bcolor= Integer.parseInt(bStr);\r\n            nextIndex = colorStr.indexOf(\"]\");\r\n            aStr = colorStr.substring(0, nextIndex);\r\n            int acode =  Integer.parseInt(aStr);\r\n            color = new Color(rcolor, gcolor, bcolor, acode);\r\n        }\r\n        else {\r\n            nextIndex = colorStr.indexOf(\"]\");\r\n            bStr = colorStr.substring(0, nextIndex);\r\n            bcolor= Integer.parseInt(bStr);\r\n            color = new Color(rcolor, gcolor, bcolor);\r\n        }\r\n       return color;\r\n    }\r\n }\r\n","size_bytes":22991},"drawfx/src/main/java/com/gabriel/drawfx/SelectionMode.java":{"content":"package com.gabriel.drawfx;\r\n\r\npublic enum SelectionMode {\r\n    UpperLeft,\r\n    LowerLeft,\r\n    UpperRight,\r\n    LowerRight,\r\n    MiddleTop,\r\n    MiddleBottom,\r\n    MiddleLeft,\r\n    MiddleRight,\r\n    None\r\n}\r\n","size_bytes":209},"prop/src/main/java/com/gabriel/property/cell/DoubleCellComponent.java":{"content":"package com.gabriel.property.cell;\r\n\r\nimport com.gabriel.property.property.DoubleProperty;\r\nimport com.gabriel.property.util.Keys;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.KeyEvent;\r\n\r\npublic class DoubleCellComponent extends AbstractCellComponent {\r\n\r\n    private DoubleProperty property;\r\n    private JTextField textField;\r\n\r\n    public DoubleCellComponent(DoubleProperty property) {\r\n        this.property = property;\r\n        this.textField = new JTextField();\r\n\r\n        textField.addKeyListener(new KeyAdapter());\r\n    }\r\n\r\n    @Override\r\n    public Component getTableCellEditorComponent(JTable jTable, Object o, boolean b, int i, int i1) {\r\n        textField.setText(property.getValue().toString());\r\n\r\n        return textField;\r\n    }\r\n\r\n    @Override\r\n    public Object getCellEditorValue() {\r\n        return property.getValue();\r\n    }\r\n\r\n    @Override\r\n    public Component getTableCellRendererComponent(JTable jTable, Object o, boolean b, boolean b1, int i, int i1) {\r\n        return new JLabel(property.getValue().toString());\r\n    }\r\n\r\n    private class KeyAdapter extends java.awt.event.KeyAdapter {\r\n        @Override\r\n        public void keyReleased(KeyEvent event) {\r\n            if (Keys.ignoreKey(event.getKeyCode())) {\r\n                return;\r\n            }\r\n\r\n            if (property.getValidator().validate(textField.getText())) {\r\n                property.setValue(Double.parseDouble(textField.getText()));\r\n                textField.setBackground(options.getBackgroundColor());\r\n                eventDispatcher.dispatchUpdateEvent(property);\r\n            } else {\r\n                textField.setBackground(options.getInvalidColor());\r\n            }\r\n        }\r\n    }\r\n}\r\n","size_bytes":1724},"fontchooser/src/main/java/com/gabriel/fontchooser/listeners/StyleListSelectionListener.java":{"content":"package com.gabriel.fontchooser.listeners;\r\n\r\nimport java.awt.Font;\r\nimport javax.swing.event.ListSelectionEvent;\r\nimport javax.swing.event.ListSelectionListener;\r\nimport lombok.RequiredArgsConstructor;\r\nimport com.gabriel.fontchooser.FontContainer;\r\n\r\n\r\n/**\r\n * Created by dheid on 4/1/17.\r\n */\r\n@RequiredArgsConstructor\r\npublic class StyleListSelectionListener implements ListSelectionListener {\r\n\r\n    private final FontContainer fontContainer;\r\n\r\n    @Override\r\n    public void valueChanged(ListSelectionEvent e) {\r\n        if (!e.getValueIsAdjusting()) {\r\n            String selectedStyle = fontContainer.getSelectedStyle();\r\n            Font oldFont = fontContainer.getSelectedFont();\r\n            Font newFont = new Font(selectedStyle, oldFont.getStyle(), oldFont.getSize());\r\n            fontContainer.setSelectedFont(newFont);\r\n            fontContainer.setPreviewFont(newFont);\r\n        }\r\n    }\r\n\r\n}\r\n","size_bytes":912},"prop/src/main/java/com/gabriel/property/validator/integer/IntegerRangeValidator.java":{"content":"package com.gabriel.property.validator.integer;\r\n\r\nimport com.gabriel.property.validator.Validator;\r\n\r\npublic class IntegerRangeValidator implements Validator {\r\n\r\n    protected int lowerBound;\r\n    protected int upperBound;\r\n\r\n    public IntegerRangeValidator() {\r\n        this(Integer.MIN_VALUE, Integer.MAX_VALUE);\r\n    }\r\n\r\n    public IntegerRangeValidator(int lowerBound, int upperBound) {\r\n        this.lowerBound = lowerBound;\r\n        this.upperBound = upperBound;\r\n    }\r\n\r\n    public void setLowerBound(int lowerBound) {\r\n        this.lowerBound = lowerBound;\r\n    }\r\n\r\n    public void setUpperBound(int upperBound) {\r\n        this.upperBound = upperBound;\r\n    }\r\n\r\n    @Override\r\n    public boolean validate(Object object) {\r\n        int value = Integer.parseInt((String) object);\r\n\r\n        return value >= lowerBound && value <= upperBound;\r\n    }\r\n}\r\n","size_bytes":866},"draw/src/main/java/com/gabriel/draw/renderer/RectangleRenderer.java":{"content":"package com.gabriel.draw.renderer;\r\n\r\nimport com.gabriel.drawfx.model.Shape;\r\nimport com.gabriel.drawfx.renderer.ShapeRenderer;\r\n\r\nimport java.awt.*;\r\n\r\npublic class RectangleRenderer extends ShapeRenderer {\r\n\r\n    @Override\r\n    public void render(Graphics g, Shape shape, boolean xor) {\r\n        if(!shape.isVisible()){\r\n            return;\r\n        }\r\n\r\n        int x = shape.getLocation().x;\r\n        int y = shape.getLocation().y;\r\n        int width = shape.getWidth() ;\r\n        int height = shape.getHeight();\r\n\r\n        if(xor) {\r\n            g.setXORMode(shape.getColor());\r\n        }\r\n        else {\r\n            g.setColor(shape.getColor());\r\n        }\r\n\r\n        Graphics2D g2 = (Graphics2D) g;\r\n        g2.setStroke(new BasicStroke(shape.getThickness()));\r\n\r\n        if (xor) {\r\n            g2.setXORMode(shape.getColor());\r\n        } else {\r\n            g2.setColor(shape.getColor());\r\n            if(shape.getFill() != null){\r\n                if(shape.isGradient()) {\r\n                    GradientPaint gp = new GradientPaint(shape.getLocation().x+ shape.getStart().x, shape.getLocation().y + shape.getStart().y, shape.getStartColor(), shape.getLocation().x+ width+ shape.getEnd().x, shape.getLocation().y+ shape.getEnd().y + shape.getHeight(), shape.getEndColor());\r\n                    g2.setPaint(gp);\r\n                } else {\r\n                    g2.setColor(shape.getFill());\r\n                }\r\n                g2.fillRect(x,y,width, height);\r\n                g2.setColor(shape.getColor());\r\n            }\r\n        }\r\n        g2.drawRect(x, y, width, height);\r\n        super.render(g, shape, xor);\r\n\r\n    }\r\n}\r\n","size_bytes":1633},"fontchooser/src/main/java/com/gabriel/fontchooser/util/ResourceBundleUtil.java":{"content":"package com.gabriel.fontchooser.util;\r\n\r\nimport java.util.ResourceBundle;\r\nimport lombok.RequiredArgsConstructor;\r\n\r\n@RequiredArgsConstructor\r\npublic class ResourceBundleUtil {\r\n\r\n    private final ResourceBundle resourceBundle;\r\n\r\n    public char getFirstChar(String key) {\r\n        String bundleString = resourceBundle.getString(key);\r\n        return bundleString.charAt(0);\r\n    }\r\n\r\n}\r\n","size_bytes":390},"prop/src/main/java/com/gabriel/property/validator/floatNumber/FloatValidator.java":{"content":"package com.gabriel.property.validator.floatNumber;\r\n\r\nimport com.gabriel.property.validator.Validator;\r\n\r\n/**\r\n * Default implementation to validate float objects\r\n */\r\npublic class FloatValidator implements Validator {\r\n\r\n    @Override\r\n    public boolean validate(Object object) {\r\n        return isFloat(object);\r\n    }\r\n\r\n    protected boolean isFloat(Object object) {\r\n        try {\r\n            Float.parseFloat((String) object);\r\n        } catch (NumberFormatException e) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","size_bytes":555},"prop/src/main/java/com/gabriel/property/cell/IntegerCellComponent.java":{"content":"package com.gabriel.property.cell;\r\n\r\nimport com.gabriel.property.property.IntegerProperty;\r\nimport com.gabriel.property.util.Keys;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.KeyEvent;\r\n\r\npublic class IntegerCellComponent extends AbstractCellComponent {\r\n\r\n    private IntegerProperty property;\r\n    private JTextField textField;\r\n\r\n    public IntegerCellComponent(IntegerProperty property) {\r\n        this.property = property;\r\n        this.textField = new JTextField();\r\n\r\n        textField.addKeyListener(new KeyAdapter());\r\n    }\r\n\r\n    @Override\r\n    public Component getTableCellEditorComponent(JTable jTable, Object o, boolean b, int i, int i1) {\r\n        textField.setText(property.getValue().toString());\r\n\r\n        return textField;\r\n    }\r\n\r\n    @Override\r\n    public Object getCellEditorValue() {\r\n        return property.getValue();\r\n    }\r\n\r\n    @Override\r\n    public Component getTableCellRendererComponent(JTable jTable, Object o, boolean b, boolean b1, int i, int i1) {\r\n        return new JLabel(property.getValue().toString());\r\n    }\r\n\r\n    private class KeyAdapter extends java.awt.event.KeyAdapter {\r\n        @Override\r\n        public void keyReleased(KeyEvent event) {\r\n            if (Keys.ignoreKey(event.getKeyCode())) {\r\n                return;\r\n            }\r\n\r\n            if (property.getValidator().validate(textField.getText())) {\r\n                property.setValue(Integer.parseInt(textField.getText()));\r\n                textField.setBackground(options.getBackgroundColor());\r\n                eventDispatcher.dispatchUpdateEvent(property);\r\n            } else {\r\n                textField.setBackground(options.getInvalidColor());\r\n            }\r\n        }\r\n    }\r\n}\r\n","size_bytes":1727},"prop/src/main/java/com/gabriel/property/validator/integer/IntegerValidator.java":{"content":"package com.gabriel.property.validator.integer;\r\n\r\nimport com.gabriel.property.validator.Validator;\r\n\r\n/**\r\n * Default implementation to validate integer objects\r\n */\r\npublic class IntegerValidator implements Validator {\r\n\r\n    @Override\r\n    public boolean validate(Object object) {\r\n        return isInteger(object);\r\n    }\r\n\r\n    protected boolean isInteger(Object object) {\r\n        try {\r\n            Integer.parseInt((String) object);\r\n        } catch (NumberFormatException e) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","size_bytes":559},"prop/src/main/java/com/gabriel/property/property/selection/SelectionProperty.java":{"content":"package com.gabriel.property.property.selection;\r\n\r\nimport  com.gabriel.property.property.AbstractProperty;\r\nimport com.gabriel.property.validator.NullValidator;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class SelectionProperty<T> extends AbstractProperty<T> {\r\n\r\n    protected ArrayList<Item<T>> items;\r\n\r\n    public SelectionProperty(String name, ArrayList<Item<T>> items) {\r\n        super(name, items.get(0).getValue(), new NullValidator());\r\n\r\n        this.items = items;\r\n    }\r\n\r\n    public ArrayList<Item<T>> getItems() {\r\n        return items;\r\n    }\r\n}\r\n","size_bytes":562},"draw/src/main/java/com/gabriel/draw/component/PropertySheet.java":{"content":"package com.gabriel.draw.component;\r\n\r\nimport com.gabriel.draw.controller.PropertyEventListener;\r\nimport com.gabriel.drawfx.ShapeMode;\r\nimport com.gabriel.drawfx.model.Drawing;\r\nimport com.gabriel.property.PropertyOptions;\r\nimport com.gabriel.property.PropertyPanel;\r\nimport com.gabriel.property.cell.SelectionCellComponent;\r\nimport com.gabriel.property.property.*;\r\nimport com.gabriel.property.property.selection.Item;\r\nimport com.gabriel.property.property.selection.SelectionProperty;\r\nimport com.gabriel.property.validator.CompoundValidator;\r\nimport com.gabriel.property.validator.StringValidator;\r\nimport com.gabriel.property.validator.doubleNumber.DoubleRangeValidator;\r\nimport com.gabriel.property.validator.doubleNumber.DoubleValidator;\r\nimport com.gabriel.property.validator.doubleNumber.DoubleZeroPolicyValidator;\r\nimport com.gabriel.drawfx.model.Shape;\r\nimport com.gabriel.drawfx.service.AppService;\r\n\r\nimport java.awt.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\n\r\npublic class PropertySheet extends PropertyPanel {\r\n    PropertyPanel propertyTable;\r\n    private SelectionProperty shapeProp;\r\n    Item RectangleItem;\r\n    Item EllipseItem;\r\n    Item LineItem;\r\n    Item TextItem;\r\n    Item SelectItem;\r\n\r\n\r\n    public void setShapeProp(ShapeMode shapeMode ){\r\n        SelectionCellComponent  selectionComponent =  propertyTable.getSelectionCellComponent();\r\n        if (shapeMode ==ShapeMode.Rectangle) {\r\n            selectionComponent.setCellEditorValue(RectangleItem);\r\n        } else if (shapeMode == ShapeMode.Ellipse) {\r\n            selectionComponent.setCellEditorValue(EllipseItem);\r\n        } else if (shapeMode == ShapeMode.Line) {\r\n            selectionComponent.setCellEditorValue(LineItem);\r\n        } else if (shapeMode == ShapeMode.Select) {\r\n            selectionComponent.setCellEditorValue(SelectItem);\r\n        }\r\n    }\r\n\r\n    public PropertySheet(PropertyOptions options){\r\n        super(options);\r\n        shapeProp = new SelectionProperty<>(\r\n                \"Current Shape\",\r\n                new ArrayList<>(Arrays.asList(\r\n                        new Item<>(ShapeMode.Rectangle, \"Rectangle\"),\r\n                        new Item<>(ShapeMode.Ellipse, \"Ellipse\"),\r\n                        new Item<>(ShapeMode.Line, \"Line\"),\r\n                        new Item<>(ShapeMode.Text, \"Text\"),\r\n                        new Item<>(ShapeMode.Select, \"Select\")\r\n                ))\r\n        );\r\n    }\r\n\r\n    public void populateTable(AppService appService) {\r\n        Drawing drawing = appService.getDrawing();\r\n        propertyTable = this;\r\n        propertyTable.addEventListener(new PropertyEventListener(appService));\r\n\r\n        propertyTable.clear();\r\n        Shape shape  = appService.getSelectedShape();\r\n        String objectType;\r\n        if ( shape == null) {\r\n            objectType = \"Drawing\";\r\n        }\r\n        else {\r\n            objectType = \"Shape\";\r\n        }\r\n\r\n        StringProperty targetProp = new StringProperty(\"Object Type\", objectType);\r\n        propertyTable.addProperty(targetProp);\r\n\r\n        RectangleItem = new Item<ShapeMode>(ShapeMode.Rectangle, \"Rectangle\");\r\n        EllipseItem = new Item<ShapeMode>(ShapeMode.Ellipse, \"Ellipse\");\r\n        LineItem =    new Item<ShapeMode>(ShapeMode.Line, \"Line\");\r\n        SelectItem =    new Item<ShapeMode>(ShapeMode.Select, \"Select\");\r\n        TextItem =    new Item<ShapeMode>(ShapeMode.Text, \"Text\");\r\n        shapeProp = new SelectionProperty<>(\r\n                \"Current Shape\",\r\n                new ArrayList<>(Arrays.asList(\r\n                        RectangleItem,\r\n                        EllipseItem,\r\n                        LineItem,\r\n                        SelectItem,\r\n                        TextItem\r\n                ))\r\n        );\r\n\r\n        propertyTable.addProperty(shapeProp);\r\n\r\n        SelectionCellComponent  selectionComponent =  propertyTable.getSelectionCellComponent();\r\n        ShapeMode shapeMode = appService.getShapeMode();\r\n        if(shapeMode == ShapeMode.Rectangle) {\r\n            selectionComponent.setCellEditorValue(RectangleItem);\r\n        }\r\n        else if(shapeMode == ShapeMode.Ellipse) {\r\n            selectionComponent.setCellEditorValue(EllipseItem);\r\n        }\r\n        else if(shapeMode == ShapeMode.Line) {\r\n            selectionComponent.setCellEditorValue(LineItem);\r\n        }\r\n        else if(shapeMode == ShapeMode.Select) {\r\n            selectionComponent.setCellEditorValue(SelectItem);\r\n        }\r\n        shapeProp.setValue(shape);\r\n\r\n\r\n        ColorProperty currentColorProp = new ColorProperty(\"Fore color\", appService.getColor());\r\n        propertyTable.addProperty(currentColorProp);\r\n\r\n        ColorProperty currentFillProp = new ColorProperty(\"Fill color\",  appService.getFill());\r\n        propertyTable.addProperty(currentFillProp);\r\n\r\n        ColorProperty currentStartColorProp = new ColorProperty(\"Start color\",  appService.getStartColor());\r\n        propertyTable.addProperty(currentStartColorProp);\r\n\r\n        ColorProperty currentEndColorProp = new ColorProperty(\"End color\",  appService.getEndColor());\r\n        propertyTable.addProperty(currentEndColorProp);\r\n\r\n        IntegerProperty startx = new IntegerProperty(\"Start x\", appService.getXLocation());\r\n        propertyTable.addProperty(startx );\r\n\r\n        IntegerProperty starty = new IntegerProperty(\"Start y\", appService.getXLocation());\r\n        propertyTable.addProperty(starty );\r\n\r\n        IntegerProperty endx = new IntegerProperty(\"End x\", appService.getXLocation());\r\n        propertyTable.addProperty(endx );\r\n\r\n        IntegerProperty endy = new IntegerProperty(\"End y\", appService.getXLocation());\r\n        propertyTable.addProperty(endy );\r\n\r\n        BooleanProperty isGradientProp = new BooleanProperty(\"IsGradient\",  appService.isGradient() );\r\n        propertyTable.addProperty(isGradientProp);\r\n\r\n        BooleanProperty isVisibleProp = new BooleanProperty(\"IsVisible\",  appService.isGradient() );\r\n        propertyTable.addProperty(isVisibleProp);\r\n\r\n        IntegerProperty lineThicknessProp = new IntegerProperty(\"Line Thickness\", appService.getThickness());\r\n        propertyTable.addProperty(lineThicknessProp);\r\n\r\n        IntegerProperty xlocProp = new IntegerProperty(\"X Location\", appService.getXLocation());\r\n        propertyTable.addProperty(xlocProp);\r\n\r\n        IntegerProperty ylocProp = new IntegerProperty(\"Y Location\", appService.getYLocation());\r\n        propertyTable.addProperty(ylocProp);\r\n\r\n        IntegerProperty width = new IntegerProperty(\"Width\", appService.getXLocation());\r\n        propertyTable.addProperty(width );\r\n\r\n        IntegerProperty height = new IntegerProperty(\"Height\", appService.getXLocation());\r\n        propertyTable.addProperty(height);\r\n\r\n        BooleanProperty prop3 = new BooleanProperty(\"Boolean\", true);\r\n        propertyTable.addProperty(prop3);\r\n\r\n        if(shape!=null) {\r\n            BooleanProperty selectedProp = new BooleanProperty(\"is Selected\", shape.isSelected());\r\n            propertyTable.addProperty(selectedProp);\r\n        }\r\n\r\n        FloatProperty prop4 = new FloatProperty(\"Float\", 1.2f);\r\n        propertyTable.addProperty(prop4);\r\n\r\n        StringProperty stringProp = new StringProperty(\"Text\", appService.getText());\r\n        propertyTable.addProperty(stringProp);\r\n\r\n        stringProp = new StringProperty(\"Image\", appService.getImageFilename());\r\n        propertyTable.addProperty(stringProp);\r\n\r\n        Font font = appService.getFont();\r\n\r\n        stringProp = new StringProperty(\"Font family\", font.getFamily());\r\n        propertyTable.addProperty(stringProp);\r\n\r\n        IntegerProperty intProp = new IntegerProperty(\"Font style\", font.getStyle());\r\n        propertyTable.addProperty(intProp);\r\n\r\n        intProp = new IntegerProperty(\"Font size\", font.getSize());\r\n        propertyTable.addProperty(intProp);\r\n\r\n        StringProperty prop6 = new StringProperty(\"String 2\", \"test\", new StringValidator(\r\n                new String[]{\"test\", \"test 2\", \"foo\"}\r\n        ));\r\n        propertyTable.addProperty(prop6);\r\n\r\n        DoubleProperty prop8 = new DoubleProperty(\"Double\", 2.34,\r\n                new CompoundValidator(\r\n                        new DoubleValidator(),\r\n                        new DoubleRangeValidator(-1.2, 45.33, true, false),\r\n                        new DoubleZeroPolicyValidator(false)\r\n                )\r\n        );\r\n        ActionProperty prop9;\r\n        prop9 = new ActionProperty(\"Press me\", \"Press me\",\r\n                () -> {\r\n                    System.out.println(\"Pressed\");\r\n                });\r\n        propertyTable.addProperty(prop9);\r\n    }\r\n}\r\n","size_bytes":8620},"draw/src/main/java/com/gabriel/draw/view/DrawingStatusPanel.java":{"content":"package com.gabriel.draw.view;\r\n\r\nimport com.gabriel.drawfx.service.AppService;\r\nimport javax.swing.*;\r\nimport javax.swing.border.BevelBorder;\r\nimport java.awt.*;\r\n\r\npublic class DrawingStatusPanel extends JPanel {\r\n    JLabel coordinateLabel = new JLabel(\"Command\");\r\n    JTextField xText = new JTextField();\r\n    JTextField yText = new JTextField();\r\n\r\n    public DrawingStatusPanel(){\r\n        super.setBorder(new BevelBorder(BevelBorder.LOWERED));\r\n        setLayout(new BoxLayout(this, BoxLayout.X_AXIS));\r\n        JLabel statusLabel = new JLabel(\"status\");\r\n        statusLabel.setHorizontalAlignment(SwingConstants.LEFT);\r\n        add(statusLabel);\r\n        add(new JLabel(\"x: \"));\r\n        add(xText);\r\n        add(new JLabel(\"y: \"));\r\n        add(yText);\r\n        xText.setSize(16,36);\r\n        yText.setSize(16,36);\r\n        xText.setText(\"100\");\r\n        yText.setText(\"250\");\r\n\r\n        setPreferredSize(new Dimension( 1440,16));\r\n        this.setBackground(Color.DARK_GRAY);\r\n    }\r\n    public void setPoint(Point p){\r\n        xText.setText(\"x = \" + String.valueOf(p.x));\r\n        yText.setText(\"y = \" + String.valueOf(p.y));\r\n    }\r\n}\r\n","size_bytes":1150},"fontchooser/src/main/java/com/gabriel/fontchooser/listeners/SizeListSelectionListener.java":{"content":"package com.gabriel.fontchooser.listeners;\r\n\r\nimport java.awt.Font;\r\nimport javax.swing.event.ListSelectionEvent;\r\nimport javax.swing.event.ListSelectionListener;\r\nimport lombok.RequiredArgsConstructor;\r\nimport com.gabriel.fontchooser.FontContainer;\r\n\r\n\r\n@RequiredArgsConstructor\r\npublic class SizeListSelectionListener implements ListSelectionListener {\r\n\r\n    private final FontContainer fontContainer;\r\n\r\n    @Override\r\n    public void valueChanged(ListSelectionEvent e) {\r\n        if (!e.getValueIsAdjusting()) {\r\n            float newSize = fontContainer.getSelectedSize();\r\n            Font newFont = fontContainer.getSelectedFont().deriveFont(newSize);\r\n            fontContainer.setSelectedFont(newFont);\r\n            fontContainer.setPreviewFont(fontContainer.getSelectedFont());\r\n        }\r\n    }\r\n}\r\n","size_bytes":811},"replit.md":{"content":"# GoDraw - Java Drawing Application\n\n## Overview\nGoDraw is a Java Swing-based 2D drawing application that allows users to create and manipulate vector graphics. The application provides tools for drawing shapes (lines, rectangles, ellipses), adding text and images, and managing drawings through a graphical user interface.\n\n## Project Structure\nThis is a multi-module Maven project with the following modules:\n\n- **draw**: Main application module containing the GUI and main entry point\n- **drawfx**: Core drawing functionality, models, and services\n- **prop** (property): Property sheet component for object editing\n- **fontchooser**: Font selection dialog component\n- **batik**: Apache Batik integration for SVG support\n\n## Technology Stack\n- Java 17\n- Maven build system\n- Swing for GUI\n- Lombok for reducing boilerplate code\n- Apache Batik for SVG rendering\n\n## Running the Application\nThe application is configured to run automatically in VNC mode (desktop GUI application). The workflow executes:\n```\nmvn -pl draw exec:java\n```\n\nThis compiles and runs the draw module's Main class which launches the DrawingFrame window.\n\n## Features\n- Shape drawing tools (line, rectangle, ellipse)\n- Text rendering with font selection\n- Image insertion\n- Property editing panel\n- Drawing persistence (save/load)\n- Undo/redo functionality\n- Selection and manipulation of shapes\n\n## Build Information\n- Compiler target: Java 17\n- Build tool: Maven\n- Main class: `com.gabriel.draw.Main`\n\n## Recent Changes\n- November 1, 2025: Initial Replit environment setup\n  - Fixed dependency resolution (prop → property)\n  - Fixed ActionProperty constructor call\n  - Configured VNC workflow for GUI display\n  - Added .gitignore for Java/Maven projects\n","size_bytes":1731},"draw/src/main/java/com/gabriel/draw/command/SetPropertyCommand.java":{"content":"package com.gabriel.draw.command;\n\nimport com.gabriel.drawfx.command.Command;\nimport com.gabriel.drawfx.model.Shape;\n\nimport java.lang.reflect.Method;\n\npublic class SetPropertyCommand implements Command {\n    private final Shape shape;\n    private final String propertyName;\n    private final Object newValue;\n    private final Object oldValue;\n    private final String setterMethodName;\n    private final String getterMethodName;\n\n    public SetPropertyCommand(Shape shape, String propertyName, String setterMethodName, String getterMethodName, Object newValue) {\n        this.shape = shape;\n        this.propertyName = propertyName;\n        this.setterMethodName = setterMethodName;\n        this.getterMethodName = getterMethodName;\n        this.newValue = newValue;\n        \n        try {\n            Method getter = shape.getClass().getMethod(getterMethodName);\n            this.oldValue = getter.invoke(shape);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to get old value for property: \" + propertyName, e);\n        }\n    }\n\n    @Override\n    public void execute() {\n        setProperty(newValue);\n    }\n\n    @Override\n    public void undo() {\n        setProperty(oldValue);\n    }\n\n    @Override\n    public void redo() {\n        execute();\n    }\n\n    private void setProperty(Object value) {\n        try {\n            Method setter = shape.getClass().getMethod(setterMethodName, value.getClass());\n            setter.invoke(shape, value);\n        } catch (Exception e) {\n            try {\n                Method setter = shape.getClass().getMethod(setterMethodName, int.class);\n                setter.invoke(shape, value);\n            } catch (Exception e2) {\n                throw new RuntimeException(\"Failed to set property: \" + propertyName, e2);\n            }\n        }\n    }\n}\n","size_bytes":1823},"draw/src/main/java/com/gabriel/draw/command/DeleteShapeCommand.java":{"content":"package com.gabriel.draw.command;\n\nimport com.gabriel.drawfx.command.Command;\nimport com.gabriel.drawfx.model.Shape;\nimport com.gabriel.drawfx.service.AppService;\n\npublic class DeleteShapeCommand implements Command {\n    private final AppService appService;\n    private final Shape shape;\n\n    public DeleteShapeCommand(AppService appService, Shape shape) {\n        this.appService = appService;\n        this.shape = shape;\n    }\n\n    @Override\n    public void execute() {\n        appService.getDrawing().getShapes().remove(shape);\n    }\n\n    @Override\n    public void undo() {\n        appService.getDrawing().getShapes().add(shape);\n    }\n\n    @Override\n    public void redo() {\n        execute();\n    }\n}\n","size_bytes":707},"draw/src/main/java/com/gabriel/draw/command/MoveShapeCommand.java":{"content":"package com.gabriel.draw.command;\n\nimport com.gabriel.drawfx.command.Command;\nimport com.gabriel.drawfx.model.Shape;\nimport com.gabriel.drawfx.service.AppService;\n\nimport java.awt.Point;\n\npublic class MoveShapeCommand implements Command {\n    private final AppService appService;\n    private final Shape shape;\n    private final Point start;\n    private final Point end;\n    private final int originalX;\n    private final int originalY;\n\n    public MoveShapeCommand(AppService appService, Shape shape, Point start, Point end) {\n        this.appService = appService;\n        this.shape = shape;\n        this.start = new Point(start);\n        this.end = new Point(end);\n        this.originalX = shape.getLocation().x;\n        this.originalY = shape.getLocation().y;\n    }\n\n    @Override\n    public void execute() {\n        int dx = end.x - start.x;\n        int dy = end.y - start.y;\n        shape.getLocation().x += dx;\n        shape.getLocation().y += dy;\n    }\n\n    @Override\n    public void undo() {\n        shape.getLocation().x = originalX;\n        shape.getLocation().y = originalY;\n    }\n\n    @Override\n    public void redo() {\n        execute();\n    }\n}\n","size_bytes":1160},"draw/src/main/java/com/gabriel/draw/command/ScaleShapeCommand.java":{"content":"package com.gabriel.draw.command;\n\nimport com.gabriel.drawfx.command.Command;\nimport com.gabriel.drawfx.model.Shape;\nimport com.gabriel.drawfx.service.AppService;\n\nimport java.awt.Point;\n\npublic class ScaleShapeCommand implements Command {\n    private final AppService appService;\n    private final Shape shape;\n    private final Point start;\n    private final Point end;\n    private final int originalX;\n    private final int originalY;\n    private final int originalWidth;\n    private final int originalHeight;\n\n    public ScaleShapeCommand(AppService appService, Shape shape, Point start, Point end) {\n        this.appService = appService;\n        this.shape = shape;\n        this.start = new Point(start);\n        this.end = new Point(end);\n        this.originalX = shape.getLocation().x;\n        this.originalY = shape.getLocation().y;\n        this.originalWidth = shape.getWidth();\n        this.originalHeight = shape.getHeight();\n    }\n\n    @Override\n    public void execute() {\n        appService.scale(shape, start, end);\n    }\n\n    @Override\n    public void undo() {\n        shape.getLocation().x = originalX;\n        shape.getLocation().y = originalY;\n        shape.setWidth(originalWidth);\n        shape.setHeight(originalHeight);\n    }\n\n    @Override\n    public void redo() {\n        execute();\n    }\n}\n","size_bytes":1316}},"version":2}